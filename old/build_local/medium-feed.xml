<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>DanHolloran</title>
		<description>My adventures on and off of the internetz.</description>
		<link>https://danholloran.test</link>
		<atom:link href="https://danholloran.test/feed.xml" rel="self" type="application/rss+xml"/>
		<pubDate>Sat, 09 Mar 2019 16:54:56 +0000</pubDate>
		<lastBuildDate>Sat, 09 Mar 2019 16:54:56 +0000</lastBuildDate>
					<item>
				<title>Laracon Online 2019 Notes and Thoughts</title>
				<description>
					<![CDATA[
					&lt;p&gt;These are my notes from Laracon 2019 was an interesting conference and a lot of fun. I think you may still be able to buy tickets to access the recordings at &lt;a href=&quot;https://laracon.net/&quot;&gt;https://laracon.net/&lt;/a&gt;. It is nice being online not having to travel makes it easier to go.&lt;/p&gt;
&lt;h2&gt;Getting started with event sourcing in Laravel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Freek Van der Herten &lt;a href=&quot;https://twitter.com/freekmurze&quot;&gt;@freekmurze&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slides:&lt;/strong&gt; &lt;a href=&quot;https://speakerdeck.com/freekmurze/event-sourcing-laracon-online&quot;&gt;https://speakerdeck.com/freekmurze/event-sourcing-laracon-online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Application fires events when data changes and those are logged&lt;/li&gt;
&lt;li&gt;Good for auditing, issue recreation and reporting&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spatie/laravel-event-projector&quot;&gt;https://github.com/spatie/laravel-event-projector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spatie/laravel-eventsauce&quot;&gt;https://github.com/spatie/laravel-eventsauce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Writing less complex, more readable code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Jason McCreary &lt;a href=&quot;https://twitter.com/gonedark&quot;&gt;@gonedark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code quality level how many WTFs per minute&lt;/li&gt;
&lt;li&gt;Martin Fowler - Refactoring&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Guidelines for good code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Formatting
&lt;ul&gt;
&lt;li&gt;Consitency matters&lt;/li&gt;
&lt;li&gt;Choose it, automate it and forget it&lt;/li&gt;
&lt;li&gt;Use community standard if possible&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://styleci.io/&quot;&gt;https://styleci.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dead code&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Why is it here and why is it not used&lt;/li&gt;
&lt;li&gt;Commented code just remove it&lt;/li&gt;
&lt;li&gt;Unused variables&lt;/li&gt;
&lt;li&gt;Boy Scouting - Leave it better than you found it&lt;/li&gt;
&lt;li&gt;Unreachable code may be harder to see in larger blocks&lt;/li&gt;
&lt;li&gt;Unnecessary syntax. Such as a switch with just returns break is not needed and never for default&lt;/li&gt;
&lt;li&gt;Flagged code some sort of state such as promotion or coupon code&lt;/li&gt;
&lt;li&gt;If you encounter it remove it&lt;/li&gt;
&lt;li&gt;Make sure primary action is at top level. Helpful to early return aka guard clause&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nested Code&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Avoid else where possible&lt;/li&gt;
&lt;li&gt;Avoid nested code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Using objects&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Pass objects of grouped date (data clump) if possible over simple types (int,string,etc.)
&lt;ul&gt;
&lt;li&gt;Use value objects basically a class with private props and getters no setters allows it to be immutable&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Allows for adding methods to abstract complex logic&lt;/li&gt;
&lt;li&gt;Options array are abused in PHP and do not have a specific structure makes it untidy hard to know all options&lt;/li&gt;
&lt;li&gt;Use enums to reduce options to allowed values.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Big blocks&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Leverage framework when possible
&lt;ul&gt;
&lt;li&gt;Validation → form request&lt;/li&gt;
&lt;li&gt;Model look up → implicit model binding&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For top level methods such as a controller try to make as simple as possible&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Naming&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Two hardest things in programming naming, cache invalidation and off by 1 errors&lt;/li&gt;
&lt;li&gt;don&#039;t be a special snowflake use language conventions&lt;/li&gt;
&lt;li&gt;Foreach use plural and singular make it specific to context&lt;/li&gt;
&lt;li&gt;No need to over abbreviate&lt;/li&gt;
&lt;li&gt;Try to relay human aspects &lt;code&gt;$str_error&lt;/code&gt; → &lt;code&gt;$error_message&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start with technical name and allow time to come up with something better&lt;/li&gt;
&lt;li&gt;Use a thesaurus&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Removing comments&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Screen_Shot_2019-03-06_at_9-87b13d24-c7bc-46e0-942a-0cb52028f0c8.33.23_AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Misleading comments are confusing&lt;/li&gt;
&lt;li&gt;Comments can be skipped over&lt;/li&gt;
&lt;li&gt;Attempt to improve the code over comments&lt;/li&gt;
&lt;li&gt;Doc Blocks ≠ Comments they server documentation purposes&lt;/li&gt;
&lt;li&gt;Look for inline comments that explain exactly what the code is doing such as &lt;code&gt;// date for yesterday&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Proximity rule take variables closer to where they are being used makes it easier to tie it together&lt;/li&gt;
&lt;li&gt;If comment is relaying why this are still important&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reasonable returns&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Return something other than &lt;code&gt;null&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Possibly return a mock or null object that behaves like the real object
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;User&lt;/code&gt; → &lt;code&gt;GuestUser&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rule of three&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Wait until ~3 duplications before abstracting to avoid over engineering&lt;/li&gt;
&lt;li&gt;Helps you find the correct solution&lt;/li&gt;
&lt;li&gt;Make sure names align.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Symetry&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Naming and thinks like keeping methods with methods&lt;/li&gt;
&lt;li&gt;Keep object access level consistent&lt;/li&gt;
&lt;li&gt;Keep not checks the same&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Realtime applications with Laravel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Marcel Pociot &lt;a href=&quot;https://twitter.com/marcelpociot&quot;&gt;@marcelpociot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AJAX polling approach sending a request a second or so. Not best fit for realtime application such as chat&lt;/li&gt;
&lt;li&gt;AJAX long polling attempts to keep the request open as long as possible until it times out then client sends a request again. Better than sending a request a second but could be better.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Websockets permanent connection between client and server&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Screen_Shot_2019-03-06_at_10-deb3a3a1-6955-44bb-94ee-8bd344af3a73.10.05_AM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can be text or binary data&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://caniuse.com/#search=websockets&quot;&gt;All major browsers support except for Opera mini&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Instant message sending&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://socketo.me/&quot;&gt;Ratchet PHP websockets in PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tlaverdure/laravel-echo-server&quot;&gt;Laravel echo server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/beyondcode/laravel-websockets&quot;&gt;Laravel WebSockets&lt;/a&gt; &lt;a href=&quot;https://pusher.com/&quot;&gt;Pusher&lt;/a&gt; replacement works with &lt;a href=&quot;https://github.com/laravel/echo&quot;&gt;Laravel Echo&lt;/a&gt;. Does not rely on node.js
&lt;ul&gt;
&lt;li&gt;Pitfalls
&lt;ul&gt;
&lt;li&gt;Ulimit unix file limit default is 1000 concurrent connections&lt;/li&gt;
&lt;li&gt;Event Loop is limited to 1000 connections as well&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.beyondco.de/laravel-websockets/1.0/faq/deploying.html&quot;&gt;Fixes exist here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://murze.be/introducing-laravel-websockets-an-easy-to-use-websocket-server-implemented-in-php&quot;&gt;https://murze.be/introducing-laravel-websockets-an-easy-to-use-websocket-server-implemented-in-php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What&#039;s New in React&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Wes Bos &lt;a href=&quot;https://twitter.com/wesbos&quot;&gt;@wesbos&lt;/a&gt; ‏&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slides:&lt;/strong&gt; &lt;a href=&quot;https://wesbos.github.io/Whats-New-In-React/#1&quot;&gt;https://wesbos.github.io/Whats-New-In-React/#1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Context API
&lt;ul&gt;
&lt;li&gt;React context allows you to pas data down multiple levels the need to pass through props at each level&lt;/li&gt;
&lt;li&gt;Prop drilling passing props down through multiple components&lt;/li&gt;
&lt;li&gt;Allows for injecting a consumer into a component one solution for global shared data&lt;/li&gt;
&lt;li&gt;It relies on a parent provider component&lt;/li&gt;
&lt;li&gt;Good for medium sized applications&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Fragements
&lt;ul&gt;
&lt;li&gt;Fixes extra &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;s since you can not have more than one html element in a component.&lt;/li&gt;
&lt;li&gt;Fixes descendent selectors since you do not need a wrapping &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Does Vue have a solution for this?
&lt;ul&gt;
&lt;li&gt;Not built in but &lt;a href=&quot;https://github.com/y-nk/vue-fragment&quot;&gt;Vue Fragments&lt;/a&gt; exists&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Error boundaries
&lt;ul&gt;
&lt;li&gt;Handles not being able to &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; in JSX&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Refs
&lt;ul&gt;
&lt;li&gt;Escape hatch for getting DOM elements. Seems to be like Vue.js &lt;code&gt;this.$refs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Helpful for wrapping older plugins/code&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Portals
&lt;ul&gt;
&lt;li&gt;Useful for modals and what not&lt;/li&gt;
&lt;li&gt;Somewhat like a built in version of &lt;a href=&quot;https://linusborg.github.io/portal-vue/#/&quot;&gt;Portal Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Can be used to handle tags out side of the React root element&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Suspense (Coming Soon)
&lt;ul&gt;
&lt;li&gt;Waiting for things to load before rendering&lt;/li&gt;
&lt;li&gt;Helps with code splitting, data fetching and images&lt;/li&gt;
&lt;li&gt;Decouples loading ui from components&lt;/li&gt;
&lt;li&gt;Minimizes loaders on faster connections&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hooks
&lt;ul&gt;
&lt;li&gt;New way to write state and other things without classes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exploring Laravel 5.8&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Taylor Otwell &lt;a href=&quot;https://twitter.com/taylorotwell&quot;&gt;@taylorotwell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;hasOneThrough relationship
&lt;ul&gt;
&lt;li&gt;Basically handles accessing has one relationship has one relationship &lt;code&gt;$supplier→account→history&lt;/code&gt; to &lt;code&gt;$supplier→accountHistory&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Auto discovering of model policies&lt;/li&gt;
&lt;li&gt;Supports hashing API tokens with sha256 for simple API authentication without using Laravel Passport. Basically for Bearer Token API instead of oAuth.&lt;/li&gt;
&lt;li&gt;Pivot models dispatch model events
&lt;ul&gt;
&lt;li&gt;Not new but custom pivot models are pretty cool&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Default scheduler timezone&lt;/li&gt;
&lt;li&gt;Artisan in code simplification can pass like you would on the command line&lt;/li&gt;
&lt;li&gt;Testing mock helpers cleans up mocking then replacing in the container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;orWhere()&lt;/code&gt; higher order function helps remove callbacks on &lt;code&gt;orWhere&lt;/code&gt; scopes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://laravel.com/docs/5.8/cache#atomic-locks&quot;&gt;Atomic lock&lt;/a&gt; process running longer than requested fixed&lt;/li&gt;
&lt;li&gt;Artisan serve adds port scanning to allow for multiple instances&lt;/li&gt;
&lt;li&gt;Improvements to Redis blocking pop allows pinging of Redis block time. Still allows queues to be processed quickly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Laravel, the Blockchain, and You!&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Samantha Geitz &lt;a href=&quot;https://twitter.com/SamanthaGeitz&quot;&gt;@SamanthaGeitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slides:&lt;/strong&gt; &lt;a href=&quot;https://speakerdeck.com/samanthamichele7/laravel-the-blockchain-and-you&quot;&gt;https://speakerdeck.com/samanthamichele7/laravel-the-blockchain-and-you&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Should i use blockchain probably not unless you are solving a specific problem&lt;/li&gt;
&lt;li&gt;Blockchain is decentralized multiple servers with entire copy of database&lt;/li&gt;
&lt;li&gt;Add new blocks that shows how the data should change&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Somewhat like Git more in the way the changes are tracked&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Screen_Shot_2019-03-06_at_1-2ef938be-cde4-4d9b-809c-a5fa9124bed3.40.57_PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is slow and comparatively expensive then a MySQL database&lt;/li&gt;
&lt;li&gt;If you cant do it on a smartphone from 1999 probably shouldn&#039;t do it&lt;/li&gt;
&lt;li&gt;Helps solve currency forging and other issues&lt;/li&gt;
&lt;li&gt;You can buy or &amp;quot;mine&amp;quot; them&lt;/li&gt;
&lt;li&gt;Needs a private key and public to access much like SSH Keys&lt;/li&gt;
&lt;li&gt;Mining incentivizes integrity of the network&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ethereum.org/&quot;&gt;Ethereum&lt;/a&gt; is meant to build decentralized apps and built in JavaScript
&lt;ul&gt;
&lt;li&gt;Used to solve Xbox game publisher royalties
&lt;ul&gt;
&lt;li&gt;Went from ~45 days to almost immediately&lt;/li&gt;
&lt;li&gt;Reduced publishers cost 99% and cut Microsofts in half&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.webjet.com.au/&quot;&gt;Webjet&lt;/a&gt; a travel company
&lt;ul&gt;
&lt;li&gt;Problem is double booking/disputes about 5% annually&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Possible good use cases
&lt;ul&gt;
&lt;li&gt;Voting app&lt;/li&gt;
&lt;li&gt;DRM management of video/games&lt;/li&gt;
&lt;li&gt;Verifying identity of participants is important financial, legal, doctor&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Bad use cases
&lt;ul&gt;
&lt;li&gt;Most things&lt;/li&gt;
&lt;li&gt;Data is in constant flux&lt;/li&gt;
&lt;li&gt;If you want ability to add/edit records&lt;/li&gt;
&lt;li&gt;Speed/performance important&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Tools
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://web3js.readthedocs.io/en/1.0/&quot;&gt;web3.js&lt;/a&gt; main for Etherum&lt;/li&gt;
&lt;li&gt;Nothing really for PHP&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://truffleframework.com/&quot;&gt;Truffle Framework&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://truffleframework.com/ganache&quot;&gt;Ganache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://truffleframework.com/drizzle&quot;&gt;Drizzle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://coinpress.cc/&quot;&gt;https://coinpress.cc/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Databases in space&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Matt Stauffer &lt;a href=&quot;https://twitter.com/stauffermatt&quot;&gt;@stauffermatt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slides:&lt;/strong&gt; &lt;a href=&quot;https://speakerdeck.com/mattstauffer/databases-in-space&quot;&gt;https://speakerdeck.com/mattstauffer/databases-in-space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This is one that is really interesting and I may want to dig more in it in the future but now its more fun to just listen&lt;/li&gt;
&lt;li&gt;Example &lt;a href=&quot;https://github.com/mattstauffer/alberts-avocado-toast&quot;&gt;https://github.com/mattstauffer/alberts-avocado-toast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.geocod.io/&quot;&gt;Laravel Friends GeoCodio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/&quot;&gt;Google Maps Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/spatial-type-overview.html&quot;&gt;MySQL spatial types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/achieving-geo-search-with-laravel-scout-and-algolia&quot;&gt;Algolia (scotch.io)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@brice_hartmann/getting-started-with-geospatial-data-in-laravel-94502dc74d55&quot;&gt;Intro Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/grimzy/laravel-mysql-spatial&quot;&gt;Laravel MySQL Spatial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/njbarrett/laravel-postgis&quot;&gt;Laravel Postgis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Practical Solutions to Common UI Design Problems&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Steve Schoger &lt;a href=&quot;https://twitter.com/steveschoger&quot;&gt;@steveschoger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slides:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.figma.com/&quot;&gt;https://www.figma.com/&lt;/a&gt; - In browser design tool&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://duotone.shapefactory.co/&quot;&gt;https://duotone.shapefactory.co/&lt;/a&gt; - Tool for transforming images&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://unsplash.com/&quot;&gt;https://unsplash.com/&lt;/a&gt; - Nice images&lt;/li&gt;
&lt;li&gt;Design inspiration
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://land-book.com/&quot;&gt;https://land-book.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.siteinspire.com/&quot;&gt;https://www.siteinspire.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dribbble.com/&quot;&gt;https://dribbble.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Don&#039;t use grey text on colored backgrounds&lt;/li&gt;
&lt;li&gt;Use perceived brightness&lt;/li&gt;
&lt;li&gt;Start with too much whitespace
&lt;ul&gt;
&lt;li&gt;Use input length as an affordance show how much is expected to be input&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Balance weight and contrast&lt;/li&gt;
&lt;li&gt;Supercharge the defaults&lt;/li&gt;
&lt;li&gt;Create depth with color&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font-feature-settings: &quot;tnum&quot;;&lt;/code&gt; behaves like a monospaced font to align characters&lt;/li&gt;
&lt;li&gt;This talk really needs to be watched&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.heropatterns.com/&quot;&gt;https://www.heropatterns.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use good fonts&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interesting mobile table solution convert it to accordions. This would be semi-annoying in PHP/Blade but super easy in Vue.js&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/Screen_Shot_2019-03-06_at_4-1916ca15-81cf-4ad6-8acd-ed14be54bee4.28.54_PM.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Tailwind CSS by Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Adam Wathan &lt;a href=&quot;https://twitter.com/adamwathan&quot;&gt;@adamwathan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Slides:&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tailwindcss.com/docs/what-is-tailwind&quot;&gt;https://tailwindcss.com/docs/what-is-tailwind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Live coding not really much to note it really needs to be watched&lt;/li&gt;
&lt;/ul&gt;
					]]>
				</description>
				<pubDate>Thu, 07 Mar 2019 07:26:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2019/03/07/laracon-online-2019-notes-and-thoughts</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2019/03/07/laracon-online-2019-notes-and-thoughts</guid>
											</item>
					<item>
				<title>Testing mocked email in WordPress with PHPUnit</title>
				<description>
					<![CDATA[
					&lt;div class=&quot;alert alert-info&quot;&gt;
    &lt;p&gt;Before we get started this post assumes the following.&lt;/p&gt;
    &lt;ul&gt;
        &lt;li&gt;
            You have some understanding of PHPUnit and using it with WordPress
        &lt;/li&gt;
        &lt;li&gt;
            You are scaffolding your tests via &lt;a href=&quot;https://developer.wordpress.org/cli/commands/scaffold/plugin-tests/&quot;&gt;&lt;code&gt;wp scaffold plugin-tests&lt;/code&gt;&lt;/a&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;This is a quick tip about mocking e-mails when testing WordPress with PHPUnit. There&#039;s a &lt;a href=&quot;https://core.trac.wordpress.org/browser/trunk/tests/phpunit/includes/mock-mailer.php&quot;&gt;&lt;code&gt;MockPHPMailer&lt;/code&gt;&lt;/a&gt; that replaces the default PHPMailer implementation used to send e-mails in WordPress. You can get access to the emails that have sent out via your tests. You can access the mailer via &lt;code&gt;global $phpmailer&lt;/code&gt; and the emails with &lt;code&gt;$phpmailer-&amp;gt;mock_sent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below is an example of using this in your tests. It assumes one email sent for simplicity this may work for simple situations. This could break your test if there are multiple emails sent if the order changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/** @test */
public function it_sends_a_new_order_notification_when_a_new_order_is_created()
{
    global $phpmailer;

    $user = $this-&amp;gt;createUser();

    (new Order)-&amp;gt;forUser($user)-&amp;gt;createFromCart();

    $this-&amp;gt;assertNotNull($phpmailer-&amp;gt;mock_sent[0]);
    $mail = $phpmailer-&amp;gt;mock_sent[0];
    $this-&amp;gt;assertEquals(&#039;john@example.com&#039;, $mail[&#039;to&#039;][0][0]);
    $this-&amp;gt;assertContains(&#039;Thank you for your order&#039;, $mail[&#039;subject&#039;]);
    $this-&amp;gt;assertContains(&#039;Order details&#039;, $mail[&#039;body&#039;]);
}&lt;/code&gt;&lt;/pre&gt;
					]]>
				</description>
				<pubDate>Sat, 15 Dec 2018 07:26:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2018/12/15/testing-mocked-email-in-word-press-with-php-unit</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2018/12/15/testing-mocked-email-in-word-press-with-php-unit</guid>
											</item>
					<item>
				<title>Sync Google Tasks With IFTTT</title>
				<description>
					<![CDATA[
					&lt;p&gt;So I recently purchased an Amazon Echo and I wanted to be able to add todos to my list via my voice. However the built in task manager is extremely simple and I did not have any interest in the two options that can directly integrate with Echo. So I needed to find a better solution.&lt;/p&gt;
&lt;p&gt;I currently use &lt;a href=&quot;http://www.katans.com/&quot;&gt;gTasks&lt;/a&gt; for tracking my tasks which uses Google Tasks to sync the tasks. However, I could not find a good way to get Alexa and Google Tasks to work together.&lt;/p&gt;
&lt;p&gt;So I decided to build my own solution using the &lt;a href=&quot;https://ifttt.com/maker&quot;&gt;IFTTT Maker Channel&lt;/a&gt;. This way not only can it work with Amazon Alexa but any task service that you use that supports IFTTT, along with anything that can send a JSON web request. Such as iOS Reminders so you can add tasks via Siri that easily sync with Google Tasks using the Reminders IFTTT Channel.&lt;/p&gt;
&lt;p&gt;You can register to sync your todos with Google Tasks at &lt;del&gt;&lt;a href=&quot;https://sync.danholloran.me/register&quot;&gt;https://sync.danholloran.me/register&lt;/a&gt;&lt;/del&gt;. Feel free to let me know if you find any issues or have suggestions to make it better.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 17 Dec 2016 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/12/17/sync-google-tasks-with-ifttt</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/12/17/sync-google-tasks-with-ifttt</guid>
											</item>
					<item>
				<title>Check Out Down Them All Extension for Firefox</title>
				<description>
					<![CDATA[
					&lt;p&gt;Quick tip I figured I would share. If you ever need to download a larger amount of images and you do not have FTP access and you know the URLs. &lt;a href=&quot;http://www.downthemall.net&quot;&gt;Down Them All&lt;/a&gt; extension for Firefox is great.&lt;/p&gt;
&lt;p&gt;All you have to do is list out all of the URLs on a HTML page in Firefox, select them all and then right click and select Down them all then go through the settings. You can optionally rename each file, download only certain types of files and more. It works on any URL in the page wether it is a real link or not.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 08 Nov 2016 18:18:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/11/08/check-out-down-them-all-extension-for-firefox</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/11/08/check-out-down-them-all-extension-for-firefox</guid>
											</item>
					<item>
				<title>Introducing Press CLI: A Configurable WordPress Installer</title>
				<description>
					<![CDATA[
					&lt;p&gt;So I have been wanting to build a WordPress installer for a while now. It is a lot of effort setting up multiple WordPress installs in the same basic configuration to start a project. I admit it I am extremely lazy but thats okay. I also wanted an excuse to build something with the Symfony Console component which makes building a CLI tool fairly easy.&lt;/p&gt;
&lt;p&gt;I like using WP CLI to do tasks to help speed it up but it has a large amount of commands to remember. Along with having to enter things like database credentials each time that never change. So I figured I would create Press CLI to add configuration and automatically run WP CLI commands along with custom commands if you like. Paired with &lt;a href=&quot;https://laravel.com/docs/valet&quot;&gt;Laravel Valet&lt;/a&gt; you will not even have to setup the .dev domain it is all setup automagically from the project name.&lt;/p&gt;
&lt;p&gt;You should spend your time building awesome things not running 15 commands or going through the same old 5 minute install. The three things I really want to add to finish my vision would be to automatically connect/initialize a Git repository, fully install paid plugins with serial number and almost automatically migrate a live database using WP Migrate DB Pro so you do not have to worry about it. In that time you could grab a cup of coffee or start laying out what needs to be built.&lt;/p&gt;
&lt;p&gt;However, enough about why and lets get to the how you can learn more about Press CLI. Check out &lt;del&gt;&lt;a href=&quot;https://pressc.li/&quot;&gt;https://pressc.li/&lt;/a&gt;&lt;/del&gt; to get information on requirements, installation and how to use Press CLI. I plan on trying to get some screen casts of the available commands in case you are a more visual learner. Check out the project on &lt;a href=&quot;https://github.com/dholloran/press-cli&quot;&gt;Github&lt;/a&gt; to read the code, file an issue or request features.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 30 Oct 2016 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/10/30/introducing-press-cli-a-configurable-wordpress-installer</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/10/30/introducing-press-cli-a-configurable-wordpress-installer</guid>
											</item>
					<item>
				<title>Setting Up Your Shell Configuration and OHMyZSH</title>
				<description>
					<![CDATA[
					&lt;p&gt;A while ago I wrote  a post on &lt;a href=&quot;/2015/09/29/setting-up-your-shell/&quot;&gt;Setting Up Your Shell&lt;/a&gt;. I wanted to follow up with more information about ZShell and OHMyZSH. Since both have really made using the terminal a lot easier and more enjoyable. So check out &lt;a href=&quot;/2015/09/29/setting-up-your-shell/&quot;&gt;Setting Up Your Shell&lt;/a&gt; to get up to speed. This will be a very high overview of configuring ZSHell and OHMyZSH.&lt;/p&gt;
&lt;h2&gt;.ZSHRC&lt;/h2&gt;
&lt;p&gt;First up is the .zshrc if you have used Bash before you may be familiar with the .bashrc. This is the file where all of your configuration will be stored. I use mine primarily for aliases to make some common commands easier to type. To an alias basically looks like this &lt;code&gt;aliasname=&quot;command&quot;&lt;/code&gt; so a quick alias for &lt;a href=&quot;http://docs.behat.org/&quot;&gt;Behat&lt;/a&gt;, a BDD testing framework, would look like this &lt;code&gt;alias behat=&quot;vendor/bin/behat&quot;&lt;/code&gt;. You can edit your .zshrc with your code editor. I personally use Sublime Text with an &lt;code&gt;st&lt;/code&gt; command setup that makes opening files from the terminal easier. You can find more information about setting up the &lt;code&gt;st&lt;/code&gt; command &lt;a href=&quot;https://www.sublimetext.com/docs/3/osx_command_line.html&quot;&gt;here&lt;/a&gt;. Once you have made any edits you need to make sure to either open a new tab or run &lt;code&gt;source ~/.zshrc&lt;/code&gt; in your current tab.&lt;/p&gt;
&lt;h2&gt;$PATH&lt;/h2&gt;
&lt;p&gt;Since command line tools may be installed in many different places your shell needs to know where too look for possible matches. This is where your &lt;code&gt;$PATH&lt;/code&gt; comes in. It allows you to tell ZShell in what directories on your system to look in when trying to execute a command. Below is a list of directories added to my path. Many tools will tell you if there needs to be a special directory added such as  &lt;code&gt;~/.composer/vendor/bin&lt;/code&gt; used for &lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt;. Where you see &lt;code&gt;${PATH}:&lt;/code&gt; that is basically saying I want to append this new item to my current path. Zshell will try to look in my &lt;code&gt;/usr/local/bin&lt;/code&gt; for a command and the move on to &lt;code&gt;~/.bin&lt;/code&gt; and on down the list until it finds the correct tool. The &lt;code&gt;$USER&lt;/code&gt; variable is used to get the current users directory name which is interchangeable with &lt;code&gt;~/&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;export PATH=&quot;/usr/local/bin:$PATH&quot;
export PATH=${PATH}:~/.bin
export PATH=${PATH}:/usr/local/bin
export PATH=${PATH}:/usr/bin
export PATH=${PATH}:/bin
export PATH=${PATH}:/usr/sbin:/sbin
export PATH=${PATH}:/sbin
export PATH=${PATH}:/usr/X11/bin
export PATH=${PATH}:/usr/local/git/bin
export PATH=${PATH}:/Users/$USER/.rvm
export PATH=${PATH}:/Users/$USER/.wp-cli/bin
export PATH=${PATH}:/usr/local/share/npm/bin
export PATH=${PATH}:/usr/local/bin/node
export PATH=${PATH}:/Applications/MAMP/Library/bin
export PATH=${PATH}:~/.composer/vendor/bin&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Installing and Configuring OHMyZSH&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;OHMyZSH&lt;/a&gt; is a great companion for ZShell. It allows for a large amount of configuration of your shell with plugins and themes. It comes preset with a large amount of plugins and themes. ss well as allowing you to edit and create your own so you can customize your sehll to your hearts content  You can find the &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh#basic-installation&quot;&gt;install instructions here&lt;/a&gt;. You can find the full &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;documentation here&lt;/a&gt; and below is a screenshot of my shell while I am writing this post.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/setting-up-your-shell-configuration-and-ohmyzsh-shell-example.png&quot; alt=&quot;Example screenshot of my shell&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;OHMyZSH Plugins&lt;/h2&gt;
&lt;p&gt;OHMyZSH has a large amount of plugins that you can use to add functionality to your shell. You can checkout the full list of &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins&quot;&gt;OHMyZSH plugins here&lt;/a&gt;. Here is a list of the plugins I have installed git, osx, bower, brew, Composer, last-working-dir, npm, atom, sublime, gem, git-extras, git-flow, sudo, laravel5, and vagrant. They mainly revolve around the different tools, package managers and editors that I use. One of my favorites in the list is last-working-dir which basically just opens your terminal to your last working directory when opening a new tab or window.&lt;/p&gt;
&lt;p&gt;Adding plugins is fairly easy you just need to add the name of the plugin to the OHMyZSH plugins list in your .zshrc. When OHMyZSH is installed it will add a bit of configuration to your .zshrc. You just need to find the &lt;code&gt;plugins=()&lt;/code&gt; section and edit the list. The following example will add git, brew and Composer.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git brew Composer)&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;OHMyZSH Themes&lt;/h2&gt;
&lt;p&gt;OHMyZSH comes preinstalled with many themes you can see the &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/themes&quot;&gt;full list here&lt;/a&gt;. You can even create your own themes if you like. It is pretty simple but it does take some shell scripting to complete.  I would suggest finding a them you like and possibly customizing it to your needs.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 03 Jul 2016 11:36:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/07/03/setting-up-your-shell-configuration-and-ohmyzsh</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/07/03/setting-up-your-shell-configuration-and-ohmyzsh</guid>
											</item>
					<item>
				<title>Setting up Mailhog on MAMP</title>
				<description>
					<![CDATA[
					&lt;p&gt;&lt;a href=&quot;https://github.com/mailhog/MailHog&quot;&gt;Mailhog&lt;/a&gt; is a tool that allows all of your outgoing mail to be intercepted. This is great for your development environment since you may need to test things incrementally. You really do not want your clients or users receiving your test emails.&lt;/p&gt;
&lt;p&gt;I know a lot of the cool kids are setting up Mailhog along with other develop items to &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; which I use sometimes as well. However we still use &lt;a href=&quot;https://www.mamp.info/&quot;&gt;MAMP&lt;/a&gt; at work building mainly WordPress sites and I could not find a write up on how to get Mailhog setup on MAMP.&lt;/p&gt;
&lt;p&gt;This setup could be adapted to almost any environment since Mailhog is written in &lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt; and is available on multiple platforms. I may end up needing to figure out how to set it up on &lt;a href=&quot;https://laravel.com/docs/valet&quot;&gt;Laravel Valet&lt;/a&gt;. I am trying it out on a small scale and may switch full time to it eventually.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;So lets get started setting up Mailhog on MAMP. You can install Mailhog through &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install mailhog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To start Mailhog when OSX boots up you can use &lt;a href=&quot;https://github.com/Homebrew/homebrew-services&quot;&gt;Homebrew Services&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew services start mailhog&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should now be able to access Mailhog on &lt;a href=&quot;http://127.0.0.1:8025/&quot;&gt;http://127.0.0.1:8025/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you will need to edit the sendmail_path configure in your PHP.ini. Which you should be able to find at &lt;code&gt;/Applications/MAMP/bin/php/{PHP_VERSION}/conf/php.ini&lt;/code&gt; where {PHP_VERSION} is what every PHP version MAMP is using.&lt;/p&gt;
&lt;p&gt;You will need to set the sendmail_path to &lt;code&gt;sendmail_path = /usr/local/Cellar/mailhog/{VERSION}/bin/MailHog sendmail test@test&lt;/code&gt;. {VERSION} can be found by &lt;code&gt;$ls /usr/local/Cellar/mailhog/&lt;/code&gt; then the folder in there will be the {VERSION} value. As of this writing 0.2.0 was the latests version.&lt;/p&gt;
&lt;p&gt;Restart MAMP to make sure our changes take effect and fire off a test email. Now if you visit &lt;a href=&quot;http://127.0.0.1:8025/&quot;&gt;http://127.0.0.1:8025/&lt;/a&gt; you should see your test email. That is all there is, pretty simple right.&lt;/p&gt;
&lt;p&gt;For servers such as managed WordPress hosting like &lt;a href=&quot;https://wpengine.com/&quot;&gt;WP Engine&lt;/a&gt; where you can not install Mailhog take a look at &lt;a href=&quot;https://mailtrap.io/&quot;&gt;Mailtrap&lt;/a&gt;. It does everything Mailhog can do and more. Once you sign up for a Mailtrap account they give you simple example code to add to your project for many different languages and frameworks.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/06/26/setting-up-mailhog-on-mamp</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/06/26/setting-up-mailhog-on-mamp</guid>
											</item>
					<item>
				<title>Launchcode Mentorship</title>
				<description>
					<![CDATA[
					&lt;p&gt;I was mentoring this month for Launchcode. it has been a pretty good experience so far it would have been a nice option when I was learning. Many people in the industry do not have a formal education background which is ok. I do not have a CS degree if I was younger when I decided to do this I would&#039;ve. I did do a degree that was more based on web which I feel was helpful.&lt;/p&gt;
&lt;p&gt;I think things like Launchcode and boot camp type programs can be a good idea. I honestly do not think that programming in general is hard. The actual process of writing the code is general easy.&lt;/p&gt;
&lt;p&gt;However, one of the hardest parts is having the drive to learn new things. I think you would get more of a real world view in a situation like Launchcode where it is semi-structured. This forces you to learn how to find solutions to problems. This is a large part of what my day is which I do not feel you would get from a traditional university. You have to figure out solutions in days/hours instead of a more week/month approach.&lt;/p&gt;
&lt;p&gt;This is why I feel my degree helped me it was a bachelors degree in 2 years. It forced me to learn quickly to be able to come up. For the final project you could tell the difference in who enjoyed what they where doing. There where features that went above and beyond what you learned.&lt;/p&gt;
&lt;p&gt;This will also weed out people who are not excited to develop. I can tell you from experience after days of trying to fix a problem or build a feature your not with it does chip away at your resolve.&lt;/p&gt;
&lt;p&gt;Let&#039;s face it fixing bugs and boring features are not fun. However I do it for the feeling I get when I fix something difficult or build something cool. it usually makes it all worth while. If you do not have the resolve to work through the hard parts development is not a good fit.&lt;/p&gt;
&lt;p&gt;In these type of programs they are going to do anything they can to help you succeed. However, that is not enough if you do not put the work in. I feel this is a good thing since you will have to do more than just show up for work.&lt;/p&gt;
&lt;p&gt;I have seen multiple developers fail because of not understanding what it takes to succeed. You have to be passionate and you have to be willing to learn.  If you don&#039;t understand a technology that&#039;s ok find someone to help explain it to you, watch some videos, build something over and over until it clicks. Especially when you are just getting started expect to spend a decent amount of time outside of work just figuring out things.&lt;/p&gt;
&lt;p&gt;I think it&#039;s cool that I have the chance to help someone have a chance to make a change for the better. I enjoy teaching and it&#039;s nice to not have to do it while shipping. On the job training is tough especially for a smaller shop.&lt;/p&gt;
&lt;p&gt;Even with the experience I do have I still feel the pain of the first time. Sure each language or new technology I learn makes the next one easier. It still can be overwhelming at first but you just have to ship to learn. I love Shoptalk Show&#039;s answer to becoming a better developer &amp;quot;Just build websites&amp;quot;.&lt;/p&gt;
&lt;p&gt;It&#039;s nice when you get the structure from a program to point you in the right direction of what to build. It is also nice to have someone with more experience to help guide you. I&#039;ve never really had any one to help guid me. The majority of what I know is from me putting the work in. I&#039;ve broken a lot of things and spent hours on a missing semicolon. I like having the opportunity to pass some of the lessons onto someone else.&lt;/p&gt;
&lt;p&gt;This is Launchcode&#039;s inaugural Mentorship program at least in this format. I think it&#039;s going pretty good for being the first go at it. It makes me want to look into more ways to mentor and help new developers.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 25 Jun 2016 09:36:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/06/25/launchcode-mentorship</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/06/25/launchcode-mentorship</guid>
											</item>
					<item>
				<title>Looking Into Statamic Flat File CMS</title>
				<description>
					<![CDATA[
					&lt;p&gt;I still have not built anything with &lt;a href=&quot;https://statamic.com/&quot;&gt;Statamic&lt;/a&gt; but it seems really promising. Even at $200 a license I believe it would be worth it. Well at least if you are working on a site for a business. I would like to use it for my personal site with the static file caching mode so it would be much like the static site I have now with Jekyll. In that case $200 may be a little too much since as a developer I am fine compiling my blog and deploying it.&lt;/p&gt;
&lt;p&gt;Recently at work we have been doing some work with Laravel and Vue.js. We do primarily WordPress websites which tend to break down when iterating since they are notoriously hard to programmatically test. Also as great as the plugin system is it cannot compare to using composer with smaller packages. One of the biggest upsides is the ease of use on the back end. I would say the administrator area and the community have been the two biggest factors that has kept me coming back.&lt;/p&gt;
&lt;p&gt;However, building more complex UIs it starts to break down. The built in templating system has not changed in a long time. I prefer the separation of data logic from view logic that a framework usually provides. The Rest API would help somewhat with this once fully implemented. However, routes would make things better.&lt;/p&gt;
&lt;p&gt;Also the database scheme by nature of how it has to be is fairly generic and has a large amount of large MySQL text fields with small amounts of data when using large amounts of custom meta. This seems to slow sites down as they scale in the amount of data. I would prefer to have a database schema that more represents the data model of the project. Also interacting with Eloquent feels more natural to me than WP_Query/WP DB.&lt;/p&gt;
&lt;p&gt;So I digress I had heard about &lt;a href=&quot;https://statamic.com/&quot;&gt;Statamic&lt;/a&gt; on the &lt;a href=&quot;http://spec.fm/podcasts/does-not-compute&quot;&gt;Does Not Compute&lt;/a&gt; podcast but for some reason I dismissed as being a tool like Jekyll that is just a static site generator. I think static site generators are awesome but it&#039;s hard enough to get someone to type in a text box let alone use the command line.&lt;/p&gt;
&lt;p&gt;However it almost seems like the sweet site between framework, static site generators and a dynamic CMS. By default you have no database since everything is a file by default.&lt;/p&gt;
&lt;p&gt;This has an interesting up side/downside. The whole site can be version controlled if you like. The tough one on that is how to you handle user generated content. Since you can both edit all the data both in the admin and in a text editor where do you draw the line. I prefer to edit as much as I can from an editor but if someone changes an option on the production site this whole utopia collapses.&lt;/p&gt;
&lt;p&gt;It also to a point will be faster since you do not have a database. However at that point maybe it is not the right tool for the job or you can have a hybrid since you do have access to Laravel.&lt;/p&gt;
&lt;p&gt;That brings me to my next pro part is you have access to Laravel. This is a little bit weird at first how you interact with it. However everything is there if you need it.&lt;/p&gt;
&lt;p&gt;I also really like the administrator area. It almost seems like it is WordPress if they dropped backwards compatibility. They have content types which seem a lot more flexible than post types. You can actually build whole admin pages out of the 30 some odd field types and it feels much more built in than a post meta box.&lt;/p&gt;
&lt;p&gt;The whole administrator is built in Vue.js components so it is easy to extend. It just overall feels less cluttered it may just be that it is no where near as mature as WordPress I don&#039;t know.&lt;/p&gt;
&lt;p&gt;You also have an indexed search built in. Instead of having to do a full MySQL text search when searching for something.&lt;/p&gt;
&lt;p&gt;It also has routes built in sometimes you do not want to make a page just to have a URL. I know WordPress has the rewrite API but it&#039;s way more complex and restrictive to do basically the same thing.&lt;/p&gt;
&lt;p&gt;Oh did I mention they have a form builder built in. You can also add fields in a YAML which would come in handy with a larger form with the same types of fields. It&#039;s so much easier adding repetitive things in a text editor. Instead of having to drag/drop and click through a bunch of text fields.&lt;/p&gt;
&lt;p&gt;It&#039;s almost as if they took a list of my personal pain points and built a CMS around it. I was reading through the docs and list of features thinking all this stuff is supposed to be difficult. Apparently it is not supposed to be this way who would&#039;ve thought that. I am sure I will find pain points other than what to version control.&lt;/p&gt;
&lt;p&gt;I would actually want to use it for everything instead of WordPress if I could. I at least want to use it when the project is more of an application that also requires CMS functionality. I know a few years ago WordPress was trying to be come an application platform which you do not hear anymore. It is really hard to build newer applications with a 12 year old code base that is totally against breaking changes.&lt;/p&gt;
&lt;p&gt;I still think WordPress deserves a place in my toolbox but it may have reached its limit or maybe just lost some of its shininess. However it is better to pick the tool that is the best for the job not the one you are most comfortable with.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 14 Jun 2016 10:47:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/06/14/looking-into-statamic-flat-file-cms</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/06/14/looking-into-statamic-flat-file-cms</guid>
											</item>
					<item>
				<title>St Louis WordCamp 2016</title>
				<description>
					<![CDATA[
					&lt;p&gt;WordCamp St. Louis was held this year again at Washington University St. Louis on May 14-15 2016. Over all it was a good time I always enjoy going to WordCamps. I figured I would post my notes here &lt;a href=&quot;http://danholloran.me/2015/03/15/st-louis-wordcamp-2015/&quot;&gt;like I did last year&lt;/a&gt; just cause. I have added the slides that where available as of this posting you can checkout the full listing &lt;a href=&quot;https://2016.stlouis.wordcamp.org/2016/05/16/speaker-slides-round-up/&quot;&gt;here&lt;/a&gt;. Some of the later notes on Saturday kind of trailed off because I decided to fix my blog after a few issues with Github Pages and Jekyll 3. One of the downfalls to Jekyll being so easy to write with being Markdown at its core and all makes it sometimes difficult to upgrade.&lt;/p&gt;
&lt;h2&gt;Saturday May 14, 2016&lt;/h2&gt;
&lt;h3&gt;Plugin development 101&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://whoischris.com/slides/plugin-dev-101.pdf&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ChrisWiegman/Primary-Vagrant&quot;&gt;Primary Vagrant&lt;/a&gt; - Apache VVV&lt;/li&gt;
&lt;li&gt;Brand plugin it&#039;s important&lt;/li&gt;
&lt;li&gt;Escape all data&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.thewpcrowd.com/&quot;&gt;WP Crowd Podcast &amp;amp; Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Network activation does not fire the uninstall hooks???&lt;/li&gt;
&lt;li&gt;Check out &lt;a href=&quot;http://ship.getherbert.com/&quot;&gt;Ship&lt;/a&gt; trigger Git to SVN&lt;/li&gt;
&lt;li&gt;Check out &lt;a href=&quot;https://wppusher.com/&quot;&gt;WP Pusher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.appnotch.com/&quot;&gt;AppNotch&lt;/a&gt; - Make an application from a WordPress page&lt;/li&gt;
&lt;li&gt;Check out Advanced WordPress Facebook group&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Optimizing Your Themes for Responsive Images in WordPress&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use cases &lt;a href=&quot;http://responsive.images.org&quot;&gt;responsive.images.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;srcset &amp;amp; &amp;lt;picture&amp;gt;&lt;/li&gt;
&lt;li&gt;srcset X descriptors - 1x, 2x, 3x, etc. pixel density&lt;/li&gt;
&lt;li&gt;srcset W descriptors - width defaults to full width of viewport&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scottjehl.github.io/picturefill/&quot;&gt;Picturefill polyfill&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.cloudfour.com/responsive-images-101-definitions/&quot;&gt;Responsive Images 101&lt;/a&gt; (Cloud Four Blog)&lt;/li&gt;
&lt;li&gt;Only works on same aspect ratio sizes (soft crops)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wp_calculate_image_sizes&lt;/code&gt; filter size attributes (&lt;a href=&quot;https://developer.wordpress.org/reference/functions/wp_calculate_image_sizes/&quot;&gt;docs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;2016 theme checkout as an example&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2015/12/responsive-images-in-wordpress-core/&quot;&gt;Smashing Magazine - Responsive Images in WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;React.js Powered Themes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kipraske/kraske-react-2016&quot;&gt;https://github.com/kipraske/kraske-react-2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;React Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.wordpress.com/calypso/&quot;&gt;WP Calypso&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Virtual DOM &amp;amp; 1 way data flow&lt;/li&gt;
&lt;li&gt;Props components shouldn&#039;t notify&lt;/li&gt;
&lt;li&gt;State components can modify&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://isomorphic.net/&quot;&gt;Isomorphic JS&lt;/a&gt; to render on the server&lt;/li&gt;
&lt;li&gt;Routing &lt;a href=&quot;https://www.npmjs.com/package/page&quot;&gt;Page on NPM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Automattic/Picard&quot;&gt;Automattic Picard&lt;/a&gt;
&lt;h3&gt;The Future of WordPress: Five Years Out&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;Your expectations are too high for 1 year and too low for 5 years&lt;/li&gt;
&lt;li&gt;You need a life and hobbies it helps you find problems to solve&lt;/li&gt;
&lt;li&gt;WordPress managed and owned by community&lt;/li&gt;
&lt;li&gt;Everyone can contribute&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;WordPress Query Optimization and Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;update_post_meta =&amp;gt; false&lt;/code&gt; Primes the post meta cache&lt;/li&gt;
&lt;li&gt;Only disable &lt;code&gt;update_post_meta&lt;/code&gt; when you are sure that no post meta will be used&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wp_cache_set&lt;/code&gt; (&lt;a href=&quot;https://codex.wordpress.org/Function_Reference/wp_cache_set&quot;&gt;docs&lt;/a&gt;) and &lt;code&gt;wp_cache_get&lt;/code&gt;(&lt;a href=&quot;https://codex.wordpress.org/Function_Reference/wp_cache_get&quot;&gt;docs&lt;/a&gt;) caching for a single request cycle&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codex.wordpress.org/Transients_API&quot;&gt;Transients&lt;/a&gt; can be used for persistent caching&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Code Review: Keeping Things Secure, Clean, and Performant&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/ryanmarkel/ryan-markel-wordcamp-stl-2016-code-review&quot;&gt;Slides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Why? Helps your code be safe, scalable, readable, and learning&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/stevegrunwell/wp-enforcer&quot;&gt;WP Enforcer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vip.wordpress.com/documentation/vip/quickstart/&quot;&gt;VIP Quickstart&lt;/a&gt; - Vagrant&lt;/li&gt;
&lt;li&gt;Use pull requests for code review&lt;/li&gt;
&lt;li&gt;Diff reviews can work too&lt;/li&gt;
&lt;li&gt;Make part of your culture&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NEVER&lt;/strong&gt; skip code review&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Struck By Lightning&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;G.R.I.P.I. (Goals.Roles.Information.Process.Interpersonal)&lt;/li&gt;
&lt;li&gt;Favorite Tools:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rescuetime.com/&quot;&gt;Rescue Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CLI grep history&lt;/li&gt;
&lt;li&gt;dotfiles&lt;/li&gt;
&lt;li&gt;Grunt&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/defunkt/dotjs&quot;&gt;DotJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt;/&lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://puppet.com/&quot;&gt;Puppet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wordpress.org/&quot;&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sunday May 15, 2016&lt;/h2&gt;
&lt;h3&gt;Hardening WordPress, Again&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;WordPress 4 major releases since March 2015 (St. Louis WordCamp 2015)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://panamapapers.icij.org/&quot;&gt;Panama Papers&lt;/a&gt; - &lt;a href=&quot;https://revolution.themepunch.com/&quot;&gt;Revolution Slider&lt;/a&gt; vulnerability&lt;/li&gt;
&lt;li&gt;ImageMagick vulnerability&lt;/li&gt;
&lt;li&gt;Update your sites&lt;/li&gt;
&lt;li&gt;BruteProtect -&amp;gt; Jetpack Protect&lt;/li&gt;
&lt;li&gt;98% vulnerabilities in WordPress security updates due to 3rd party code&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wordpress.org/about/security/&quot;&gt;Automattic Security White Paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Include maintenance on fixed bids&lt;/li&gt;
&lt;li&gt;To help prevent attacks you tradeoff convenience for security&lt;/li&gt;
&lt;li&gt;Security is not just on WordPress&lt;/li&gt;
&lt;li&gt;DNS Proxies&lt;/li&gt;
&lt;li&gt;Network Firewall&lt;/li&gt;
&lt;li&gt;Server Firewall&lt;/li&gt;
&lt;li&gt;Web App Firewall&lt;/li&gt;
&lt;li&gt;Plugin firewall&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/OSI_model&quot;&gt;OSI model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Machine BFD (CPHulk)&lt;/li&gt;
&lt;li&gt;Update permissions so only uploads are writeable unless you are upgrading WordPress&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Automating WordPress Plugin Development with Gulp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/mikehale1/automating-wordpress-plugin-development-with-gulp&quot;&gt;Slides&lt;/a&gt;
&lt;a href=&quot;https://github.com/WebDevStudios/generator-plugin-wp&quot;&gt;WebDevStudios - Generator Plugin WP&lt;/a&gt;
Plugin header placeholder tokens (Like handlebars &lt;code&gt;{value}&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Podcast Panel&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Building &lt;a href=&quot;https://developers.google.com/speed/pagespeed/module/&quot;&gt;Google PageSpeed&lt;/a&gt; module for NGINX sucks...&lt;/li&gt;
&lt;li&gt;It was a good panel but see previous note.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why WordPress Works this Way&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;G.R.I.P.I. (Goals.Roles.Information.Process.Interpersonal)&lt;/li&gt;
&lt;li&gt;Unified project philosophy&lt;/li&gt;
&lt;li&gt;Philosophy driven development&lt;/li&gt;
&lt;li&gt;Democratize publishing&lt;/li&gt;
&lt;li&gt;WordPress should work out of the box&lt;/li&gt;
&lt;li&gt;As little configuration as possible&lt;/li&gt;
&lt;li&gt;Design for the majority of users&lt;/li&gt;
&lt;li&gt;Solid array of basic features&lt;/li&gt;
&lt;li&gt;Users shouldn&#039;t have to know/care what version of PHP they are on. (I agree but they should be aware that it needs to be upgraded from time to time. Just like a cars oil you wouldn&#039;t go 10 years without changing your oil...)&lt;/li&gt;
&lt;li&gt;Decisions not options&lt;/li&gt;
&lt;li&gt;Options are expensive&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Havoc_Pennington&quot;&gt;Havoc Pennington&lt;/a&gt; - Author/Writer&lt;/li&gt;
&lt;li&gt;Options hard on QA and UI&lt;/li&gt;
&lt;li&gt;Striving for simplicity&lt;/li&gt;
&lt;li&gt;Accessibility&lt;/li&gt;
&lt;li&gt;Deadlines are not arbitrary&lt;/li&gt;
&lt;li&gt;Document flows&lt;/li&gt;
&lt;li&gt;Don&#039;t just study the code. Philosophy is important as well&lt;/li&gt;
&lt;li&gt;Philosophy drives development&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Casual AMA/Hangout/Networking/Closing Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I still do not understand why &lt;a href=&quot;http://my.studiopress.com/themes/genesis/&quot;&gt;Genesis Framework&lt;/a&gt; is helpful. If the biggest value is to add hooks to templates you could have edited on your own just does not make any sense. I guess if you view it from an implementor instead of a developers mind set it would make more sense.&lt;/li&gt;
&lt;/ul&gt;
					]]>
				</description>
				<pubDate>Mon, 16 May 2016 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/05/16/st-louis-wordcamp-2016</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/05/16/st-louis-wordcamp-2016</guid>
											</item>
					<item>
				<title>Laravel and WebSockets</title>
				<description>
					<![CDATA[
					&lt;p&gt;Working with WebSockets and Larvel is extremely easy! If you are new to Laravel it has an event system that you can use to dispatch events for other parts of your PHP code to use. As well as Laravel supports Redis and &lt;a href=&quot;https://pusher.com/&quot;&gt;Pusher&lt;/a&gt; for dispatching events via WebSockets. Pusher is a fully hosted service that will handle the Node.js side of things for you. I hover will cover using Laravel events with Redis to broadcast events to &lt;a href=&quot;http://socket.io/&quot;&gt;Socket.io&lt;/a&gt; and using &lt;a href=&quot;http://supervisord.org/&quot;&gt;Supervisor&lt;/a&gt; to keep all the processes needed running by default. The current version of Laravel as of this writing is 5.2 which you should already have installed and I will be assuming you are using Laravel Homstead.&lt;/p&gt;
&lt;h2&gt;Dependencies and Configuration&lt;/h2&gt;
&lt;p&gt;So lets get started with installing the required dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ composer require predis/predis
$ npm install express ioredis socket.io --save&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will then need to update our &lt;code&gt;.env&lt;/code&gt; with &lt;code&gt;BROADCAST_DRIVER=redis&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Event Class&lt;/h2&gt;
&lt;p&gt;Now we will need to create a new event.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ php artisan make:event EventName&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go ahead open the new event &lt;code&gt;app/Events/EventName.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You need to make sure that your event &lt;code&gt;implements ShouldBroadcast&lt;/code&gt; by default it does not.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// ...
class EventName extends Event implements ShouldBroadcast
// ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For this example we will use a &lt;code&gt;$data&lt;/code&gt; property to pass information to socket.io however by default you will have access to any public property.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// ...
public $data;
// ...
public function __construct($some_data)
{
    $this-&amp;gt;data = compact(&#039;some_data&#039;);
}
// ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you will need to set the channel you are going to broadcast the events on. We will use this later with Socket.io to listen for the events.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// ...
public function broadcastOn()
{
    return [&#039;event-example&#039;];
}
// ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Our whole event class should now look like this.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace App\Events;

use App\Events\Event;
use Illuminate\Queue\SerializesModels;
use Illuminate\Contracts\Broadcasting\ShouldBroadcast;

class EventName extends Event implements ShouldBroadcast
{
    use SerializesModels;

    public $data;

    /**
     * Create a new event instance.
     *
     * @return void
     */
    public function __construct($some_data)
    {
        $this-&amp;gt;data = compact(&#039;some_data&#039;);
    }

    /**
     * Get the channels the event should be broadcast on.
     *
     * @return array
     */
    public function broadcastOn()
    {
        return [&#039;event-example&#039;];
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Socket.io&lt;/h2&gt;
&lt;p&gt;Now we will need to make a &lt;code&gt;socket.js&lt;/code&gt; file in the root of our Laravel installation and place the following into it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var app = require(&#039;express&#039;)();
var http = require(&#039;http&#039;).Server(app);
var io = require(&#039;socket.io&#039;)(http);
var Redis = require(&#039;ioredis&#039;);
var redis = new Redis();
redis.subscribe(&#039;event-example&#039;, function(err, count) {
});
redis.on(&#039;message&#039;, function(channel, message) {
    console.log(&#039;Message Recieved: &#039; + message);
    message = JSON.parse(message);
    io.emit(channel + &#039;:&#039; + message.event, message.data);
});
http.listen(3000, function(){
    console.log(&#039;Listening on Port 3000&#039;);
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to update the channel you will need to change &lt;code&gt;event-example&lt;/code&gt; in &lt;code&gt;redis.subscribe(&#039;event-example&#039;, function(err, count) { });&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now we are ready to run the &lt;code&gt;socket.js&lt;/code&gt; file and Redis in &lt;strong&gt;separate tabs on your server&lt;/strong&gt; run the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ node socket.js
# You should see Listening on Port 3000
$ redis-server --port 3001
# You should see a whole bunch of output&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Event listener&lt;/h2&gt;
&lt;p&gt;Now for simplicity you can add the following to your main view template. This basically listens for an event on the &lt;code&gt;event-example&lt;/code&gt; we have setup that as fired by the &lt;code&gt;EventName&lt;/code&gt; class. You will want to move this into is own separate JS file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script src=&quot;https://cdn.socket.io/socket.io-1.4.5.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
var socketURL = &#039;http://192.168.10.10:3000&#039;; // 192.168.10.10 can be replaced with the IP address of your server.

// If you are using Elixir/Browserify use commented out socket instead.
var socket = io(socketURL);
// var socket = require(&#039;socket.io-client&#039;)(socketURL);

// The event name is created by the event channel (example-event) we set earlier
// and the class name with the full namespace (App\Events\EventName).
socket.on(&#039;event-example:App\\Events\\EventName&#039;, function (event) {
    alert(event.data.some_data);
});
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Event testing&lt;/h2&gt;
&lt;p&gt;For simplicity sake when testing we can just add a route to fire the event. In reality this will happen elsewhere possibly in a controller. The main thing to take away is &lt;code&gt;Event::fire(new EventName(&#039;Some data about the event.&#039;));&lt;/code&gt; will be how you can fire the event.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::group([&#039;middleware&#039; =&amp;gt; &#039;web&#039;], function () {
    Route::get(&#039;/fire&#039;, function () {
        Event::fire(new EventName(&#039;Event data&#039;));

        return &#039;Event Fired&#039;;
    });
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now if you open your site in one tab and go to &lt;code&gt;/fire&lt;/code&gt; in the other. Then in the first tab you should see an alert with the text &lt;code&gt;Event data&lt;/code&gt;. Now you have a fully functional setup with Laravel and WebSockets!&lt;/p&gt;
&lt;h2&gt;Supervisor&lt;/h2&gt;
&lt;p&gt;So obviously we do not want to manually run &lt;code&gt;node socket.js&lt;/code&gt; and &lt;code&gt;redis-server --port 3001&lt;/code&gt; when we start our server. As well as make sure both commands are never closed out. So this is where &lt;a href=&quot;http://supervisord.org/&quot;&gt;Supervisor&lt;/a&gt; comes into play. It will handle starting both services and making sure they stay up continuously.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The following instructions will happen on your server.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you do not already have Supervisor installed you can install it via &lt;code&gt;sudo apt-get install supervisor&lt;/code&gt;. Then you will need to restart Supervisor via &lt;code&gt;sudo service supervisor restart&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we need to set the configuration file for &lt;code&gt;socket.js&lt;/code&gt;   via &lt;code&gt;sudo nano /etc/supervisor/conf.d/socket.conf&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# socket.conf content
[program:socket]
command=node /path/to/install/socket.js # IMPOTANT: Update /path/to/install
autostart=true
autorestart=true
stderr_logfile=/var/log/socket.err.log
stdout_logfile=/var/log/socket.out.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we will need to setup the configuration for Redis &lt;code&gt;sudo nano /etc/supervisor/conf.d/redis.conf&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# redis.conf content
[program:redis]
command=redis-server --port 3001
autostart=true
autorestart=true
stderr_logfile=/var/log/redis.err.log
stdout_logfile=/var/log/redis.out.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we need to tell Supervisor about our new configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo supervisorctl reread
$ sudo supervisorctl update&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can verify everything went ok by the following&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ tail /var/log/socket.out.log
# You should see Listening on Port 3000
$ tail /var/log/redis.out.log
# You should see a whole bunch of output&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If something does not seem to work correctly you can check the error logs via the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ tail /var/log/socket.err.log
$ tail /var/log/redis.err.log&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So thats all there basically is now go out and build something awesome!&lt;/p&gt;
					]]>
				</description>
				<pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/03/25/laravel-and-websockets</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/03/25/laravel-and-websockets</guid>
											</item>
					<item>
				<title>Laravel Forge, Digital Ocean and WebSockets</title>
				<description>
					<![CDATA[
					&lt;p&gt;I recently posted an overview of how to setup Web Sockets using &lt;a href=&quot;/2016/01/30/laravel-and-websockets/&quot;&gt;Laravel and Socket.io&lt;/a&gt;. I wanted to follow it up with a quick post on how to get the Web Sockets functioning correctly on a &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt; server using &lt;a href=&quot;https://forge.laravel.com/&quot;&gt;Laravel Forge&lt;/a&gt;. I a going to assume that you have already gone through the setup process to provision a new server. Also that you have read the first post since the largest amount of work will lie there. I believe these steps should be identically for all hosting providers not Just Digital Ocean but do not quote me on that.&lt;/p&gt;
&lt;p&gt;First of all we need to setup some daemons for Redis and Socket.io which forge makes extremely simple. This will allow Redis and Socket.io to run continuously without you having to worry about it, First you need to navigate to Servers &amp;gt; Your Server and then the &amp;quot;Daemons&amp;quot; tab. You will need to add &lt;code&gt;redis-server --port 3001&lt;/code&gt; in the &amp;quot;Command&amp;quot; text field and click the &amp;quot;Start Daemon&amp;quot; button this will enable Redis. You will also need to add &lt;code&gt;node /home/forge/mysite.com/socket.js&lt;/code&gt;, make sure to update &lt;code&gt;mysite.com&lt;/code&gt; with the domain of you site, in the &amp;quot;Command&amp;quot; text field and click the &amp;quot;Start Daemon&amp;quot; button this will enable Socket.io.&lt;/p&gt;
&lt;p&gt;You can check on your daemons at any time by clicking on the eye icon in the &amp;quot;Status&amp;quot; column. You will want to make sure that both Redis and Socket.io are running. If you have any issues it is best to SSH onto your server and try running the commands manually to see make sure they are successful. HJst make sure to delete the daemon before you SSH onto your server.&lt;/p&gt;
&lt;p&gt;Next we will want to move onto the &amp;quot;Network&amp;quot; tab were we can open port 3000 in the servers firewall so we can access Socket.io. You can set the &amp;quot;Name&amp;quot; to SocketIO, the &amp;quot;Port&amp;quot; to 3000 and I suggest adding the IP Address of your server but thats up to you. Then you just click the &amp;quot;Add Rule&amp;quot; button and you should be good to go. You can test the connection by navigating to &lt;a href=&quot;http://mysite.com:3000&quot;&gt;http://mysite.com:3000&lt;/a&gt; you should see the message &amp;quot;Cannot GET /&amp;quot;. If you see that everything should be working just fine.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 05 Mar 2016 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/03/05/laravel-forge-digital-ocean-and-websockets</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/03/05/laravel-forge-digital-ocean-and-websockets</guid>
											</item>
					<item>
				<title>Why Does ExpressionEngine Save Templates in the Database?</title>
				<description>
					<![CDATA[
					&lt;p&gt;This is a little bit of a rant and a large amount of it may be a result of my inexperience. This is in no way saying ExpressionEngine is bad and something like WordPress is better. I feel it is more a surprise from using CodeIgniter before and CodeIgniter is used to build ExpressionEngine. Maybe things have changed in the way CodeIgniter handles MVC. Also maybe this is just a situation of a large user base needing access to more tools in your views.&lt;/p&gt;
&lt;p&gt;I have been maintaining a few ExpressionEngine sites lately and one thing that seemed curious to me is saving templates in the database. I am not saying this is the wrong way to do things but just seems strange. I would want to make as few database calls as possible.&lt;/p&gt;
&lt;p&gt;One reason I see is possibly the templates are not supposed to have any real logic in them. So its much like post content in WordPress which I think is fine. It rides that line between maintainer flexibility and page load speed among other things. In most templating engines I have seen they function much like this. You get access to some programming helpers without any real logic going on.&lt;/p&gt;
&lt;p&gt;This still makes it kind of curious that there is an option to save as a file as well. I am not sure which takes precedence but I would hope the file does. I would think you could just read in the file not sure if there is an issue with that? I would assume it already does this so why would you also save it to the database.&lt;/p&gt;
&lt;p&gt;Maybe save the diffs still when you edit so you can roll back the changes that could be helpful. However what happens when you use version control since you really should be. This will solve that exact use case in a little better way. Would you ignore your template files that just seems a little weird.&lt;/p&gt;
&lt;p&gt;I would agree that this may have some benefits not sure what they are though. One thing I do not agree with is the ability to execute queries from the templates. Sure in WordPress you can execute queries from a template but thats more because WordPress templating is frustratingly procedural but thats a story for another day.&lt;/p&gt;
&lt;p&gt;However I just feel that executing multiple queries mixed in with view code is weird. I personally would not feel comfortable allowing a user access to database queries. Editing HTML is one thing may make the page look a little funny but it can be fixed. You mess something up such as a query you may white screen the page or open yourself up to some sort of security issue.&lt;/p&gt;
&lt;p&gt;Maybe I am missing something or am just seeing bad development practices being used. There may actually be good reasons why ExpressionEngine saves views with database queries in the database.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/01/16/why-does-expressionengine-save-templates-in-the-database</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/01/16/why-does-expressionengine-save-templates-in-the-database</guid>
											</item>
					<item>
				<title>Quickly Install Applications on Your Mac With Homebrew and Cask</title>
				<description>
					<![CDATA[
					&lt;p&gt;I have been having some issues with my work Macbook and I needed to reinstall Mac OS X. I like to do a complete restore every so often any way since I like to hack and play with things so there is quite a bit of junk that accumulates. I figured this time I would document some of the helpful things you can do with a few tools and a little scripting.&lt;/p&gt;
&lt;p&gt;I figured I would cover &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; and &lt;a href=&quot;http://caskroom.io/&quot;&gt;Cask&lt;/a&gt; to quickly install common applications first. Usually it allows me to install the majority of the applications outside of the Mac App Store. The applications in then Mac App Store can be quickly installed in my purchased applications sections.&lt;/p&gt;
&lt;p&gt;I suggest to go install at least Xcode and accept the developer agreement via the command line &lt;code&gt;$ sudo xcodebuild -license&lt;/code&gt;. You may want to manually install whatever code editor you use since we will need to edit a few files. While your at it you could go ahead and install all of your Mac App Store applications thats what I would do. Then you will need to install Homebrew you can find the instructions on their &lt;a href=&quot;http://brew.sh/&quot;&gt;site&lt;/a&gt;. Then you can install Cask via the instructions on their &lt;a href=&quot;http://caskroom.io/&quot;&gt;site&lt;/a&gt;. Now we are ready to get installing.&lt;/p&gt;
&lt;p&gt;What I suggest to do once you have everything installed is to run &lt;code&gt;$ brew cask search &amp;gt; cask-install.sh&lt;/code&gt; on your desktop or somewhere else you want to create a file. This way you can easily go through the list of possible applications and choose which ones you want. Then with a little bit of editing we can just execute the file to install all of the applications you need. You could also save this file somewhere like Dropbox or if you want to version it with git on Github.&lt;/p&gt;
&lt;p&gt;If you only have a few applications you want to install you can search for individual applications with &lt;code&gt;$brew cask search &amp;lt;application&amp;gt;&lt;/code&gt; it uses fuzzy searching so it will retrieve close matches. Then you can just install them individually with &lt;code&gt;brew cask install &amp;lt;application&amp;gt;&lt;/code&gt;. You can also copy the results you want into a &lt;code&gt;cask-install.sh&lt;/code&gt; just like above. This way you can save the applications to install and bulk install the applications.&lt;/p&gt;
&lt;p&gt;Once you have all the applications you want to install added to &lt;code&gt;cask-install.sh&lt;/code&gt; you will need to add &lt;code&gt;brew cask install&lt;/code&gt; before each application name and a semicolon &lt;code&gt;;&lt;/code&gt; after each application name. I find that using an editor such as Sublime Text with multi-selection makes this a breeze. Then you will want to execute &lt;code&gt;chmod +x cask-install.sh&lt;/code&gt; in the terminal this will allow you to execute the file. Then all you have to do is execute the installation via &lt;code&gt;./cask-install.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once the installation has completed all that is left to do is to configure each application. I tend to do this as I use them short of a handful that I use on a daily basis. Now you can store this file somewhere  and you can use it next time you need to install multiple applications.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 12 Jan 2016 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2016/01/12/quickly-install-applications-on-your-mac-with-homebrew-and-cask</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2016/01/12/quickly-install-applications-on-your-mac-with-homebrew-and-cask</guid>
											</item>
					<item>
				<title>Vue.js Component Messaging Continued</title>
				<description>
					<![CDATA[
					&lt;p&gt;So yesterday I posted about Vue.js component messaging. This is in a way a continuation so you will want to read that first &amp;quot;&lt;a href=&quot;/2015/12/07/vues-js-component-messaging/&quot;&gt;Vue.js Component Messaging&lt;/a&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;I had suggested that firing an event off of a common element wether that is the body or the main Vue.js instance really does not matter. However I kind of got to thinking more about it and that would work but there may be a problem if there are multiple instances of the same component on the same page. In the example of an Alert component if for some reason there was one Alert component in the header and one in the footer an alert message would be added to both.&lt;/p&gt;
&lt;p&gt;I did have an idea I thought may solve that issue allow for something like an event component property. Wether you pass it the full value or maybe just a suffix. It could be &lt;code&gt;event-name&lt;/code&gt; by default and if you pass it &lt;code&gt;event-name-2&lt;/code&gt; then that event would fire while passing the same data as &lt;code&gt;event-name&lt;/code&gt;. As a suffix maybe you could pass &lt;code&gt;my-custom-suffix&lt;/code&gt; and then the event that would be fired would be something like &lt;code&gt;event-name/my-custom-suffix&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;// Full event
&amp;lt;alert
    :messages.sync=&quot;messages&quot;
    :event=&quot;event-name-2&quot;
&amp;gt;&amp;lt;/alert&amp;gt;

// Event suffix
&amp;lt;alert
    :messages.sync=&quot;messages&quot;
    :event-suffix=&quot;event-name-2&quot;
&amp;gt;&amp;lt;/alert&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you could listen for the event following the example I used in the previous post using the proposed helper functions. Feel free to listen to these events however since there is nothing magical happening here.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// In component 1 (full event)
componentFireEvent(&#039;event-name-2&#039;, &#039;event-details&#039;);

// In component 2 (full event)
// this.even = &#039;event-name-2&#039;
componentSubscribe(this.event, function( eventDetails ) {
    // Do whatever you need to do now.
});

// In component 1 (event suffix)
componentFireEvent(&#039;event-name-2&#039;, &#039;event-details&#039;);

// In component 2 (event suffix)
// this.even = &#039;event-name-2&#039;
componentSubscribe(&#039;event-name/&#039; + this.event, function( eventDetails ) {
    // Do whatever you need to do now.
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you may want to be a little more descriptive when naming your properties however, this basically outlines how it could work. Then in the case of the Alert I am using I wouldn&#039;t need the property since there really shouldn&#039;t be more than one on a page. However this use case may evolve and then I could use this strategy.&lt;/p&gt;
&lt;p&gt;After all this I still cannot shake the feeling I am missing something. That there is some where that this problem has been solved. Maybe it has been solved in another Javascript framework like Vue.js. Still I think this is a pretty solid solution and short of making sure you document the possibilities for the event names. That should be easy your a developer you document everything with amazing precision right...right?&lt;/p&gt;
&lt;p&gt;I could possibly envision a situation where your component has more than a few events and this may not scale really well. However, in that situation it may be more of an issue with how the component is built. This is definitely an interesting problem I have never encountered before.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 08 Dec 2015 18:16:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/12/08/vues-js-component-messaging-continued</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/12/08/vues-js-component-messaging-continued</guid>
											</item>
					<item>
				<title>Vue.js Component Messaging</title>
				<description>
					<![CDATA[
					&lt;p&gt;The other day I was working through how to abstract an alert list into its own component. Basically it is an &lt;code&gt;ul&lt;/code&gt; where each alert is a &lt;code&gt;li&lt;/code&gt; pretty simple. So using Vue.js, &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;, and &lt;a href=&quot;https://github.com/vuejs/vueify&quot;&gt;Vueify&lt;/a&gt; this is pretty simple but the problem was how do the other components add alerts. I may be missing something however, it does not seem like Vue.js. offers any sort of component to component event system. Well, at least outside of a parent child relationship which I did not want to go that route since multiple components may need to dispatch alerts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This will be more of a high level exercise than a post you can directly copy code from. Many pieces will be missing for brevity and I will assume you have at least used Vue.js a little.&lt;/p&gt;
&lt;p&gt;So my solution currently is to send an event to the main Vue.js instance that controls all the components. This event is dispatched from the component that wants to add alert. Then I can pass the message along to the Alert component using &lt;a href=&quot;http://vuejs.org/guide/components.html#Passing_Data_with_Props&quot;&gt;component properties&lt;/a&gt;. Finally I can handle anything I need to do when the value updates using &lt;a href=&quot;http://vuejs.org/api/#computed&quot;&gt;computed properties&lt;/a&gt;. I honestly do not feel this is the correct approach but it works I will outline another idea below I may implement. I do believe that outlining the whole thought process may be helpful.&lt;/p&gt;
&lt;p&gt;So basically there is a List component that I want to be able to add alerts from without it having to know about the Alert component. So firing off an event seems like the way to do it right? The following is the important parts of the list component.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// The message details.
var message = {
    &#039;This is the message value&#039;, // Value
    &#039;success&#039;, // Status
    4000 // Timeout
};

// This will be fired at some point when something happens in the list.
// Such as an item was removed successfully.
this.$dispatch(&#039;add-alert-message&#039;, message );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;this.$dispatch&lt;/code&gt; sends an event up the parent chain you can learn more about component events &lt;a href=&quot;http://vuejs.org/guide/components.html#Custom_Events&quot;&gt;here&lt;/a&gt;. However, there does not seem to be a way to subscribe to this event from another component. The next step happens in the main Vue.js instance where you can subscribe to the event and then apply it to a messages array on the Vue.js data object. You can also do something like check for duplicates at this level as well this could also be handled in the computed properties section as well. Which kind of feels weird since the Alert component should be in charge of what consists as a duplicate alert.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// The main Vue.js Instance.
new Vue( {
    el         : &#039;#app&#039;,
    data       : { messages : [] },
    events     : {
        &#039;add-alert-message&#039; : function( message ) {
            // Check for duplicates and anything else you need to do.
            this.messages.push(message);
        }
    }
} );&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So this works and all however you now have to let the alert component know about &lt;code&gt;this.messages&lt;/code&gt; which you can do by passing messages to the alert component. The following snippet binds the Vue.js messages to the Alert component messages property. Using the &lt;code&gt;.sync&lt;/code&gt; modifier will allow the values to sync from the Vue.js instance to the Alert component.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;alert :messages.sync=&quot;messages&quot;&amp;gt;&amp;lt;/alert&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then you will need to use computed properties on the alert component since you need to know when it is updated. So far I have not found a better way to handle this. I needed to be able to set a timeout so the messages would disappear after a short time. You could handle this in the main Vue.js instance but that would kind of defeat the point of a component.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Alert component configuration.
{
    methods : {
        setAlertMessagesTimeout = function() {
            // This will go through the alerts and set a timeout so the alerts can automatically be removed.
        }
    },
    props   : [&#039;messages&#039;],
    computed : {
    alertMessages : {
        get : function() {
            this.setAlertMessagesTimeout();
            return this.messages;
        },
        set : function() {
            this.alertMessages = this.messages;
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No finally you can loop over the alerts and output them in the Alert components.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul v-for=&quot;message in alertMessages&quot;&amp;gt;
    &amp;lt;li class=&quot;alert alert-{message.status}&quot;&amp;gt;{message.value}&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So it almost seems like there should be a better way... I have considered firing an event off of the body or whatever element that is used for the Vue.js instance. This way you could easily pass messages between components. You could have 2 helper functions one that handles firing the event so you will not have to worry about it and one that subscribes to the event. This would basically bypass the main Vue.js instance having to know about what the components are doing.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// In component 1
componentFireEvent(&#039;event-name&#039;, &#039;event-details&#039;);

// In component 2
componentSubscribe(&#039;event-name&#039;, function( eventDetails ) {
    // Do whatever you need to do now.
});&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using some sort of abstraction like this would help you not have to remember what element you are firing the event on each time. I may refactor and flesh this thought out more as I learn. Maybe there is an even better way to handle it that I have not thought of. I also may have missed something in the documentation that solves this. Maybe I am trying to force a square peg into a round hole and there is a good reason why it is the way it is. I may never know...&lt;/p&gt;
					]]>
				</description>
				<pubDate>Mon, 07 Dec 2015 18:16:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/12/07/vues-js-component-messaging</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/12/07/vues-js-component-messaging</guid>
											</item>
					<item>
				<title>Why Would You Use a Fixed Header?</title>
				<description>
					<![CDATA[
					&lt;p&gt;It seems like I receive a request for a fixed header fairly regularly more than I should. I don’t really understand why you would want to fix the header of your site. So I figured I would layout some of my opinions on the matter I may be wrong but this is just my point of view. Full disclosure this sites header is sticky on Firefox purely to use the sticky CSS property since I use my site to try things out on I believe this is okay. So yes there is an exception to every rule and opinion.&lt;/p&gt;
&lt;p&gt;I understand why you would want to fix your sites header when you have a single page and you are using it to navigate on the same page. I do think this would be the only valid use case I could see. A fixed sidebar navigation would also be valid in this case on larger screens. However this does not happen often so why are there a lot of fixed headers.&lt;/p&gt;
&lt;p&gt;I see this trend more on mobile sites than on desktop which begs the question why is your logo so important that it is taking up 10% of my screen space? I say your logo when I landed on the page and if you have a back to top arrow instead I can use that to get to your navigation. The weirdest place I have seen this is on news sites. So you are telling me half way through your article I should go to another page. I have a better idea how about I go to another site.&lt;/p&gt;
&lt;p&gt;I do somewhat agree with the sites that use a fixed header when you scroll up the page. Since if you are headed up the page there is a better chance that you are trying to get to the navigation. However, this is not a license to fix the header when you scroll up and down no matter what you do it just seems to misbehave. I think sometimes we forget that the two most important parts of the site are not the designers, developers, and owners. However, they are the content and the users that make the site great. So why would we cover our content and frustrate our users just because we think something looks cool.&lt;/p&gt;
&lt;p&gt;I am not sure where this trend comes from maybe trying to make it more like a mobile application. Well in that situation build a mobile application where the navigation is primarily constrained to views in your application. Sure they can link out to the web using web views and links to the devices browser. Most of the navigation in an application is from many smaller views instead of larger form content. So in this situation, a fixed navigation makes more sense since you are spending more time navigating around the application.&lt;/p&gt;
&lt;p&gt;This is a trend that I would like to see less of in the next year I doubt I will. If not, I hope to see more reasoning behind why we would cover up part of our content and frustrate our users. Decisions at the cost of usability even a small amount are the wrong decisions to make. Just remember there is an exception to every rule.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Thu, 24 Dec 2015 00:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/12/24/why-would-you-use-a-fixed-header</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/12/24/why-would-you-use-a-fixed-header</guid>
											</item>
					<item>
				<title>Experimenting With Laravel and Vue.js</title>
				<description>
					<![CDATA[
					&lt;p&gt;So I&#039;ve been playing with &lt;a href=&quot;http://laravel.com/&quot;&gt;Laravel&lt;/a&gt; and &lt;a href=&quot;http://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; which I have really started to like. It seems every time I have to write boring repetitive code there&#039;s already something that handles it for you.&lt;/p&gt;
&lt;p&gt;It&#039;s fairly refreshing coming from the WordPresss world were a lot of this is handled via plugins. Which is great since they are easy to use but they have the draw back of loading assets on there own and saving their options to the database. Those two things we all know are the biggest bottlenecks in your sites speed. It is also nice to have testing  built in from the get go so you do not have to do any real work except to start writing test. Also with &lt;a href=&quot;http://laravel.com/docs/5.1/elixir&quot;&gt;Laravel Elixir&lt;/a&gt; it makes using Gulp a breeze. Your development environments are easily setup using &lt;a href=&quot;http://laravel.com/docs/5.1/homestead&quot;&gt;Laravel Homestead&lt;/a&gt; and &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;. The Laravel templating engine &lt;a href=&quot;http://laravel.com/docs/5.1/blade&quot;&gt;Blade&lt;/a&gt; is so easy to use and so much cleaner then having PHP all over your HTML. Also you have &lt;a href=&quot;http://laravel.com/docs/5.1/routing&quot;&gt;Routes&lt;/a&gt; which to me is a lot less painful than WordPress permalinks. There are so many things that Laravel can do.&lt;/p&gt;
&lt;p&gt;I&#039;ve really liked Vue.js reactive programming and handling all data updates via a JS object so you never have to touch the DOM. At first it is a little weird that things like event handlers are in your HTML markup but in the end it reduces the amount of JS that&#039;s has to be written. I still think jQuery has its place however, it rapidly falls apart in once you have to write a lot of it.&lt;/p&gt;
&lt;p&gt;Do not get me wrong WordPress still has its place especially in simple marketing sites built for clients to maintain. I still have not found a better administrator experience out of the box than WordPress. I just sometimes wish the WordPress community was a little more receptive to changes in work flow such as using Composer. Sometimes it almost seems like the core WordPress team almost seems more interested in some of the newer tools than the community. I guess the right tool for the right job and all these different tools definitely have their time and place.&lt;/p&gt;
&lt;p&gt;It almost seems like tools like Laravel and Vue.js have a different mind set. In that ease of development and maintenance on the development side is top priority. One of the best things that comes with this is that it is better for your users since there is a better chance that the site will be faster. Since there is not a large amount of database interactions for content and options.&lt;/p&gt;
&lt;p&gt;If you want to get started with Laravel and Vue.js I suggest checking out &lt;a href=&quot;https://laracasts.com&quot;&gt;Laracasts&lt;/a&gt;. The screencasts are amazing and will help you get up and running quickly.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 05 Dec 2015 21:49:22 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/12/05/experimenting-with-laravel-and-vue-js</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/12/05/experimenting-with-laravel-and-vue-js</guid>
											</item>
					<item>
				<title>Setting Up Your Shell</title>
				<description>
					<![CDATA[
					&lt;p&gt;So you want to setup your shell thats awesome! This will be primarily relevant to Mac OS X since if your on Linux you should already be comfortable with the shell and if your on Windows I&#039;m sorry even though Windows 10 does look pretty cool. I will go through some basic configuration of iTerm 2 and get zshell setup.&lt;/p&gt;
&lt;p&gt;First of all Mac OS X terminal is fairly barebones it works in a pinch but I like something a little more customizable. So I prefer &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm 2&lt;/a&gt; I will be using it for the duration of this post. So go ahead and download it and install it I&#039;ll be here waiting. Once iTerm downloads go ahead and install it.&lt;/p&gt;
&lt;p&gt;One of the biggest pain points I think when you get started using the CLI is landing at a blinking cursor and are not sure where to go from there. So I believe it helps to customize your terminal so it is a little more inviting. Also it will help you be more efficient when using your terminal.&lt;/p&gt;
&lt;h3&gt;iTerm 2 Customizations&lt;/h3&gt;
&lt;p&gt;iTerm 2 has the ability for a large amount of customization through the preferences. One of the main highlights is the ease of altering your color scheme. Much like your editor you can find iTerm 2 color schemes or you can make your own. You can find the color scheme editor under &lt;code&gt;Preferences &amp;gt; Profile &amp;gt; Colors&lt;/code&gt;. There you can either tweak the colors or import a color scheme from the Load Presets... drop down. You can find new color schemes on the &lt;a href=&quot;http://iterm2colorschemes.com/&quot;&gt;iTerm 2 Color Schemes&lt;/a&gt; or possibly the creator of your code editors theme also has a scheme created for iTerm 2.&lt;/p&gt;
&lt;p&gt;A few other top Preferences to check out would be &lt;code&gt;Preferences &amp;gt; Profile &amp;gt; Text&lt;/code&gt; where you can set a custom terminal font, edit the way the cursor looks and tweak how the text is rendered. Under &lt;code&gt;Preferences &amp;gt; Profile &amp;gt; Window&lt;/code&gt; you can tweak how the terminal window is displayed you can set a custom background, set the opacity of the background and more. You can enable notifications under &lt;code&gt;Preferences &amp;gt; Profile &amp;gt; Terminal&lt;/code&gt;. There are many more customizations under &lt;code&gt;Preferences&lt;/code&gt; that you can tweak to get your terminal just right.&lt;/p&gt;
&lt;h3&gt;Enable zshell&lt;/h3&gt;
&lt;p&gt;Zshell is a shell much like the default bash shell that is set by default in Mac OS X. A shell is basically the environment that you execute commands. It adds tools to allow you to accomplish your tasks. The default bash shell is good but zshell in my opinion is better bash especially when paired with &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;OHMyZSH&lt;/a&gt;. Changing your default shell to zshell is easy just paste the following into your terminal &lt;code&gt;chsh -s $(which zsh)&lt;/code&gt;. Then you will need to open a new tab in iTerm 2 with &lt;code&gt;cmd+t&lt;/code&gt; so the change will take effect. Then you can paste &lt;code&gt;echo $SHELL&lt;/code&gt; into your terminal and you should see &lt;code&gt;/bin/zsh&lt;/code&gt;. That is all you need to do.&lt;/p&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;We now have iTerm 2 setup with zshell enabled. Next we will ned to setup OHMyZSH and learn about the .zshrc configuration files.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 29 Sep 2015 20:38:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/09/29/setting-up-your-shell</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/09/29/setting-up-your-shell</guid>
											</item>
					<item>
				<title>Don&#039;t Fear The Shell</title>
				<description>
					<![CDATA[
					&lt;p&gt;So, I have noticed a rather alarming aversion to the command line (CLi) for developers. If you really think about it the CLi is not much different from a normal text editor.&lt;/p&gt;
&lt;p&gt;Sure it can be somewhat intimidating when you open an application and you see &lt;code&gt;bash-3.2$&lt;/code&gt; what do I do with this... I agree I once felt overwhelmed when faced with the CLi. This magical black box tool until I spent some time getting to know it. Once I realized it was not much different from any other programming language you just interact with it a little different.&lt;/p&gt;
&lt;p&gt;Also once I discovered   &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;Z Shell(zsh)&lt;/a&gt;, &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;, and &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;OHMyZSH&lt;/a&gt; did I feel comfortable working with applications without a GUI. Do not get me wrong I still use apps like &lt;a href=&quot;http://www.git-tower.com/&quot;&gt;Tower&lt;/a&gt; to work with &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; since I feel more powerful using Tower. However, I am still comfortable using the CLi when needed such as using &lt;a href=&quot;http://git-scm.com/docs/git-bisect&quot;&gt;Git Bisect&lt;/a&gt; which can&#039;t be accomplished via tower, at least not that I know of.&lt;/p&gt;
&lt;p&gt;You can take advantage of tools such as &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt; for front end package management, &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; for OS X package management and &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp.js&lt;/a&gt; to handle automating among other tools. You can also easily build your own Shell scripts to automate common tasks. I honestly believe it is faster and easier to build for the CLi mainly because you do not have to deal with options UI. If you have ever released an application with any sort of options you have felt this pain. It all ends up in a way kind of  in the format of JSON any way we might as well cut out the middle man.&lt;/p&gt;
&lt;p&gt;Using OHMyZSH you can add plugins and themes to increase the efficiency of your CLI usage. Over the course of the next few posts I will outline how simple it is to get started using the CLi. You shall no longer Fear the Shell.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 20 Sep 2015 19:36:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/09/20/dont-fear-the-shell</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/09/20/dont-fear-the-shell</guid>
											</item>
					<item>
				<title>Installing Linters Atom</title>
				<description>
					<![CDATA[
					&lt;p&gt;Atom is an awesome new editor built by Github it has some really good linter plugins. So we will go through the steps to get them setup and configured for Atom. The linter plugins all have some requirements you can check out &lt;a href=&quot;/2015/08/27/linting-your-code-installing-the-linters/&quot;&gt;Linting Your Code: Installing the Linters&lt;/a&gt; to get all of the requirements installed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everything with a $ should be ran in the terminal without the ($ ).&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Installing plugins via Atoms Package Manager&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;This will be referred to as install &amp;quot;X Package&amp;quot; via Package Manager.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There is two was to install packages in Atom either through command line tool or through preferences. Feel free to use which ever way you want I personally find that through preferences is a little easier most of the time since you can search.&lt;/p&gt;
&lt;h4&gt;Installing packages via Preferences.&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to &lt;code&gt;Atom &amp;gt; Preferences &amp;gt; Install &amp;gt; Packages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type the name of the package into the search box, it is a fuzzy search so you do not need to type the whole name.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;enter&lt;/code&gt; to search.&lt;/li&gt;
&lt;li&gt;Find the package to install and click the Install button.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Installing packages via Atom Package Manager(APM) CLI Tool.&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Search the &lt;a href=&quot;https://atom.io/packages/&quot;&gt;Atom Package Repository&lt;/a&gt; for the package you want to install.&lt;/li&gt;
&lt;li&gt;The packages name is easy to find in the URL &lt;code&gt;https://atom.io/packages/package-name/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the package
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ apm install package-name&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Linter Installation&lt;/h3&gt;
&lt;p&gt;All of the linters require the &lt;a href=&quot;https://atom.io/packages/linter/&quot;&gt;Linter Package&lt;/a&gt; to be installed first.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;linter&lt;/code&gt; via package manager.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;linter-phpcs&lt;/code&gt; for &lt;a href=&quot;https://github.com/squizlabs/PHP_CodeSniffer&quot;&gt;PHP Code Sniffer&lt;/a&gt; via package manager.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;linter-jshint&lt;/code&gt; for &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; via package manager.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;linter-jscs&lt;/code&gt; for &lt;a href=&quot;http://jscs.info/&quot;&gt;JSCS&lt;/a&gt; via package manager.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;linter-scss-lint&lt;/code&gt; for &lt;a href=&quot;https://github.com/brigade/scss-lint&quot;&gt;SCSS-Lint&lt;/a&gt; via package manager.&lt;/li&gt;
&lt;li&gt;Restart Atom&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Linter Configuration&lt;/h3&gt;
&lt;p&gt;All of the linters have a pretty easy setup the main thing you need to know is the path to the executable. Other than that feel free to tweak the other settings until you find the mid-ground between annoying and helpful.&lt;/p&gt;
&lt;h4&gt;Linter&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to &lt;code&gt;Atom &amp;gt; Preferences &amp;gt; Packages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;linter&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Tweak settings to you&#039;re liking.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;SCSS-Lint&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to &lt;code&gt;Atom &amp;gt; Preferences &amp;gt; Packages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;linter-scss-lint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You will need to know the location of the SCSS-Lint executable.
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ which scss-lint&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Enter the location of the SCSS-Lint in the Executable Path setting.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;JSHint&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to &lt;code&gt;Atom &amp;gt; Preferences &amp;gt; Packages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;linter-jshint&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You will need to know the location of the JSHint executable.
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ which jshint&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Enter the location of the JSHint in the Executable Path setting.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;JSCS&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to &lt;code&gt;Atom &amp;gt; Preferences &amp;gt; Packages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;linter-jscs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You will need to know the location of the JSCS executable.
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ which jscs&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Enter the location of the JSCS in the Executable Path setting.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;PHPCS&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to &lt;code&gt;Atom &amp;gt; Preferences &amp;gt; Packages&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Search for &lt;code&gt;linter-phpcs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You will need to know the location of the PHPCS executable.
&lt;ul&gt;
&lt;li&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ which phpcs&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Enter the location of the PHPCS in the Executable Path setting.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;So there we go Atom will now be able to lint our code as we work. This is so much more efficient than having to run the tools manually. It is also more efficient then refreshing the browser to find that you have made a simple typo the linters will catch it before you get to that point.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 13 Sep 2015 17:09:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/09/13/installing-linters-atom</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/09/13/installing-linters-atom</guid>
											</item>
					<item>
				<title>Installing Linters Sublime Text 3</title>
				<description>
					<![CDATA[
					&lt;p&gt;Sublime Text is one of my favorite editors I have ever used and it has excellent support for linting. This will cover Sublime Text 3 only since the plugin used SublimeLinter went through a major shift from Sublime text 2 to 3. The biggest difference is in ST2 the linters where bundled with the plugin now in ST3 they are created as plugins.&lt;/p&gt;
&lt;p&gt;So we will go through the steps to get them setup and configured for Sublime Text 3. The linter plugins all have some requirements you can check out &lt;a href=&quot;/2015/08/27/linting-your-code-installing-the-linters/&quot;&gt;Linting Your Code: Installing the Linters&lt;/a&gt; to get all of the requirements installed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everything with a $ should be ran in the terminal without the ($ ).&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Package Control Installation&lt;/h3&gt;
&lt;p&gt;If for some reason you have been using Sublime Text 3 without Package Control you need to install it now. You can get the installation instructions via the &lt;a href=&quot;https://packagecontrol.io/installation&quot;&gt;Package Control website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Installing plugins via Package Control&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;This will be referred to as install &amp;quot;X Package&amp;quot; via Package Control.&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the command palette &lt;code&gt;cmd+shift+p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;install&lt;/code&gt; and select &lt;code&gt;Package Control: Install Package&lt;/code&gt; from the command palette.&lt;/li&gt;
&lt;li&gt;Wait for the list of available packages to load and then start typing the name of the package until you see the plugin you want to install.&lt;/li&gt;
&lt;li&gt;Click on the package you want to install.&lt;/li&gt;
&lt;li&gt;Once the plugin is installed you should receive an install notice.&lt;/li&gt;
&lt;li&gt;Restart Sublime after all packages you need are installed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Linter Installation&lt;/h3&gt;
&lt;p&gt;All of the linters require the &lt;a href=&quot;http://sublimelinter.readthedocs.org/en/latest/installation.html&quot;&gt;SublimeLinter Plugin&lt;/a&gt; to be installed first.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;code&gt;SublimeLinter&lt;/code&gt; via package control.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;SublimeLinter-phpcs&lt;/code&gt; for &lt;a href=&quot;https://github.com/squizlabs/PHP_CodeSniffer&quot;&gt;PHP Code Sniffer&lt;/a&gt; via package control.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;SublimeLinter-jshint&lt;/code&gt; for &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; via package control.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;SublimeLinter-jscs&lt;/code&gt; for &lt;a href=&quot;http://jscs.info/&quot;&gt;JSCS&lt;/a&gt; via package control.&lt;/li&gt;
&lt;li&gt;Install &lt;code&gt;SublimeLinter-contrib-scss-lint&lt;/code&gt; for &lt;a href=&quot;https://github.com/brigade/scss-lint&quot;&gt;SCSS-Lint&lt;/a&gt; via package control.&lt;/li&gt;
&lt;li&gt;Restart Sublime&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;General Linter Configuration&lt;/h3&gt;
&lt;p&gt;To configure the linters is fairly simple you will need to duplicate the default settings before starting. Copy the default settings under &lt;code&gt;Preferences &amp;gt; Package Settings &amp;gt; SublimeLinter &amp;gt; Settings - Default&lt;/code&gt; to &lt;code&gt;Preferences &amp;gt; Package Settings &amp;gt; SublimeLinter &amp;gt; Settings - User&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can change the gutter theme, lint mode, mark style, show errors on save and other settings. You can edit them from the command palette &lt;code&gt;cmd+shift+p&lt;/code&gt; and searching for SublimeLinter. The gutter theme is the icon in Sublimes gutter area. The lint mode is when the linter should run I would suggest either Background or Load/Save if Background slows down Sublime too much. Mark style handle how the error will be shown in the code.  Show errors on save is one thing I would suggest to disable since it can be rather annoying but thats up to you.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;PHP Code Sniffer(PHPCS) Configuration&lt;/h3&gt;
&lt;p&gt;One last thing you may want to edit is to set WordPress as the default PHPCS standard this so far has been the only linter I had to manually configure. In &lt;code&gt;Preferences &amp;gt; Package Settings &amp;gt; SublimeLinter &amp;gt; Settings - User&lt;/code&gt; under linters you just need to set &lt;code&gt;phpcs.standard&lt;/code&gt; to WordPress.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&quot;linters&quot;: {
    &quot;phpcs&quot;: {
        &quot;standard&quot;: &quot;WordPress&quot;
    },
},&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;Ok well that is all it really takes to get up and linting on Sublime Text 3. It is extremely simple and the little time spent to setup linting will pay off quickly. Well written code is worth the little bit of time up front it takes to make it a conscious decision. It can be just as helpful as commenting your code and writing tests.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 30 Aug 2015 19:06:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/30/installing-linters-sublime-text-3</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/30/installing-linters-sublime-text-3</guid>
											</item>
					<item>
				<title>Linting Your Code: Installing the Linters</title>
				<description>
					<![CDATA[
					&lt;p&gt;Linting is basically the act of running your code through a tool that catches syntax issues, common pitfalls, and helps enforce a general coding style among other things. This does not actually test the code like a unit test or integration test. How ever it helps stop you from shooting yourself in the foot with simple typos.&lt;/p&gt;
&lt;p&gt;Such as &lt;code&gt;if ( $foo = 1 )...&lt;/code&gt; which technically would always evaluate to true. A linter will through help by notifying you that something is not quite right and you can fix your code to be &lt;code&gt;if( 1 === $foo )...&lt;/code&gt;  which sets &lt;code&gt;$foo&lt;/code&gt; to strictly equal &lt;code&gt;1&lt;/code&gt; and even if you created the first typo of &lt;code&gt;=&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; PHP would throw an error.&lt;/p&gt;
&lt;p&gt;Installing code linters is pretty simple as long as you have a few perquisites installed. Node.js, NPM, Ruby, Git, Homebrew, and Homebrew PHP are all required to install the linters. If you do not have these items installed or your not sure &lt;a href=&quot;/2015/08/26/base-environment-setup/&quot;&gt;check out this post&lt;/a&gt; that will help you get started. We will be installing &lt;a href=&quot;https://github.com/brigade/scss-lint&quot;&gt;SCSS-Lint&lt;/a&gt;, &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt;, &lt;a href=&quot;http://jscs.info/&quot;&gt;JavaScript Code Style (JSCS)&lt;/a&gt;, and &lt;a href=&quot;https://github.com/squizlabs/PHP_CodeSniffer&quot;&gt;PHP Code Sniffer (PHPCS)&lt;/a&gt; with &lt;a href=&quot;https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards&quot;&gt;WordPress Coding Standards&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SCSS-Lint handles linting your Sass/SCSS code if you use Stylus check out &lt;a href=&quot;https://www.npmjs.com/package/stylint&quot;&gt;Stylint&lt;/a&gt;, plain old CSS check out &lt;a href=&quot;http://csslint.net/&quot;&gt;CSSLint&lt;/a&gt;, and for LESS if you know of a linter I would love to hear about it. JSHint and JSCS are both for Javascript I have also heard good things about &lt;a href=&quot;http://eslint.org/&quot;&gt;ESLint&lt;/a&gt; which is installed pretty much the same way as JSHint. PHPCS handles linting your PHP code there is also &lt;a href=&quot;http://phpmd.org/&quot;&gt;PHP Mess Detector (PHPMD)&lt;/a&gt;. However, I do a large amount of WordPress work and PHPCS already has WordPress Coding Standards so it works for me.&lt;/p&gt;
&lt;p&gt;So lets get started!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Everything with a $ should be ran in the terminal without the ($ ).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Installing PHPCS&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Installing PHPCS is the hardest of the linters the rest should be fairly simple.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install php-code-sniffer&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure linter is in your $PATH (It should return the path to the executable)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# /usr/local/bin/phpcs
$ which phpcs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to the PHPCS directory&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Make sure to change {PHPCS_VERSION} to the installed PHPCS version 2.3.2 is the current version as of this post.
$ cd /usr/local/Cellar/php-code-sniffer/{PHPCS_VERSION}/CodeSniffer/Standards&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install WordPress PHPCS standards&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git clone -b master` https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git wpcs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add WordPress standards to PHPCS configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Make sure to change {PHPCS_VERSION} to the installed PHPCS version 2.3.2 is the current version as of this post.
$ phpcs --config-set installed_paths /usr/local/Cellar/php-code-sniffer/{PHPCS_VERSION}/CodeSniffer/Standards/wpcs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check the installed standards, make sure one is WordPress.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ phpcs -i&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Set the default standard.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ phpcs --config-set default_standard WordPress&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;JSCS Installation&lt;/h3&gt;
&lt;p&gt;Install JSCS&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ npm install -g jscs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure linter is in your $PATH (It should return the path to the executable)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# /usr/local/bin/jshint
$ which jscs&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configuration is handled via the &lt;a href=&quot;http://jscs.info/overview.html#-config-c&quot;&gt;.jscs.json&lt;/a&gt; you can read more about the available configuration options &lt;a href=&quot;http://jscs.info/rules.html&quot;&gt;in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can check out my &lt;a href=&quot;https://github.com/DHolloran/linter-examples/blob/master/.jscs.json&quot;&gt;JSCS configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;JSHint Installation&lt;/h3&gt;
&lt;p&gt;Install JSHint&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g jshint&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Make sure linter is in your $PATH (It should return the path to the executable)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ which jshint&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configuration is handled via the &lt;a href=&quot;http://jshint.com/docs/&quot;&gt;.jshintrc&lt;/a&gt; you can read more about the available configuration options &lt;a href=&quot;http://jshint.com/docs/options/&quot;&gt;in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can check out my &lt;a href=&quot;https://github.com/DHolloran/linter-examples/blob/master/.jshintrc&quot;&gt;JSHint configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;SCSS-Lint Installation&lt;/h3&gt;
&lt;p&gt;Install SCSS Lint&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ gem install scss_lint&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Make sure linter is in your $PATH (It should return the path to the executable)
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ which scss-lint&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: Configuration is handled via the
Configuration is handled via the &lt;a href=&quot;https://github.com/brigade/scss-lint#configuration&quot;&gt;.scss-lint.yml&lt;/a&gt; you can read more about the available configuration options &lt;a href=&quot;https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/linter/README.md&quot;&gt;in the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can check out my &lt;a href=&quot;https://github.com/DHolloran/linter-examples/blob/master/.scss-lint.yml&quot;&gt;SCSS-Lint configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;Well that was not too bad was it? No I didn&#039;t think so. As it stands now you could run each linter via the command line and see the issues. However, that is definitely not an efficient way to lint your code. Luckily for you there are plugins for &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; and &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime text 3&lt;/a&gt; which are easy to get setup. You can lean how to &lt;a href=&quot;/2015/08/30/installing-linters-sublime-text-3/&quot;&gt;install the Sublime Text 3 linters here&lt;/a&gt;. You can also run them with your build tools such as &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt.js&lt;/a&gt; or &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp.js&lt;/a&gt; even though I personally prefer the inline linting of the editors.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Thu, 27 Aug 2015 20:47:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/27/linting-your-code-installing-the-linters</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/27/linting-your-code-installing-the-linters</guid>
											</item>
					<item>
				<title>Base Environment Setup</title>
				<description>
					<![CDATA[
					&lt;p&gt;I have a few posts in mind that require a few of the same steps so I figured I would catalog them here. These should be things every developer regardless of wether you are more of a front end or backend developer. They are extremely easy to get setup now more than ever. There was once a point where I have to fight and wrangle some of these tools I&#039;m looking at you PHP. The upside to having these few base things installed is adding tools like &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt; front end package management, &lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt;/&lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;/&lt;a href=&quot;http://broccolijs.com/&quot;&gt;Broccoli&lt;/a&gt; for task running and &lt;a href=&quot;http://sass-lang.com/&quot;&gt;Sass&lt;/a&gt; for making CSS more fun. So here we go lets install all the things!!!&lt;/p&gt;
&lt;h2&gt;Environment Setup&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Everything with a $ should be ran in the terminal without the ($).&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Node.js&lt;/h3&gt;
&lt;p&gt;Install &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Verify Node is installed
$ node -v

# Verify NPM is installed
$ npm -v&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Ruby&lt;/h3&gt;
&lt;p&gt;Ruby should be already installed in Mac OS X you can check Ruby
&lt;code&gt;$ ruby -v&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At the time of this writing 2.x.x is fine if not you can install Ruby via &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt; by following the instructions on the &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM website&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Xcode Command Line Tools&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;This is required to install anything that needs to be compiled from source code.&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the &lt;a href=&quot;https://developer.apple.com/downloads/&quot;&gt;Xcode Command Line Tools&lt;/a&gt; for your version of Mac OS x. You may need to sign up for a free developer account.&lt;/li&gt;
&lt;li&gt;Install the Xcode Command Line by clicking on the downloaded package and following the install prompts.&lt;/li&gt;
&lt;li&gt;Once installed you should accept the Xcode license agreement.
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ sudo xcodebuild -license&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Git&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Mac OS X should have shipped with Git by default but we might as well upgrade it.&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&quot;https://git-scm.com/download/mac&quot;&gt;Git for Mac OS X&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Install Git by clicking on the downloaded package and following the install prompts.&lt;/li&gt;
&lt;li&gt;Check if Git has been installed correctly.
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git --version&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Homebrew&lt;/h3&gt;
&lt;p&gt;Install &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;.
You can view the install &lt;a href=&quot;http://brew.sh/#install&quot;&gt;instructions here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# As of 8/24/2015
$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Homebrew PHP&lt;/h3&gt;
&lt;p&gt;Tap &lt;a href=&quot;https://github.com/Homebrew/homebrew-php&quot;&gt;Homebrew PHP&lt;/a&gt; to install helpful PHP Tools easily.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew tap homebrew/dupes
$ brew tap homebrew/versions
$ brew tap homebrew/homebrew-php&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;PHP&lt;/h3&gt;
&lt;p&gt;Install PHP as of this writing the current stable version is 5.6.11 but you should install the &lt;a href=&quot;http://php.net/releases/&quot;&gt;current version&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# php 5.6.x === php56
$ brew install php56&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;, &lt;code&gt;~/.zshrc&lt;/code&gt;, or other &lt;code&gt;~/.shellrc&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ export PATH=&quot;$(brew --prefix php56)/bin:$PATH&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Composer&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Composer allows you to install PHP packages with ease. Much like &lt;code&gt;npm&lt;/code&gt; for Node.js and &lt;code&gt;gem&lt;/code&gt; for Ruby.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ brew install composer&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;So that was easy wasn&#039;t it. Now you will have even less excuse to use command line tools to increase your productivity. Now you just need to switch from Bash to ZSH with &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;OHMyZSH&lt;/a&gt; to really super charge your workflow.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Wed, 26 Aug 2015 20:52:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/26/base-environment-setup</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/26/base-environment-setup</guid>
											</item>
					<item>
				<title>Has WP_Query Abstracted To Much?</title>
				<description>
					<![CDATA[
					&lt;p&gt;I was working on a project recently where I ran into a situation where &lt;code&gt;WP_Query&lt;/code&gt;, well actually it was &lt;code&gt;WP_User_Query&lt;/code&gt;, just would not work. So I feel back to raw SQL through &lt;code&gt;wpdb&lt;/code&gt; and to my astonishment PHPCS with WordPress coding standards discourages the use of &lt;code&gt;wpdb&lt;/code&gt;. I know it is not a total outright do not use but still. It got me to thinking maybe &lt;code&gt;WP_Query&lt;/code&gt; abstracts too much away from the developer.&lt;/p&gt;
&lt;p&gt;I am definitely not advocating writing MySQL you should use some layer of abstraction primarily for security reasons. Not because MySQL is insecure, but you are human it is safer if the tool you use forces you to be secure. Which &lt;code&gt;WP_Query&lt;/code&gt; definitely makes your code more secure but it can make it harder to understand what is going on under the hood. This can be an issue with performance if you are not careful. WordPress can be somewhat of a black box that can hurt you just as much as it helps.&lt;/p&gt;
&lt;p&gt;If you are not already using &lt;a href=&quot;https://wordpress.org/plugins/query-monitor/&quot;&gt;Query Monitor&lt;/a&gt; go download it right now and run it on one of your sites. Preferably on a page that is rather complex with many queries you may be surprised what you find. It helps to open the black box up a little so you can see the actual queries that run on every page. This is somewhat eye-opening since you look at &lt;code&gt;WP_Query&lt;/code&gt; as how retrieve posts. However, you never may actually see how &lt;code&gt;WP_Query&lt;/code&gt; actually retrieves posts.&lt;/p&gt;
&lt;p&gt;Granted in the majority of cases &lt;code&gt;WP_Query&lt;/code&gt; is probably more efficient than you writing the queries yourself. It definitely makes it easier to retrieve data than writing your own MySQL. Which is the primary reason why I think it abstracts a little too much since you are removed from the database in almost every situation. If something is easy everyone will be able to do it even if they do not understand the consequences which are why WordPress sometimes gets a bad wrap for being slow. Between slow MySQL queries and plugins loading more resources then they need these are the primary issues, I have seen on WordPress page speed.&lt;/p&gt;
&lt;p&gt;The one thing I would love to see abstracted which &lt;code&gt;WP_Query&lt;/code&gt; does not is to allow for different database drivers. This could definitely improve performance depending on what type of data you are storing. Granted WordPress is an older project and I know a few releases back everything was migrated from the MySQL extension to MySQLi. However, I would love to see WordPress migrate to using &lt;a href=&quot;http://php.net/manual/en/book.pdo.php&quot;&gt;PDO&lt;/a&gt; which you actually interact with much like you would have with &lt;code&gt;$wpdb&lt;/code&gt;. I know this is just a wish and being an older project it would be a monumental task to migrate I would guess. However, this is one of the main reasons why you abstract things like database access. If you have to update it at a later date it&#039;s much easier to update a few classes instead of many random files.&lt;/p&gt;
&lt;p&gt;I think it is just something to ponder. It is definitely an issue I have seen with a lot of tools that seem like a black box. Unfortunately in those situations it almost seems like there is an aversion to peer inside. You do not need to know everything about the tools you use but you should at least know why you are using them. This will help you make an informed decision next time you need to use the black box tool.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 18 Aug 2015 19:53:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/18/has-wp-query-abstracted-to-much</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/18/has-wp-query-abstracted-to-much</guid>
											</item>
					<item>
				<title>Setting Up a Jekyll Blog - Part 5</title>
				<description>
					<![CDATA[
					&lt;p&gt;So now we have setup, tweaked, and styled our new Jekyll site. Now it is time for the whole world to see and admire our work, at least we hope they will. There is a large range of options in the &lt;a href=&quot;http://jekyllrb.com/docs/deployment-methods/&quot;&gt;Jekyll Documentation about Deployments&lt;/a&gt; but I am going to focus on &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; since it is extremely easy to get started. The one caveat is that Github rightfully so restricts you to a few &lt;a href=&quot;https://help.github.com/articles/using-jekyll-plugins-with-github-pages/&quot;&gt;plugins&lt;/a&gt; so if you need some more control you will need to move to a new hosting provider. Which moving a static site compared to a traditional CMS is relatively easier since everything is just a static file in a Git repository.&lt;/p&gt;
&lt;p&gt;For the purpose of this post I am assuming you have at least some familiarity with Git. If not it should still be fairly easy but it may help to do a little reading about Git there are plenty of resources around the web.&lt;/p&gt;
&lt;h3&gt;Creating Your Github Pages Site&lt;/h3&gt;
&lt;p&gt;So the first thing you will need is a Github account if you do not already have one you can &lt;a href=&quot;https://github.com/join&quot;&gt;get one here&lt;/a&gt;. The next thing you will need to do once you have signed/signed up is to create a new repository that is {username}.github.io this will also be the URL you will access your site from.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/dholloran.github.png&quot; alt=&quot;My personal site example&quot; /&gt;&lt;/p&gt;
&lt;p&gt;While you are creating the repository you might as well add a Jekyll .gitignore and a license file. Github requires you to ignore the &lt;code&gt;_sites&lt;/code&gt; directory since it will handle building that each time you push changes. Now you will either need to add the Github remote with &lt;code&gt;git remote add origin https://github.com/user/{username}.github.io.git&lt;/code&gt; if you have been tracking your changes with Git already. If not you should run &lt;code&gt;git init&lt;/code&gt; in the Jekyll directory then stage all of your files with &lt;code&gt;git add .&lt;/code&gt;.  After that you can add your initial commit &lt;code&gt;git commit -m &quot;Initial commit&quot;&lt;/code&gt; then you can run &lt;code&gt;git remote add origin https://github.com/user/{username}.github.io.git&lt;/code&gt;.  From here on out every time you push something to your master branch with &lt;code&gt;git push origin master&lt;/code&gt; Github Pages will build your site and then deploy it. Now you should be able to access you site at &lt;a href=&quot;http://{username}.github.io/&quot;&gt;http://{username}.github.io/&lt;/a&gt; it is usually pretty fast but give it a minute if it is not instantly up.&lt;/p&gt;
&lt;h3&gt;That was simple wasn&#039;t it?&lt;/h3&gt;
&lt;p&gt;This is actually all there really is to deploying a Jekyll site with Github Pages. Well at least if you are ok with accessing your site at &lt;a href=&quot;http://{username}.github.io/&quot;&gt;http://{username}.github.io/&lt;/a&gt; which changing that is extremely easy. You can either setup a subdomain or an apex domain you can find more information about the two&lt;a href=&quot;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/&quot;&gt; here&lt;/a&gt;. The main benefit you get from a custom domain is access to the Github Pages Content Delivery Network and Denial Of Service attack mitigation. As well as you get to choose your own awesome domain name or be boring like me choose your name.&lt;/p&gt;
&lt;h3&gt;Adding A Custom Domain&lt;/h3&gt;
&lt;p&gt;To add a custom domain first you need to create a &lt;code&gt;CNAME&lt;/code&gt; file to your repository the file should be all capitals and no extension. In this file all you need to add the name of your domain &lt;code&gt;myawesomedomain.com&lt;/code&gt; do not include the &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;www&lt;/code&gt; only the domain name. The you just need to commit and push the &lt;code&gt;CNAME&lt;/code&gt; file to Github. You can confirm that the previous step was successful by going to your repository sidebar and choosing the settings page. In there under Github Pages you should see your domain name.&lt;/p&gt;
&lt;p&gt;Then you need to go to your DNS provider and update the DNS information for your domain. If you are using a subdomain you can just add a &lt;code&gt;CNAME&lt;/code&gt; record on your primary domain. If you are using an apex domain like me you will need to configure either an &lt;code&gt;ALIAS&lt;/code&gt;, &lt;code&gt;ANAME&lt;/code&gt;, or &lt;code&gt;A&lt;/code&gt; record depending on your DNS provider. More information about &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&quot;&gt;setting up a custom domain name with Github pages here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So there is much more you can do with Jekyll this has only scratched the surface. I hope to dive more into Jekyll plugins among other things. Which will force me to move to another host out side of Github Pages. However, the Github Pages is an excellent deal Git hosting, deployments, and hosting for free. You just give up access to continuous integration tasks, server configuration control and the ability to use custom Jekyll plugins. It is a great first step if you really want to give Jekyll the full chance it so greatly deserves.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Mon, 10 Aug 2015 21:08:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/10/setting-up-a-jekyll-blog-part-5</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/10/setting-up-a-jekyll-blog-part-5</guid>
											</item>
					<item>
				<title>Setting Up a Jekyll Blog - Part 4</title>
				<description>
					<![CDATA[
					&lt;p&gt;So now that we know how to get started with building the structure of our site we can start styling. Since Jekyll is based on Ruby it makes sense that the preprocessor of choice is &lt;a href=&quot;http://sass-lang.com&quot;&gt;Sass/SCSS&lt;/a&gt;. I personally use SCSS but you could technically us &lt;a href=&quot;http://lesscss.org&quot;&gt;Less&lt;/a&gt;, &lt;a href=&quot;https://learnboost.github.io/stylus/&quot;&gt;Stylus&lt;/a&gt;, &lt;a href=&quot;https://github.com/postcss/postcss&quot;&gt;PostCSS&lt;/a&gt; or whatever suits your fancy.&lt;/p&gt;
&lt;p&gt;So I will not go too much into the others but I will go through using Sass the Jekyll way. I hope to have a more in depth series on &lt;a href=&quot;http://gulpjs.com&quot;&gt;Gulp&lt;/a&gt;/&lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt&lt;/a&gt; soon. When I do I&#039;ll add a link to it here as well. I personally use Gulp to handle compiling my SCSS among many other things. I have recently migrated from Grunt and also use Codekit quite regularly as well. For the purpose of this post I will assume you have some experience with Sass/SCSS.&lt;/p&gt;
&lt;h3&gt;Pre/Post-processor (Other Than Sass/SCSS)&lt;/h3&gt;
&lt;p&gt;If you want to use another pre/post-processor it will be setup the same way you normally do. Setup your compiler of choice and directories needed. Then add your &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; to the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and there you go. Just remember that Jekyll ignores all directories that start with an &lt;code&gt;_&lt;/code&gt; so you can have an &lt;code&gt;_assets&lt;/code&gt; directory that holds your pre/post-processor files and a &lt;code&gt;dist&lt;/code&gt; directory for your compiled CSS files. Then every time you run &lt;code&gt;jekyll build&lt;/code&gt; or &lt;code&gt;jekyll serve&lt;/code&gt; Jekyll will just copy over the &lt;code&gt;dist&lt;/code&gt; directory over to the Jekyll &lt;code&gt;_site&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3&gt;Plain Old CSS&lt;/h3&gt;
&lt;p&gt;For using plain old CSS if thats your thing you can just place you monolithic CSS file into the css directory name it &lt;code&gt;main.css&lt;/code&gt;. Then you can just delete the &lt;code&gt;_scss&lt;/code&gt; directory and the &lt;code&gt;main.scss&lt;/code&gt; file. Just like the post/pre-processor setup above every time you run &lt;code&gt;jekyll build&lt;/code&gt; or &lt;code&gt;jekyll serve&lt;/code&gt; Jekyll will just copy your CSS file over to the Jekyll &lt;code&gt;_site&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3&gt;Sass/SCSS&lt;/h3&gt;
&lt;p&gt;Now for the default way to setup Sass/SCSS using Jekyll. By default Jekyll sets the &#039;sass_dir&lt;code&gt;to be&lt;/code&gt;_sass&lt;code&gt;so this is where we will put our SCSS files. There is also a&lt;/code&gt;css&lt;code&gt;directory with a&lt;/code&gt;main.scss&lt;code&gt;file this file will be what allows use to compile our SCSS into the correct&lt;/code&gt;css` directory. This file will also have front matter in it so Jekyll knows this is a fill it needs to do something with. This is the only SCSS file that should have front matter in it our the SCSS compiler will throw an error.&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;main.scss&lt;/code&gt; file you can set up your variables and start importing your other SCSS files. Jekyll already knows that the &lt;code&gt;_scss&lt;/code&gt; directory exists so you do not have to add it to the file path when you are importing SCSS partials. So you should use &lt;code&gt;@import &#039;my-styles&#039;&lt;/code&gt; instead of &lt;code&gt;@import &#039;../_scss/my-styles&#039;&lt;/code&gt; or the SCSS compiler will not know where to find your partials.&lt;/p&gt;
&lt;p&gt;From here on out every time you run &lt;code&gt;jekyll build&lt;/code&gt; or &lt;code&gt;jekyll serve&lt;/code&gt; Jekyll will compile your changes. I spent part of last weekend styling my site and it was fairly enjoyable. It may be the speed of Jekyll loading compared to even a simple WordPress page. Which WordPress is where I spend most of my day do not get me wrong I love WordPress and I do not care who nows it.&lt;/p&gt;
&lt;p&gt;However it is refreshing to gain so much speed compared to some of the ease of use with WordPress. I&#039;ve seen some real improvements in the world of CMS to static site but nothing I would feel comfortable handing over to a non-technical client. I&#039;ve taken a look at &lt;a href=&quot;http://prose.io/&quot;&gt;Prose&lt;/a&gt; which seems nice and it works with Jekyll through Github Pages. There also is &lt;a href=&quot;http://roots.cx/&quot;&gt;Roots&lt;/a&gt;, not to be confused with the the WordPress theme/tooling &lt;a href=&quot;https://roots.io&quot;&gt;Roots&lt;/a&gt;, that has a WordPress integration. That is a discussion for another day though.&lt;/p&gt;
&lt;p&gt;So there you have it I think we are getting pretty close to being able to deploy our site out into the wild. Up next we will go through setting up a Jekyll site in production.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 09 Aug 2015 14:34:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/09/setting-up-a-jekyll-blog-part-4</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/09/setting-up-a-jekyll-blog-part-4</guid>
											</item>
					<item>
				<title>Using Trello to Manage Your Blog Posts</title>
				<description>
					<![CDATA[
					&lt;p&gt;So I have been trying to get in the habit of writing more but to do that it helps to have a bank of ideas. So I do not have to sit down and try to find something to write about. I&#039;ve really liked using &lt;a href=&quot;https://trello.com&quot;&gt;Trello&lt;/a&gt; to catalog my possible ideas for posts to write. This has really been helping me keep up with at least writing a few times a week since I have a large range of ideas to write about.&lt;/p&gt;
&lt;p&gt;They have a really nice and simple app so you can jot down quick ideas. It is somewhat of a todo app but it doesn&#039;t have that linear feel of a list. You basically have a set of cards in each main list. You are then able to add lists of cards to each main card. That way you can see multiple lists running in parallel. This helps a lot when you have a large amount of loosely related things such as blog ideas.&lt;/p&gt;
&lt;p&gt;It almost has a mind map type of feel to it which I like. This makes it easy to add random ideas in a semi structured ways. I probably would not use it for a day to day type of todo though. I am a pretty big fan of &lt;a href=&quot;https://asana.com&quot;&gt;Asana&lt;/a&gt; which we use at work. I almost used that but it almost seems like over kill for my needs in this situation.&lt;/p&gt;
&lt;p&gt;Using Trello has made cataloging ideas much easier. Which in turn helps making writing posts much easier when I do have the time. Also it helps me not to forget good ideas for things to write about. If I do not write the ideas down they will usually be lost by the time I get to writing about them.&lt;/p&gt;
&lt;p&gt;Here are some more ideas for using Trello direct from the Trello blog  Ideas and &lt;a href=&quot;http://blog.trello.com/community-perspectives-vol-1/&quot;&gt;Inspiration From The Trello Community: Volume 1&lt;/a&gt;. There are some really good other ideas for using Trello in there as well.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Thu, 06 Aug 2015 20:21:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/06/using-trello-to-manage-your-blog-posts</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/06/using-trello-to-manage-your-blog-posts</guid>
											</item>
					<item>
				<title>Change URLs On Your WP Engine Install</title>
				<description>
					<![CDATA[
					&lt;p&gt;We recently switched to &lt;a href=&quot;http://wpengine.com&quot;&gt;WP Engine&lt;/a&gt; which is an excellent choice for WordPress hosting. Managed hosting I believe is the best way to host a WordPress site. However it does have some quirks compared to our old host.&lt;/p&gt;
&lt;p&gt;One is the way you have to update your site URL not only do you need to do it in WordPress like usual but you need to set it in your account. You can do that through the Migration Checklist or under Domains in your install. What the Migration checklist does not tell you is you need to change your WordPress URL in the database and not in the settings. This is primarily because of how WP Engines caching works and settings do not clear out all the way even if you clear the cache. So you get stuck in a somewhat half complete state.&lt;/p&gt;
&lt;p&gt;Also if you used the &lt;a href=&quot;https://wordpress.org/plugins/wp-site-migrate/&quot;&gt;WP Engine migration tool&lt;/a&gt; you need to check your &lt;code&gt;wp-config.php&lt;/code&gt; for &lt;code&gt;define( &#039;WP_HOME&#039;, &#039;http://example.com&#039; );&lt;/code&gt; and &lt;code&gt;define( &#039;WP_SITEURL&#039;, &#039;http://example.com&#039; );&lt;/code&gt;. Granted you probably shouldn&#039;t be setting your home/site URLs this way so if they are this would be a good time to delete them. The WP Engine migration tool changes all references of the old URL into the new WP Engine URL in the database and in the code. So even though you can access your home page from your main URL everything is loaded from the WP Engine URL. That should be all you will need to change configuration wise to setup your site URL.&lt;/p&gt;
&lt;p&gt;You may also want to run an update for all the URLs in your content especially if you used the automated migration tool. I usually use &lt;a href=&quot;https://wordpress.org/plugins/velvet-blues-update-urls/&quot;&gt;Velvet Blues Update URLs&lt;/a&gt; bit seems to do the trick without any issues. So there you have it not to difficult to change the URL once you know the all of the possible places it needs to be changed.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 04 Aug 2015 18:18:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/04/change-urls-on-your-wp-engine-install</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/04/change-urls-on-your-wp-engine-install</guid>
											</item>
					<item>
				<title>Is Apple Pay, Coin, etc. Helpful?</title>
				<description>
					<![CDATA[
					&lt;p&gt;Are &amp;quot;card consolidators&amp;quot; like &lt;a href=&quot;http://www.apple.com/apple-pay/&quot;&gt;Apple Pay&lt;/a&gt;, &lt;a href=&quot;https://onlycoin.com/&quot;&gt;Coin&lt;/a&gt;, etc. useful? I would say it depends on, it really depends on where you shop and if you are ok still bringing a backup card. I have been using both Apple Pay and Coin for the last few months interchangeably when I can. I know the field is still young and has a long way to go however the support really makes it tough to justify. As well as when I first ordered my coin almost 2 years ago I had probably more like 5-8 cards possible in my wallet now I have 2 payment cards on average.&lt;/p&gt;
&lt;p&gt;So far I think that the goal of consolidating your cards into one device seems like it is definitely attainable eventually. However, I don&#039;t believe any of the available options has made it there yet. For me to consider them there they will need to be in the neighborhood of 98% plus payment processor adoption. So both when you try to add a card and you try to pay you do not have to switch to another card.&lt;/p&gt;
&lt;p&gt;I love it when technology makes things easier and this would definitely be an area I&#039;d like to see improvement in. However, rightfully so the payment processors are slow to adopt these new technologies. I personally build software for a living and honestly the hardest thing I&#039;ve ever encountered is working with payments since there is so much that can go wrong. The payment can fail, succeed, half authorize, considered fraud, etc. Which there is a plenty of edge cases as well as laws you will need to deal with.&lt;/p&gt;
&lt;p&gt;Which brings me to my final point security. I do feel like Coin adds less security than Apple Pay does. Coin primarily adds security in the case you forget or lose the card. It will remind you if you leave it behind and will also lock if you are not around. With apple pay it handles all of that a little different you still get the loss security that is built into the devices. However, it does not actually use your credit card number but a reference to your card. So each payment is unique and makes it unusable even if someone has the information. Which almost makes me feel safer than the chip cards in the security realm.&lt;/p&gt;
&lt;p&gt;I think if you are interested in tech or specifically the &amp;quot;Internet of Things&amp;quot; they are both definitely worth a look. Even if they are still in a young stage they are ready for everyday use. Just make sure you bring a backup card just in case. As well as the only way they will get better is by failing and iterating. Just like anything good these things will take time but it will be worth it.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 02 Aug 2015 19:36:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/08/02/is-apple-pay-coin-etc-helpful</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/08/02/is-apple-pay-coin-etc-helpful</guid>
											</item>
					<item>
				<title>Setting Up a Jekyll Blog - Part 3</title>
				<description>
					<![CDATA[
					&lt;h3&gt;Jekyll + Liquid&lt;/h3&gt;
&lt;p&gt;Jekyll uses a templating language named &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;Liquid&lt;/a&gt; developed at &lt;a href=&quot;http://www.shopify.com/&quot;&gt;Shopify&lt;/a&gt;. This gives you so extra abiliteis above that of plain old HTML. Such as conditionals, loops, access to variables, etc. which allows you to do things that traditionally required another language. You can find more information about Liquid on their &lt;a href=&quot;https://github.com/Shopify/Liquid/wiki&quot;&gt;wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Working With Jekyll Templates&lt;/h3&gt;
&lt;p&gt;So far I have not done too much editing of the main template Jekyll comes with. I have edited the main blog roll a little and added pagination so I am going to go through a few snippets you can use on your own blog.&lt;/p&gt;
&lt;p&gt;You can add an excerpt to your blog roll on index.html easily.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/DHolloran/e5ddb0f1a4986e574a7c.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The double curly braces on either end denote a Liquid tag that will be output to the screen. The &lt;code&gt;post.excerpt&lt;/code&gt; comes fromt the global post object which gives you access to the current post. There is also a &lt;code&gt;site&lt;/code&gt; object that gives you access to configuration details. The &lt;code&gt;strip_html&lt;/code&gt;, &lt;code&gt;strip_newlines&lt;/code&gt;, and &lt;code&gt;truncate:160&lt;/code&gt; are Liquid functions that help to clean up the excerpt before outputting it to the screen.&lt;/p&gt;
&lt;p&gt;Liquid also has loops to make it easy to display your posts in a blog roll.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/DHolloran/6dcf1f012c35e3dbcf82.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The curly brace ({) and percentage sign (%) denote a logical block such as a for loop. This basically goes through the posts until there are none left and then outputs a small snippet to the screen. This is a snippet taken directly from my home page right now. You can see that there is more data accessible from the &lt;code&gt;post&lt;/code&gt; object. Such as &lt;code&gt;post.date&lt;/code&gt; for the posts publish date and &lt;code&gt;post.title&lt;/code&gt; for the post title.&lt;/p&gt;
&lt;p&gt;In Liquid you can also use if/else statements just like you would normally in server side languages.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/DHolloran/9550ea26f737e28746c4.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Liquid also has template includes much like PHP has &lt;code&gt;include&lt;/code&gt;/&lt;code&gt;require&lt;/code&gt;, Node has &lt;code&gt;require()&lt;/code&gt;, etc. Liquid has its own version which is easy to use. You just need to add an HTML file into the &lt;code&gt;_includes&lt;/code&gt; such as &lt;code&gt;_includes/share.html&lt;/code&gt;. Then you can just include your partial HTML file into the current template with the following.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/DHolloran/d2667e1d158347b43c45.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Liquid even has comments such as any good &amp;quot;programming&amp;quot; language should they are a little more to type than most languages but you probably will not use them as often. You can add a comment with the following.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/DHolloran/c931e3d7e3d9f6cbaf5a.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;These are only some of the possibilities with Liquid you can read more about what is possible in the &lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot;&gt;Liquid Docs&lt;/a&gt;. You will definetly take a look at the &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers&quot;&gt;Liquid for Programmers&lt;/a&gt; or &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;Liquid for Designers&lt;/a&gt; depending on your personal preference. You can always read both and you might be a unicorn...&lt;/p&gt;
&lt;p&gt;Now that we have a basic understanding of liquid and how the templates work now its time to style our site. I will be using SCSS but you can drop in CSS, LESS, Stylus, etc. with a few small additions.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Wed, 29 Jul 2015 20:37:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/29/setting-up-a-jekyll-blog-part-3</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/29/setting-up-a-jekyll-blog-part-3</guid>
											</item>
					<item>
				<title>Shortcode API You&#039;re Doing It Wrong</title>
				<description>
					<![CDATA[
					&lt;p&gt;Few things first I am only using You&#039;re Doing It Wrong because WordPress core uses that internally so please do not take offense to it. Second for full disclosure I&#039;m not a big fan of shortcodes in the first place they are fairly temperamental for anything complicated. I think it may mainly have to do with Tiny MCE and whitespace. Last thing before we get going lets shortcode all the things! Yeah that will make it super useable...&lt;/p&gt;
&lt;p&gt;So I&#039;ve seen quite a few complaints about &lt;a href=&quot;https://make.wordpress.org/core/2015/07/23/changes-to-the-shortcode-api/&quot;&gt;issues/changes to shortcodes&lt;/a&gt; after the &lt;a href=&quot;https://wordpress.org/news/2015/07/wordpress-4-2-3/&quot;&gt;4.2.3 security release&lt;/a&gt;. First of all it&#039;s a security release so it cannot be publicly announced or even privately announced to plugin developers. Yes, I know that&#039;s kind of bad news and it is kind of bad that a large amount of site had shortcodes that were doing it wrong. It is however good that now you have one less venerability since being in the top 20ish% percent of websites makes WordPress a large easy target. Something at the scale of WordPress will once in a while not be able to cover every edge case when pushing out a security release. So before everyone starts to go blaming auto updates and WordPress lets take a look at the use cases outlined in the changes to the Shortcode API. Please feel free to add more use cases that I have missed in the comments below.&lt;/p&gt;
&lt;p&gt;In the use cases outlined in the post they seem kind of weird that this is even a big issue. Would you put a &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; in  a style attribute or any other attribute for that matter?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- This doesn&#039;t feel right... --&amp;gt;
&amp;lt;div style=&quot;background-image: url(&#039;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&#039;);&quot;&amp;gt;

&amp;lt;!-- So why would this ? --&amp;gt;
&amp;lt;div style=&quot;background-image: url(&#039;[shortcode]&#039;);&quot;&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, I know the shortcode would output an images URL but still... maybe I am wrong and you should be allowed to do this? Hopefully not then why would you put a shortcode in an HTML attribute granted. I get it you want access to a URL not easily accessible in the editor. Wouldn&#039;t it be a better experience just to tack on the attributes to the wrapping element to the shortcode? Maybe not in certain cases I could be wrong but I think in the vast majority of cases using a shortcode in an HTML attribute would be an error.&lt;/p&gt;
&lt;p&gt;For the second use case the double quotes nested in double quotes I mean seriously. This doesn&#039;t work in PHP, it doesn&#039;t work in Javascript and I doubt it would work anywhere else. Sure you can escape quotes with a &lt;code&gt;/&quot;&lt;/code&gt; or &lt;code&gt;/&#039;&lt;/code&gt; however it is much more legible to do &lt;code&gt;&quot;They&#039;re awesome!&quot;&lt;/code&gt; than &lt;code&gt;&#039;They\&#039;re awesome!&#039;&lt;/code&gt;. Sure these are fairly short strings so yeah not to bad in the form of legibility however if you have a paragraph or a large amount of &lt;code&gt;&#039;&lt;/code&gt; or &lt;code&gt;&quot;&lt;/code&gt; it gets real murky real quick. I&#039;m sure your at least somewhat familiar with one if not both PHP and Javascript if you build shortcodes. So it should magically work this way forever if you knowingly exploit an obvious bug don&#039;t get upset when it gets patched. if you need the ability to add more general text don&#039;t use a self closing shortcode let the random text go in the body of the shortcode.&lt;/p&gt;
&lt;p&gt;Honestly I have code that uses nested shortcodes this is an edge case not covered any where I have seen maybe this will come to bite me one day. It is created by having one shortcode nested in another shortcode &lt;code&gt;[shortcode-1][shortcode-2][/shortcode-1]&lt;/code&gt;. Then doing &lt;code&gt;apply_filters( &#039;the_content&#039;, $sc_2_content );&lt;/code&gt; before returning the value of &lt;code&gt;[shortcode-2]&lt;/code&gt;. This may solve some of the issues more elegantly than putting a large amount of weird content into shortcode attributes. Maybe one day I will have to fix this due to a security update but it more extends the default use case rather than adds a new layer of complexity to it. You have to remember that shortcodes are found by &lt;a href=&quot;http://www.regular-expressions.info/&quot;&gt;Regular Expressions&lt;/a&gt;. If you have ever done any work with them you know how frustrating it can be to get them to work correctly. Especially if there is a large amount of unknown unknowns so the fact that shortcodes work at all in the first place is awesome.&lt;/p&gt;
&lt;p&gt;I seriously wish there was some way to have avoided this issue I never want to see someone have to scramble to update their theme or plugin. This makes auto updates look bad since WordPress updates and your site breaks. You&#039;ll automatically blame WordPress not the incorrectly coded theme or plugin. Even me as a developer may at first blame the issue on the WordPress update granted I would put the effort into finding the real cause. I know it is tough since you where kind of blind sided but don&#039;t blame core it was a mistake on your part.&lt;/p&gt;
&lt;p&gt;This is just my personal views I may be looking at it from the wrong angle. I definitely do not have any commercial plugins or themes so from the support side of things I do not have to worry too much. I do have a few plugins on wp.org and yeah dealing with support issues is no fun. I also have a large amount of sites that I have built and maintain and none of them had any issues. This happens when building software that large groups of people use the fact that WordPress does not release breaking changes nearly at all is in its own way awesome and horrible at the same time. However thats a story for a different time.&lt;/p&gt;
&lt;p&gt;I would love to hear you opinions about use cases and experiences I have not covered.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 25 Jul 2015 08:30:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/25/shortcode-api-youre-doing-it-wrong</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/25/shortcode-api-youre-doing-it-wrong</guid>
											</item>
					<item>
				<title>WordCamp USA City Chosen</title>
				<description>
					<![CDATA[
					&lt;p&gt;So the WordCamp USA city has been chosen Philadelphia &lt;a href=&quot;http://ma.tt/2015/07/wcus-philadelphia/&quot;&gt;Matt Mullenweg announced it today&lt;/a&gt;. I was really hoping for Chicago since it is close and I really like it up there. However Philadelphia I am sure will be a great place to hold the first and second WordCamp USA! Not sure if I will attend yet since I usually go to the San Fransisco one every year might as well visit a new city. They are handling it in an interesting way setting the host city to be the same for two years. It makes perfect logistical sense but I would like the variety too. We&#039;ll I hope to see you in Philly either this year or next.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Thu, 23 Jul 2015 21:36:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/23/wordcamp-usa-city-chosen</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/23/wordcamp-usa-city-chosen</guid>
											</item>
					<item>
				<title>My 5ish Favorite Atom Plugins</title>
				<description>
					<![CDATA[
					&lt;p&gt;So I have been migrating from using &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text&lt;/a&gt; lately after using it exclusively for the past 3 or so years to &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;. So I figured I would document my current 5 or so favorite plugins. I am sure a lot of them have ended up on multiple top 5 lists but hopefully you will find a new one.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://atom.io/packages/atom-beautify&quot;&gt;Atom Beautify&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Atom Beautify makes beautifying your code really easy. Sublime Text had some beautification plugins but none that where all in one place. The only issue is I have not been able to figure out the PHP beautifier to make it work how I like. I am sure I will be able to eventually. The Javascript and SCSS beautifiers are really helpful especially since they use the same configuration files as my linters. It also would be nice if you disabled a language that the options for that language would go away. However I still am definetly a fan of this plugin especially since it has support for almost any language I could ever want.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://atom.io/packages/docblockr&quot;&gt;Dockblockr&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Dockblockr helps adding Doc Blocks to your code it supports both Javascript and PHP among other languages. This is basically a port of the Sublime Text plugin which was one of my favorites on Sublime Text as well. It makes it super easy to add a doc block just type {/**} + {tab} on the line before a structural element. It will handle setting up your parameter values, return value, and whatever else you need. You are commenting your code right? Right?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/dockblockr.png&quot; alt=&quot;Dockblockr Example&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://atom.io/packages/linter&quot;&gt;Linter&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Linter is an excellent code linter for Atom. I liked the &lt;a href=&quot;http://www.sublimelinter.com/en/latest/&quot;&gt;SublimeLinter&lt;/a&gt; plugin for ST3 and this one functions much in the same way. It handles all of the repetitive core tasks that new linters can extend. I also prefer the way it displays the errors over that of SublimeLinter. In both SublimeLinter and Linter both show the lines that have issues with dots in the gutter. However I never liked the option to display all of the errors on save since it would open the command palette and to continue editing you would have to dismiss it. Linter handles this by listing all of the errors in a text area at the bottom of the editor so it is not in your immediate field of vision but it is still annoying enough so you do not dismiss it. You also get the error on the current line as a tooltip as well which helps when fixing a large set of issues. I personally use &lt;a href=&quot;https://atom.io/packages/linter-jshint&quot;&gt;JSHint&lt;/a&gt;, &lt;a href=&quot;https://atom.io/packages/linter-jscs&quot;&gt;JSCS&lt;/a&gt;, &lt;a href=&quot;https://atom.io/packages/linter-scss-lint&quot;&gt;SCSSLint&lt;/a&gt;, &lt;a href=&quot;https://atom.io/packages/linter-phpcs&quot;&gt;PHPCS&lt;/a&gt;, and &lt;a href=&quot;https://atom.io/packages/linter-js-yaml&quot;&gt;YAML&lt;/a&gt; however there is a large &lt;a href=&quot;http://atomlinter.github.io/&quot;&gt;list of supported linters&lt;/a&gt;. You are linting your code right? Right?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/linter.png&quot; alt=&quot;Linter Example&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://atom.io/packages/file-icons&quot;&gt;File Icons&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;File Icons is an excellent idea display a small simple icon to show what the type of file is. I know I could just read the extension but this just seems like a much easier way to figure it out by a quick glance. I had started to use a theme which include the same thing prior to leaving sublime. However it is so much nice that I am not tied to any one theme since I spend at least 8 hours every day staring at my editor its nice to change it up once in a while.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/file-icons.png&quot; alt=&quot;File Icons Example&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://atom.io/packages/minimap-pigments&quot;&gt;Pigments&lt;/a&gt;/&lt;a href=&quot;https://atom.io/packages/minimap-pigments&quot;&gt;Minimap Pigments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Pigments basically highlights any color in your files the actual color. So no more guessing is the hex value the correct one you can just see it. It also helps with autocompletion of your colors and variables which is awesome. It also has a plugin for the minimap as well which is just kind of cool. I had a plugin like this on ST3 though it seemed to conflict with some other plugins and did not have the autocomplete for colors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/pigments.png&quot; alt=&quot;Pigments Example&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;https://atom.io/packages/atom-wordpress&quot;&gt;WordPress for Atom&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WordPress for Atom is basically WordPress completions which is very helpful since my primary focus is WordPress. I also like this one over the ST3 version since it does not add semicolons at the end of every function. Sometimes you need to nest a function within a function and it is almost more effort to remove the semicolon then to add it. I also believe there are plugins that will handle adding a semicolon to every line.&lt;/p&gt;
&lt;p&gt;Well, there you have it another top 5ish of my favorite blanks for my blank. I just figured I would share since eI have been enjoying messing with Atom a lot lately.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 19 Jul 2015 20:46:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/19/my-5ish-favorite-atom-plugins</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/19/my-5ish-favorite-atom-plugins</guid>
											</item>
					<item>
				<title>WP Better Attachments v1.3.11 Released</title>
				<description>
					<![CDATA[
					&lt;p&gt;WP Better Attachments version 1.3.11 has been relased to &lt;a href=&quot;https://wordpress.org/plugins/wp-better-attachments/&quot;&gt;wordpress.org&lt;/a&gt;. If you have a question feel free to ask it on the &lt;a href=&quot;https://wordpress.org/support/plugin/wp-better-attachments&quot;&gt;support forums&lt;/a&gt; or open an &lt;a href=&quot;https://github.com/DHolloran/wp-better-attachments/issues/&quot;&gt;issue on Github&lt;/a&gt;. You can find the list of changes below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added use_caption_for_title to build_attachment_list function/shortcode. Props @mwarwick.&lt;/li&gt;
&lt;li&gt;Added a second add attachments button to the bottom of meta box. Props @mwarwick.&lt;/li&gt;
&lt;li&gt;Fixed undefined variable PHP warning.&lt;/li&gt;
&lt;li&gt;Updates the survey notification with thank you message.&lt;/li&gt;
&lt;/ul&gt;
					]]>
				</description>
				<pubDate>Sat, 18 Jul 2015 13:55:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/18/wp-better-attachments-released</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/18/wp-better-attachments-released</guid>
											</item>
					<item>
				<title>WPBA Thoughts and Road Map</title>
				<description>
					<![CDATA[
					&lt;h3&gt;Update (7/18/2015) Survey Responses&lt;/h3&gt;
&lt;p&gt;Thank you to all who participated in the survey about WP Better Attachments Re-write. It did help to reinforce a few things I already thought. Primarialy the cropping portion probably would be best spun of as an add on. That would make it a little more easier to use as well as maintain. I will also be looking into external atachments and extending the WordPress attachments to allow for attaching media to multiple posts. I was actually surprised that there were some yes responses to paying for consistent updates, I appreciate that. I do not have any immediate plans for adding any sort of fees but feel free to donate through my &lt;a href=&quot;https://pledgie.com/campaigns/20476&quot;&gt;Pledgie campaign&lt;/a&gt;. In all it went over pretty well basically re-inforcing almost every idea I had, thanks again. You can view the &lt;a href=&quot;https://www.surveymonkey.com/results/SM-Y2SKS2DY/&quot;&gt;final results here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;@include(&#039;_partials.wpba-inline-newsletter-signup&#039;)&lt;/p&gt;
&lt;h3&gt;Thoughts and Road Map&lt;/h3&gt;
&lt;p&gt;So I have been attempting to rewrite WPBA so it would be less of a frustration to update on my part since WordCamp SF 2013, I believe if was July/August of 2013.  If you have been under a rock it is now 2015, I keep feeling stuck because of some of the decisions I made before having the experience to make the correct decision.&lt;/p&gt;
&lt;p&gt;One of the main pain points is the settings architecture I  really want to do away with if for the most part and move more towards filters.  I honestly wouldn&#039;t mind maintaining a settings page with the filters so less advanced users wouldn&#039;t have to touch the code.  Which I understand is a big road block for a non-developer, really it&#039;s a big road block even for many developers, think fear of CLI its just code in the end.  However migrating to a different settings solution requires writing database migration logic which I just cannot seem to force myself to do yet.&lt;/p&gt;
&lt;p&gt;I also kind of regret bundling the cropping functionality into the plugin I really think the cropping editor is a helpful thing but it could probably be better maintained as an add on or a separate plugin.  We currently use a VIP cropping plugin which does the same thing the only downfall is if wordpress.com is down you loose your images.   It would be a minimum nice to totally disable the Crop Editor, or any other feature for that point, by a simple filter like &lt;code&gt;add_filter( &#039;wpba_enable_crop_editor&#039;, &#039;__return_false&#039; );&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I also need to have a better strategy on support I think I really got burnt out after the first 6 months or so of maintaining the plugin. I threw in quite a few features some of my own wanting and some requested so this makes it much harder not knowing what is used and what is not.  I was looking at the stats for the plugin recently and it says there are over 5,000 active installs granted that view seems to have disappeared from wordpress.org so not exactly sure what it is now.  It made me think I really need to get back into supporting this plugin but I believe it requires a full overhaul of all the pieces.&lt;/p&gt;
&lt;p&gt;I want WPBA to be as easy to use as something like WooCommerce which is an extremely complex plugin but allows you to tweak and customize almost everything.  Honestly adding a filter or action to tweak something is extremely easy. What is not easy is the maintenance and documentation that goes along with it.&lt;/p&gt;
&lt;p&gt;I think the worst thing about this is I have not run into the use case I originally built the plugin for which was to add different sliders to different pages.  Really I have not built anything in the last year that required attachments. Maybe I just have made decisions differently usually I use a custom post type instead but sitting hear thinking maybe the attachments route may have been a better solution.  I do not know maybe I should start using WPBA again it would help to motivate the development.&lt;/p&gt;
&lt;p&gt;Thank you for your support I still have received 5 star reviews recently so apparently even though development has pretty much ceased people are still benefiting from it. If you would like to see the planned features for WP Better Attachments 1.4.0, it might need to be 2.0, you can check out the list on &lt;a href=&quot;https://github.com/DHolloran/wp-better-attachments/issues/54&quot;&gt;GitHub&lt;/a&gt;. If you haven&#039;t already I would appreciate it if you could fill out this short survey &lt;a href=&quot;https://www.surveymonkey.com/s/K9LSWYX&quot;&gt;https://www.surveymonkey.com/s/K9LSWYX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks,
Dan&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 18 Jul 2015 11:36:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/18/wpba-thoughts-and-road-map</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/18/wpba-thoughts-and-road-map</guid>
											</item>
					<item>
				<title>Check Out Ghost Inspector</title>
				<description>
					<![CDATA[
					&lt;p&gt;I saw this cool tool the other day on Twitter &lt;a href=&quot;https://ghostinspector.com&quot;&gt;Ghost Inspector &lt;/a&gt; which allows your to record your actions or setup by drag/drop website regression testing. I&#039;ve done some work with &lt;a href=&quot;http://nightwatchjs.org&quot;&gt;Nightwatch.js&lt;/a&gt; which helps writing tests for &lt;a href=&quot;http://www.seleniumhq.org&quot;&gt;Selenium&lt;/a&gt; which allows you test across all the major browsers.&lt;/p&gt;
&lt;p&gt;Honestly writing regression tests can be kind of difficult. As well as short of watching the tests pass not too much fun. That&#039;s why I think &lt;a href=&quot;https://ghostinspector.com&quot;&gt;Ghost Inspector &lt;/a&gt; is worth a look. Might make it easier for small teams to do more wide scale regression testing on their sites. They seem to have a wide range of &lt;a href=&quot;https://ghostinspector.com/docs/integration/&quot;&gt;tools you can integrate&lt;/a&gt; with so hopefully getting started will be quick and easy. Check out &lt;a href=&quot;https://ghostinspector.com&quot;&gt;Ghost Inspector &lt;/a&gt;  today.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 18 Jul 2015 09:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/18/check-out-ghost-inspector</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/18/check-out-ghost-inspector</guid>
											</item>
					<item>
				<title>Setting Up a Jekyll Blog - Part 2</title>
				<description>
					<![CDATA[
					&lt;h3&gt;Adding Your First Post.&lt;/h3&gt;
&lt;p&gt;So we are already to write our first post. To create a new post all you have to do is make a new file in the _posts directory and title it &lt;code&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;. If you prefer to start all your posts as drafts you just need to create a new file in the _drafts directory and title it &lt;code&gt;title.MARKUP&lt;/code&gt;. Once you have completed the draft you can move it to the _posts folder and add the &lt;code&gt;YEAR-MONTH-DAY-&lt;/code&gt; to the beginning of the file name.&lt;/p&gt;
&lt;p&gt;So lets say the title of our first blog post is &amp;quot;My First Jekyll Blog Post&amp;quot; then the name of the post would be &lt;code&gt;2015-07-14-my-first-jekyll-blog-post.md&lt;/code&gt; or if it is a draft then it would just be &lt;code&gt;my-first-jekyll-blog-post.md&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then you need to add the &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt; which is a way to tell Jekyll a little more about what this file is. At the top of your newly created file you can add this.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
layout: post
title: My First Jekyll Blog Post
---&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default Jekyll supports &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot;&gt;Markdown&lt;/a&gt; but you can add formatters for &lt;a href=&quot;http://jekyllrb.com/docs/plugins/#converters-1&quot;&gt;many different formats&lt;/a&gt;. You can also access media assets in a folder such as assets using the &amp;#123;&amp;#123; site.url &amp;#125;&amp;#125; /assets/screenshot.jpg variable in the post.
&lt;code&gt;![My helpful screenshot](/uploads/screenshot.jpg)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Building Your Blog.&lt;/h3&gt;
&lt;p&gt;There are a couple options depending on if you are planning on hosting through &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; or somewhere else. Either way there is a build command that just builds the required files for the blog. Then there is a server command that builds the site and then servers it up on &lt;a href=&quot;http://127.0.0.1:4000/&quot;&gt;http://127.0.0.1:4000/&lt;/a&gt; while watching for changes. Both the build and server command have a --drafts flag that will also build/serve your drafts as your latest posts. Which makes it easy for writing your draft posts just make sure not to deploy the sites directory right after building with the --drafts flag.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Default Jekyll build.
jekyll build;
# Jekyll serve on http://127.0.0.1:4000/.
jekyll serve;
# Jekyll build drafts.
jekyll build --drafts;
# Jekyll serve on http://127.0.0.1:4000/ drafts.
jekyll serve --drafts;

# Github Pages Jekyll build.
bundle exec jekyll build;
# Github Pages Jekyll serve on http://127.0.0.1:4000/.
bundle exec jekyll serve;
# Github Pages Jekyll build drafts.
bundle exec jekyll build --drafts;
# Github Pages Jekyll serve on http://127.0.0.1:4000/ drafts.
bundle exec jekyll serve --drafts;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main difference between the default Jekyll and Github Pages is that with Github Pages you use Bundler as well. This way you have the same environment as Github Pages.&lt;/p&gt;
&lt;h3&gt;Front matter&lt;/h3&gt;
&lt;p&gt;So I am still learning about front matter my self. However I just view it as meta you add to the post. I come from the WordPress world and it would be the equivalent of custom meta. Without the having to add form fields, save, sanitize, retrieve, and display the data. You can find more information about &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt; in the docs. The built in types of Front Matter are layout, permalink, published, category, categories and tags. You are free to add anything you want so you can use it in your templates. You can even set defaults in your &lt;code&gt;_config.yaml&lt;/code&gt; so you do not have to repeat yourself. An example of what I include in mine right now is below and you can find more in the &lt;a href=&quot;http://jekyllrb.com/docs/configuration/#front-matter-defaults&quot;&gt;documentation&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;defaults:
  -
    scope:
      path: &quot;&quot; # an empty string here means all files in the project
    values:
      layout: &quot;default&quot;
      author: &quot;Dan Holloran&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now we can get started sharing all of our knowledge with the world one post at a time. Up next I will be diving more into editing the different templates in Jeykll. Jeykll uses a templating language called &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;Liquid&lt;/a&gt; developed at &lt;a href=&quot;http://www.shopify.com/&quot;&gt;Shopify&lt;/a&gt;. If you have used any other templating language such as &lt;a href=&quot;https://mustache.github.io/&quot;&gt;Mustache&lt;/a&gt;, &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt;, &lt;a href=&quot;http://twig.sensiolabs.org/&quot;&gt;Twig&lt;/a&gt;, etc. it should be fairly easy to pickup.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Fri, 17 Jul 2015 15:38:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/17/setting-up-a-jekyll-blog-part-2</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/17/setting-up-a-jekyll-blog-part-2</guid>
											</item>
					<item>
				<title>Setup Vhosts in MAMP</title>
				<description>
					<![CDATA[
					&lt;p&gt;Setting up Vhosts in MAMP is really easy. VHost is short for Virtual Host which is basically just a way to access multiple &amp;quot;sites&amp;quot; on a server. Instead of changing MAMP to point at the site you want and then accessing it through &lt;code&gt;http://localhost/&lt;/code&gt; you can access it from a custom domain. So lets get started.&lt;/p&gt;
&lt;p&gt;The first thing you will need to do is create a new file in &lt;code&gt;/Applications/MAMP/conf/apache/&lt;/code&gt; and name it &lt;code&gt;vhosts.conf&lt;/code&gt;. We will come back to this file in just a second so you can go ahead and keep it open. Next up you will want to include &lt;code&gt;vhosts.conf&lt;/code&gt; in &lt;code&gt;/Applications/MAMP/conf/apache/http.conf&lt;/code&gt;. I usually just add it at the end of the file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-apache&quot;&gt;NameVirtualHost *:80
Include /Applications/MAMP/conf/apache/vhosts.conf&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You will want to change the &lt;code&gt;*:80&lt;/code&gt; to &lt;code&gt;*:8888&lt;/code&gt; if you are using the MAMP defaults I prefer to set MAMP to the Apache defaults.&lt;/p&gt;
&lt;p&gt;Next you need to add a new Vhost to the &lt;code&gt;vhosts.conf&lt;/code&gt; you created earlier. Just like when we included the &lt;code&gt;vhosts.conf&lt;/code&gt; you will need to change the &lt;code&gt;*:80&lt;/code&gt; to &lt;code&gt;*:8888&lt;/code&gt;. You will need to update &lt;code&gt;myawesomesite&lt;/code&gt; to the name of your awesome site.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-apache&quot;&gt;# My Awesome Site
&amp;lt;VirtualHost *:80&amp;gt;
ServerName myawesomesite.dev
DocumentRoot /Applications/MAMP/htdocs/myawesomesite.com/
&amp;lt;Directory /Applications/MAMP/htdocs/myawesomesite.com/&amp;gt;
Options Indexes FollowSymLinks MultiViews
AllowOverride All
Order allow,deny
allow from all
&amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I prefer to follow the convention of using the production sites URL for a base to my sites folder directory and the local URL. So if your live site is &lt;code&gt;myawesomesite.com&lt;/code&gt; then your domain would be &lt;code&gt;myawesomesite.dev&lt;/code&gt; using the TLD of &lt;code&gt;.dev&lt;/code&gt; is definitely optional but it makes it easy to be consistent. I also set my site directory to &lt;code&gt;myawesomesite.com&lt;/code&gt; so 6 months down the road it is easy to match the site up to the production site.&lt;/p&gt;
&lt;p&gt;Also while we are at it you can add a localhost Vhost so you can add things like an &lt;code&gt;index.php&lt;/code&gt; of all your sites and a &lt;code&gt;phpinfo.php&lt;/code&gt; among other things.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-apache&quot;&gt;# Localhost
&amp;lt;VirtualHost *:80&amp;gt;
ServerName localhost
DocumentRoot /Applications/MAMP/htdocs/
&amp;lt;Directory /Applications/MAMP/htdocs/&amp;gt;
Options Indexes FollowSymLinks MultiViews
AllowOverride All
Order allow,deny
allow from all
&amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we will need to edit your hosts file at &lt;code&gt;/private/etc/hosts&lt;/code&gt; with an editor such as Vim, Nano, Sublime Text 3, Atom or any other text editor. Even though the &lt;code&gt;hosts&lt;/code&gt; does not have an extension it is still a file. In there you can add the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Vhosts
127.0.0.1 myawesomesite.dev&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You will need to add this for every Vhost that you add. You won&#039;t have to worry about the localhost since that is already defined by default.&lt;/p&gt;
&lt;p&gt;Now we just have to stop and start the MAMP server. As long as we have done everything correctly you while be able to access your Vhost at the domain you set in the Vhost. I would access My Awesome Site at &lt;a href=&quot;http://myawesomesite.com&quot;&gt;http://myawesomesite.com&lt;/a&gt;. One caveat to the domain name is if you want to access it with both &lt;code&gt;www.&lt;/code&gt; and no &lt;code&gt;www.&lt;/code&gt; you need to setup a separate vhost for &lt;code&gt;www.myawesomesite.com&lt;/code&gt;. If you know of a better way please let me know.&lt;/p&gt;
&lt;p&gt;Awesome there we go you have added your first of hopefully many Vhosts. To add a new one you will just have to copy the &lt;code&gt;&amp;lt;VirtualHost&amp;gt;&lt;/code&gt; block we added to the &lt;code&gt;vhosts.conf&lt;/code&gt;. Then  update the directory and the domain to whatever your new awesome site is.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Thu, 16 Jul 2015 19:37:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/16/setup-vhosts-in-mamp</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/16/setup-vhosts-in-mamp</guid>
											</item>
					<item>
				<title>Display PHP Errors in MAMP</title>
				<description>
					<![CDATA[
					&lt;p&gt;Granted you never make any mistakes I am sure. However just in case you do you can  easily enable error reporting on MAMP to help catch the obvious ones. All you have to do is edit the &lt;code&gt;php.ini&lt;/code&gt; in the MAMP directory &lt;code&gt;/Applications/MAMP/conf/php{Version}/php.ini&lt;/code&gt;. If you&#039;re not sure what PHP version you are using you can find it in the MAMP at Preferences&amp;gt;PHP.&lt;/p&gt;
&lt;p&gt;Just open the &lt;code&gt;php.ini&lt;/code&gt; file in your favorite text editor like Sublime Text or Atom then find the line that starts with &lt;code&gt;display_errors =&lt;/code&gt;. By default display errors is set to off &lt;code&gt;display_errors = Off&lt;/code&gt; all you have to do is change the Off to On &lt;code&gt;display_errors = On&lt;/code&gt;.  Then all you have to do is stop and then start the MAMP server. The next time you have a fatal error you won&#039;t be greeted by the white screen of death.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Wed, 15 Jul 2015 20:16:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/15/display-php-errors-in-mamp</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/15/display-php-errors-in-mamp</guid>
											</item>
					<item>
				<title>Setting Up a Jekyll Blog - Part 1</title>
				<description>
					<![CDATA[
					&lt;p&gt;I found Jeykll fairly easy to setup not quite 5 minute setup easy but not to bad. Honestly I spent most of the time reading the documentation which is simple and excelent. I did want to go through the steps of how to setup your own Jeykll blog. I am going to assume some level of comfortability with the command line and non-Windows OS.&lt;/p&gt;
&lt;h3&gt;Initial Setup&lt;/h3&gt;
&lt;p&gt;We first have to setup a few dependencies such as Ruby and Jeykll.&lt;/p&gt;
&lt;p&gt;I prefer to install Ruby via RVM but any other method is fine more options can be found &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;here&lt;/a&gt;
&lt;code&gt;\curl -sSL https://get.rvm.io | bash -s stable --ruby&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you have Ruby installed you can install Jeykll
&lt;code&gt;gem install jekyll&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now we are ready to create a new Jeykll blog.
&lt;code&gt;jekyll new my-blog&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;(Optional) Github Pages setup&lt;/h3&gt;
&lt;p&gt;Since your already using Git and Github you might as well host your blog there. Hey its free and simple don&#039;t have to worry about hosting.
If you are planning on deploying to &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; you can install the &lt;a href=&quot;https://github.com/github/pages-gem&quot;&gt;Github Pages Gem&lt;/a&gt; via &lt;a href=&quot;http://bundler.io/&quot;&gt;Bundler&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install bundler
&lt;code&gt;gem install bundler;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a new Gemfile in the &lt;code&gt;my-blog&lt;/code&gt; directory.&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;gem &#039;github-pages&#039;&lt;/code&gt; into the Gemfile.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;bundle install&lt;/code&gt; in the &lt;code&gt;my-blog&lt;/code&gt; directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting up _config.yml&lt;/h3&gt;
&lt;p&gt;Here is some of the main configuration I did granted there are way more things you can do. I am currently just using the default theme I hope to update it soon. You can find a list of all the options &lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;# Site settings
title: Your Site Name
email: youremail@provider.com
description: &amp;gt; # this means to ignore newlines until &quot;baseurl:&quot;
  My awesome blog description!
baseurl: &quot;&quot; # the subpath of your site, e.g. /blog/
url: &quot;http://myurl.com&quot; # the base hostname &amp;amp; protocol for your site
twitter_username: username
github_username:  username

# Excludes files from the site output
exclude:
  - node_modules
  - Gemfile
  - Gemfile.lock
  - gulpfile.js
  - LICENSE
  - package.json
  - README.md

# Outputting
permalink: pretty # /:categories/:year/:month/:day/:title/
timezone: America/Chicago # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
paginate: 5 # How many posts to display per page on the blog roll
highlighter: pygments # Requires python to be installed

# Build settings
markdown: kramdown&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Wrapping up&lt;/h3&gt;
&lt;p&gt;Ok we now have a Jeykll blog setup and ready to go!  That was not to hard was it? Next up we will add our first post and some &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;Front Matter&lt;/a&gt; which is where Jeykll becomes really powerful.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 14 Jul 2015 20:21:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/14/setting-up-a-jekyll-blog-part-1</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/14/setting-up-a-jekyll-blog-part-1</guid>
											</item>
					<item>
				<title>Moving From Sublime to Atom</title>
				<description>
					<![CDATA[
					&lt;p&gt;I try to keep a semi-open mind when I see a new tool like Atom.  I had tried a few new editors such as Brackets which was really cool but still had some growing up to do.  I also tried PHPStorm I kind of miss using a full fledged IDE but I really want something a little more flexible.  I still plan on using Sublime since it does still have a little better text searching and editing than Atom.  Also Atom is a little buggier than Sublime but it is under really active development which is something Sublime seems to be iffy on.&lt;/p&gt;
&lt;p&gt;Atom has almost all of the same benefits of Sublime with a few exceptions.  I really miss being able to search with &lt;code&gt;cmd&lt;/code&gt;+&lt;code&gt;p&lt;/code&gt; not only for files but other items as well. You can search for text with a &lt;code&gt;#{text}&lt;/code&gt;, go to line with &lt;code&gt;:{line}&lt;/code&gt;, and go to symbol with &lt;code&gt;@{symbol}&lt;/code&gt;.  Granted Atom can still do the go to line with &lt;code&gt;ctrl&lt;/code&gt;+&lt;code&gt;g&lt;/code&gt; which feels a little strange now and yoy can go to symbol with &lt;code&gt;cmd&lt;/code&gt;+&lt;code&gt;r&lt;/code&gt;.  However I have not found a better soultion to the search for text than &lt;code&gt;cmd&lt;/code&gt;+&lt;code&gt;f&lt;/code&gt; which does not provide the same value as Sublimes text search.&lt;/p&gt;
&lt;p&gt;I also really miss &lt;a href=&quot;https://medium.com/@evnbr/coding-in-color-3a6db2743a1e&quot;&gt;semantic highlighting&lt;/a&gt; which Atom currently has it for JavaScript via the &lt;a href=&quot;https://atom.io/packages/language-javascript-semantic&quot;&gt;Launguage JavaScript Semantic&lt;/a&gt; package.  However it currently does not have support for any other languages other than JavaScript.  Hopefully more will be added in the future or maybe I should just build and they will come...lol&lt;/p&gt;
&lt;p&gt;The final big thing that Sublime still has over Atom is the speed honestly I may be partial to Sublime but I have never used a faster editor.  Granted it has some issues with huge text files but other than that it never slows down.  Even with a large amount of plugins installed doing all types of things.  I am sure this is something we will see improved in the future since Atom just hit &lt;a href=&quot;http://blog.atom.io/2015/06/25/atom-1-0.html&quot;&gt;1.0.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now for the spots were Atom shines, the biggest for me is the feeling of active development.  Sublime Text feels like it has somewhat stagnated over the past year I only remember one update granted it brought one of the best improvements it could have being able to remember words in spell check. Also the plugin landscape is roughly the same as Sublime Text in terms of quality plugins that I have an interest in.&lt;/p&gt;
&lt;p&gt;I also like the mixture of a JSON/Coffescript config and a UI to handle settings changes.  I sometimes feel that having to configure your editor through JSON turned some developers off of Sublime Text at first.  Granted it was the first one I know of to make this change outside of the terminal. Atom followed in Sublime&#039;s foot steps in this and many other ways. Really Atom is almost Sublime Text built in HTML/CSS/JS.&lt;/p&gt;
&lt;p&gt;Which brings me to another big strength and possibly a big weakness in a sense everything is built in HTML/CSS/JS. This will allow a larger amount of developers to add and maintain plugins as well as themes. No more editing XML files for syntax themes just edit the CSS/Less. Granted to build plugins you will need some experience with Javascript and Node which honestly is less of a hurdle than Python.&lt;/p&gt;
&lt;p&gt;In all I honestly think either Sublime Text or Atom are extremely good options if you are not interested in a full fledged IDE. I personally chose to jump ship to Atom on the fact it feels more actively developed. As a maintainer of projects that have fallen by the wayside I know how difficult it is to keep working on a project.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 12 Jul 2015 20:00:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/12/moving-from-sublime-to-atom</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/12/moving-from-sublime-to-atom</guid>
											</item>
					<item>
				<title>Moving From WordPress to Ghost to Jekyll</title>
				<description>
					<![CDATA[
					&lt;p&gt;So I had previously moved my blog from WordPress to Ghost.  I really like the fact that ghost is a lot lighter and you can write your posts in markdown by default.  For hosting a blog I almost feel for a developer WordPress is overkill obviously for a general user Jekyll would be way too difficult.  I spend most of my day in a code editor and a large amount in a terminal.  So it is not much of a stretch to use a static site generator like Jeykll for me.&lt;/p&gt;
&lt;p&gt;I just need a simple blog that is fast, easy to update and allows me to write in markdown.  Well Ghost somewhat accomplishes the fast part it feels faster than WordPress.  Ghost also accomplishes the easy to update part since it is primarily handle bars templates which is a lot closer to simple pure HTML than WordPress.  Plus I work in WordPress all day long and really do not want to come home and edit a WordPress blog.  I liked the Ghost markdown editor granted it was a little buggy and seemed to choke on larger amounts of text still it made the blogging experience nice.&lt;/p&gt;
&lt;p&gt;However Ghost still let something to be desired so I started looking into to Jeykll which has much of the same benefits of Ghost fast, easy to update using Liquid templates/HTML and Markdown by default.  Granted you give up a small amount of ease of use for the speed of a static site.  It was a little harder on the initial setup but now that it is I don&#039;t feel like it is harder to update. I prefer to write in a text editor most of the time and then just transfer the text into the editor.  Now instead of copying/pasting it and making sure everything carried over correctly. I can just make a commit and push it to Github where I also host it using Github Pages.&lt;/p&gt;
&lt;p&gt;Honestly I think the hardest part about setting up a Jeykll blog is to install Ruby.  Which is really fairly easy on a Mac or any type of Linux.  I believe I&#039;ve seen a Windows installer but if I had to use the Windows command prompt I would just have given up.  Honestly I am surprised when a developer doesn&#039;t already have ruby and node installed among other things I  don&#039;t know.  I am working on a step by step how I setup Jeykll and Github pages it probably be a good Idea to add installing ruby too.&lt;/p&gt;
&lt;p&gt;Well, this has been my first post on my shinny new Jeykll blog which currently has the stock theme on it.  I may get around to changing the theme or I may just put that energy into writing more.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Fri, 10 Jul 2015 19:24:00 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/07/10/moving-from-wordpress-to-ghost-to-jekyll</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/07/10/moving-from-wordpress-to-ghost-to-jekyll</guid>
											</item>
					<item>
				<title>Check Out Hyperpolygot</title>
				<description>
					<![CDATA[
					&lt;p&gt;If you&#039;ve been curious how one programming languages syntax matches with another then you should check out &lt;a href=&quot;http://hyperpolyglot.org&quot;&gt;Hyperpolygot&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was kind of amazed how close Javascript, PHP, Python, and Ruby are on a syntax level.  It really seems that at a high level it maters more about the community and the ideals than the syntax when choosing a language.  Granted every job requires a specific set of tools and this helps show how you can pick up another language easier.&lt;/p&gt;
&lt;p&gt;The hardest part is finding a project that forces you to get outside your comfort zone and pick up a new language.  I&#039;ve tried all four and I feel most comfortable in PHP.  I really do like the asynchrony of Javascript/Node and it feels a little closer to PHP than the other two.  I  don&#039;t have that much experience with Ruby and Python however outside of just hacking around.
I do feel it is easy to jump from one language to another and be able to work your way through it. Even if you&#039;re not extremely efficient from the get go.&lt;/p&gt;
&lt;p&gt;Definitely check out check out &lt;a href=&quot;http://hyperpolyglot.org&quot;&gt;Hyperpolygot&lt;/a&gt; it is really interesting.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 04 Apr 2015 15:47:01 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/04/04/check-out-hyperpolygot</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/04/04/check-out-hyperpolygot</guid>
											</item>
					<item>
				<title>Why I Decided to Use a Themeforest Theme</title>
				<description>
					<![CDATA[
					&lt;p&gt;I usually get the itch to revamp my personal website every 6 months to a year.  I tend to spend a weekend hacking away at my theme and I get about 85% done before feeling stuck.  This in turn makes viewing the site a chore which in turn makes it hard to blog. So the majority of the posts I have written in the past are about the redesign of the site. Honestly I no longer feel like my website has to have a theme built by myself.&lt;/p&gt;
&lt;p&gt;So I decided to go the &lt;a href=&quot;http://themeforest.net/&quot;&gt;Themeforest&lt;/a&gt; route this time and short of having to tweak a few small things. Mainly the theme loaded 10+ assets that could have been concatenated other than that I found a theme I was happy with &lt;a href=&quot;http://themeforest.net/item/anima-multipurpose-ghost-theme/9601972&quot;&gt;Anima&lt;/a&gt;.  It had the basic clean styling I wanted, it is responsive, has Disqus integration which I&#039;ve used on WordPress, social share features, page change animations and more.&lt;/p&gt;
&lt;p&gt;So this time instead of putting all of my energy into a theme that really is not that important in the larger scheme of things. I can put that energy into writing and building other things I actually want to build.  So far it has gone fairly well but it is just the beginning and compared to WordPress themes Ghost themes are extremely cheap. I am actually really happy with the decision it&#039;s really nice not having to worry about your theme.  Since I spend all day worrying about other peoples themes.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Wed, 01 Apr 2015 01:26:14 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/04/01/why-i-decided-to-use-a-themeforest-theme</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/04/01/why-i-decided-to-use-a-themeforest-theme</guid>
											</item>
					<item>
				<title>Easily Retrieve Browser Information</title>
				<description>
					<![CDATA[
					&lt;p&gt;As we all know not all browsers like to behave the same.  Also many clients just click the Big Blue E and do not know what browser they use.  Such and such is broken in IE, Firefox, etc. Obviously with the rise of the ever green browsers this is not always an issue but when it is &lt;a href=&quot;http://yourbrowser.is/&quot;&gt;http://yourbrowser.is/&lt;/a&gt; is your best friend.  It allows you to send your client a specific link to send you important information about your clients browser.&lt;/p&gt;
&lt;p&gt;This is amazing because the issue is not always the browser it could be the way that the OS handles something. This way you can use a tool like &lt;a href=&quot;http://www.browserstack.com/&quot;&gt;Browserstack&lt;/a&gt; to get the closest configuration as possible to the browser the issue happened in. This will definitely help when tracking down those fun ghost in the machine type bugs impossible to replicate even though you can physically see it happening on your clients machine. So I suggest you head over there right now and try it out.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 28 Mar 2015 22:58:24 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/28/easily-get-your-clients-browser-information</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/28/easily-get-your-clients-browser-information</guid>
											</item>
					<item>
				<title>What I Miss From WordPress &amp;amp; What Ghost Does Better</title>
				<description>
					<![CDATA[
					&lt;p&gt;I started compiling this list when I first decided to switch from WordPress to Ghost for my personal blog.  Just a short list of what I do and do not miss from WordPres, might help if you are trying to make the decision on which to use.&lt;/p&gt;
&lt;h2&gt;What I Miss&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scheduled posts&lt;/li&gt;
&lt;li&gt;Large established community&lt;/li&gt;
&lt;li&gt;Large robust feature set&lt;/li&gt;
&lt;li&gt;Post preview&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;li&gt;Admin bar&lt;/li&gt;
&lt;li&gt;Simple TinyMCE (Would be nice to not have to remember all of Markdown)&lt;/li&gt;
&lt;li&gt;Familiarity (WordPress just feels like home)&lt;/li&gt;
&lt;li&gt;Spellcheck (Granted it is not natively supported but Chromes spellcheck seems to be disabled in Ghost)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What I Don&#039;t Miss&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Plugins (Ya it&#039;s a love hate relationship)&lt;/li&gt;
&lt;li&gt;The dashboard&lt;/li&gt;
&lt;li&gt;TinyMCE&lt;/li&gt;
&lt;li&gt;Track/SVN&lt;/li&gt;
&lt;li&gt;Being able to easily accidentaly publish a post.&lt;/li&gt;
&lt;li&gt;Not being able to use &lt;code&gt;cmd+s&lt;/code&gt; to save&lt;/li&gt;
&lt;/ul&gt;
					]]>
				</description>
				<pubDate>Sun, 22 Mar 2015 23:51:05 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/22/what-i-miss-from-wordpress</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/22/what-i-miss-from-wordpress</guid>
											</item>
					<item>
				<title>How I (Almost...) Setup My Ghost Pro Custom Domain Name</title>
				<description>
					<![CDATA[
					&lt;p&gt;I was going to do a writeup about how I setup a Ghost Pro custom domain the details below almost worked.  I just love how DNS and the internetz works, you change something it changes something and everything works just nicely.  Then you go and check it the next day and the whole world has exploded. So long story short I gave up and decided to just forward the domain but I wanted to post this for fun. Feel free to post a solution or ideas in the comments below.&lt;/p&gt;
&lt;h3&gt;How I almost setup my domain...&lt;/h3&gt;
&lt;p&gt;I just setup my Ghost pro account and had some issues getting the domain to work without the www I tried following option B in the &lt;a href=&quot;https://ghost.org/blogs/domains/#setup&quot;&gt;Docs&lt;/a&gt; by using &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt; as somewhat of a middle man.&lt;/p&gt;
&lt;p&gt;This didn&#039;t work for me not sure if I messed up the setup or what but no matter what the DNS wouldn&#039;t change. I tried forwarding the domain with no luck maybe I am just bad at this DNS/Server stuff, I am a developer not Dev Ops luckily.&lt;/p&gt;
&lt;p&gt;So I was able to update my main A Records through &lt;a href=&quot;https://www.hover.com/&quot;&gt;Hover&lt;/a&gt;  to point to my IP Address.  I got that by running &lt;code&gt;ping danholloran.ghost.io&lt;/code&gt; in the terminal, sure there are other ways to get it. Then I set up a CNAME record pointing @ to danholloran.ghost.io.  Then I set a forward to &lt;a href=&quot;http://danholloran.ghost.io&quot;&gt;http://danholloran.ghost.io&lt;/a&gt; then finally added danholloran.com to my Ghost blog.&lt;/p&gt;
&lt;p&gt;Not sure if this is the correct way to do it but it seems to &lt;em&gt;(almost)&lt;/em&gt; work yay!!!  I so hate setting up DNS and servers I just want write code all night and push changes every day.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Fri, 20 Mar 2015 13:20:55 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/20/setup-ghost-pro-custom-domain-name</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/20/setup-ghost-pro-custom-domain-name</guid>
											</item>
					<item>
				<title>St. Louis WordCamp 2015 Notes</title>
				<description>
					<![CDATA[
					&lt;p&gt;In all WordCamp 2015 was definetly interesting. I thought that the Cain and Obeland in the Morning! &amp;quot;show&amp;quot; was pretty funny.  I think my favorite talk of the day was Atomic Design Principles, I&#039;ve read about it before and semi-practice it even though I could do something like that better.  I also like the podcasting panel as well it was rather informative and a nice change of pace usually I just attened the full on developer talks.&lt;/p&gt;
&lt;p&gt;Below I have my simple notes and schedule for posteritiy and will try to updated with the Speakers slides and WordPress.tv links as they become available.&lt;/p&gt;
&lt;h2&gt;Schedule &amp;amp; Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stlouis.wordcamp.org/2015/&quot; target=&quot;_blank&quot;&gt;St. Louis WordCamp 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/wordcampstl&quot; target=&quot;_blank&quot;&gt;@wordcampstl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/hashtag/wcstl&quot; target=&quot;_blank&quot;&gt;#wcstl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Saturday March 14, 2015
&lt;h3&gt;Registration&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[8:00am]&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CAIN &amp;amp; OBENLAND IN THE MORNING!&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[9:00am | Michael Cain, Konstantin Obenland]&lt;/em&gt;
Cain &amp;amp; Obenland in the morning! – a morning show-style WordCamp talk with three segments: two that will cover any number of WordPress topics – current WP happenings, theming, design, development, best practices, worst practices, future trends, you name it – and a special guest interview with a big name from the WordPress world.&lt;/p&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Offical Twitter plugin&lt;/li&gt;
&lt;li&gt;Apply Filters Podcast?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;LESSONS FROM THE 314 TEAM (BEGINNER)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[Developer 2 | Room 201 | 10:15am | Chris Carter]&lt;/em&gt;
“Having toddlers as coworkers” and other life lessons from the 314 team.&lt;/p&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;314 Media&lt;/li&gt;
&lt;li&gt;Code Poet Directory?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CSS SPECIFICITY IS A RAT-HOLE (INTERMEDIATE)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[Developer 1 | Room 250 | 11:00am | Drew Bell]&lt;/em&gt;
Decouple from the cascade and free your styles.&lt;/p&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Problem other people CSS&lt;/li&gt;
&lt;li&gt;Sites change&lt;/li&gt;
&lt;li&gt;Too specific CSS makes change hard&lt;/li&gt;
&lt;li&gt;Specificity Calculator (Site)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;MANAGING WORDPRESS PROJECTS (INTERMEDIATE)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[Developer 2 | Room 201 | 11:45am | Lucas Lima]&lt;/em&gt;
&lt;strong&gt;MANAGING WORDPRESS PROJECTS – LET’S GET BETTER ON THIS!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Developers and Designers love to use their creativity to build amazing things for their clients with WordPress , however it’s not always that they are able to delivery those on time. WordPress is a wonderful tool that allow us to have a powerful website up and running in a couple of hours, so why do we need to be worried on how we manage our projects? I’m pretty sure you have tons of reasons to be worried about it…&lt;/p&gt;
&lt;p&gt;We all know how hard it is to keep the expectations of our clients in a proper level over the course of the project. How difficult it is to maintain the scope, and if it changes, how to identify the impact before the “go live” date? I would like to present some basic concepts of Project Management applied specific to WordPress projects, using the experience I got managing projects for my company.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intended Audience&lt;/strong&gt;: WordPress Freelancers and Startups&lt;/p&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;h3&gt;ATOMIC DESIGN PRINCIPLES IN WORDPRESS THEMES (INTERMEDIATE)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[Developer 1 | Room 250 | 12:30pm | Joe McGill]&lt;/em&gt;
&lt;a href=&quot;https://speakerdeck.com/joemcgill/atomic-design-with-wordpress&quot; target=&quot;_blank&quot;&gt;Slides&lt;/a&gt;
If you spend your days designing and developing WordPress themes, you probably find yourself building the same elements over and over. Preprocessors like Sass and Less can speed things up inside a given site, but still – every site needs menus, buttons, headers, footers, form elements … you get the idea.&lt;/p&gt;
&lt;p&gt;Well. What if you could craft your HTML and CSS (and your preprocessor variables, mixins and so on) into isolated patterns that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;live at a single URL, so you can share it with whoever needs access, no matter where they are in the world;&lt;/li&gt;
&lt;li&gt;you can use over and over again, in project after project?&lt;/li&gt;
&lt;li&gt;yet still rewrite and restyle as a system, such that every single implementation can look wildly different?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s the essence of atomic design.&lt;/p&gt;
&lt;p&gt;If you’re like me, you’ll discover the pattern libraries you build with atomic design give you a common starting point for new projects and a consistent process for your design system. The libraries themselves are simple to maintain, simple to expand.&lt;/p&gt;
&lt;p&gt;And once you’re up and running, you can also use the WordPress template functions to organize your theme files the same way you’ve organized your pattern library.&lt;/p&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bradfrost.com/blog/post/atomic-web-design/&quot; target=&quot;_blank&quot;&gt;&lt;a href=&quot;http://bradfrost.com/blog/post/atomic-web-design/&quot;&gt;http://bradfrost.com/blog/post/atomic-web-design/&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Self contained&lt;/li&gt;
&lt;li&gt;Discrete taks&lt;/li&gt;
&lt;li&gt;Components&lt;/li&gt;
&lt;li&gt;Parts
&lt;ul&gt;
&lt;li&gt;Atoms&lt;/li&gt;
&lt;li&gt;Molecules&lt;/li&gt;
&lt;li&gt;Organisms&lt;/li&gt;
&lt;li&gt;Templates&lt;/li&gt;
&lt;li&gt;Pages&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Break pages into components&lt;/li&gt;
&lt;li&gt;4.1 &lt;code&gt;the_posts_pagination();&lt;/code&gt; and &lt;code&gt;get_the_post_pagination();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;include( locate_template() );&lt;/code&gt; to keep variable scope instead of &lt;code&gt;get_template_part();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;styleguides.io&quot; target=&quot;_blank&quot;&gt;&lt;a href=&quot;http://styleguides.io&quot;&gt;http://styleguides.io&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://patternlap.io&quot; target=&quot;_blank&quot;&gt;&lt;a href=&quot;http://patternlap.io&quot;&gt;http://patternlap.io&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://pea.rs&quot; target=&quot;_blank&quot;&gt;Pears WP Theme&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Styleguides
&lt;ul&gt;
&lt;li&gt;One big long page&lt;/li&gt;
&lt;li&gt;Use same production CSS/JS&lt;/li&gt;
&lt;li&gt;Break up resources by pattern(HTML/CSS/JS)&lt;/li&gt;
&lt;li&gt;Bundle/minify patterns for production&lt;/li&gt;
&lt;li&gt;Base all patterns on real needs&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lunch&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[1:00pm]&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Yum!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Podcasting Panel&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[Developer 1 | Room 250 | 2:00pm | Panel Pippin Williamson, Jef Chandler, Chris Miller, and Nile Flores]&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;30 minutes to 1 hour length&lt;/li&gt;
&lt;li&gt;Apply Filters, WordPress Weekly, The Matt Report&lt;/li&gt;
&lt;li&gt;iTunes &amp;quot;WordPress&amp;quot;&lt;/li&gt;
&lt;li&gt;Break media files into another server&lt;/li&gt;
&lt;li&gt;Consistent episodes&lt;/li&gt;
&lt;li&gt;Use stats viewer for your host as analytics&lt;/li&gt;
&lt;li&gt;Get your gear right&lt;/li&gt;
&lt;li&gt;You don&#039;t have to be perfect&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UNDERSTANDING AND APPLYING SECURITY TO YOUR WORDPRESS INSTALLATION (INTERMEDIATE)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[Developer 2 | Room 201 | 2:45pm | Gregory Ray]&lt;/em&gt;
Be prepared! Whether you are responsible only for running a single site for yourself, or maintaining dozens for your clients, you should know how to take reasonable precautions to secure WordPress against common attacks. We will review the types of active threats that WordPress sites face, how and why a site gets targeted, and then look at a variety of techniques for improving security.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Some areas we will cover:&lt;/li&gt;
&lt;li&gt;Access controls&lt;/li&gt;
&lt;li&gt;Htaccess recipes to block specific attack types&lt;/li&gt;
&lt;li&gt;Moving key WordPress files to spoil scripting&lt;/li&gt;
&lt;li&gt;Obfuscation methods&lt;/li&gt;
&lt;li&gt;File permissions&lt;/li&gt;
&lt;li&gt;Coordinating with a web host system administrator&lt;/li&gt;
&lt;li&gt;Responding to an apparent hack&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The overall goal will be to make your site(s) less attractive to opportunistic exploits, and give you a better sense of how to respond before (and, if necessary, after) a security breach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Dot Gray Inc.&lt;/li&gt;
&lt;li&gt;.htaccess for dictionary attacks&lt;/li&gt;
&lt;li&gt;Disable XML-RPC&lt;/li&gt;
&lt;li&gt;Disable wp-config.php&lt;/li&gt;
&lt;li&gt;Disallow File Edit wp-config&lt;/li&gt;
&lt;li&gt;Disable WP version display (complete_version_removal)&lt;/li&gt;
&lt;li&gt;Relocate wp outside of root&lt;/li&gt;
&lt;li&gt;Read lock everything outside of wp-uploads. Themes?&lt;/li&gt;
&lt;li&gt;Disallow wp-* robots.txt&lt;/li&gt;
&lt;li&gt;Multi-tenancy/McCreary Method?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;AN ELEGANT WORDPRESS WORKFLOW WITH GIT (ADVANCED)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[Developer 1 | Room 250 | 3:30pm | Bobby Bryant]&lt;/em&gt;
In this talk, I would be discussing version control. But more specifically, I would be outlining a version control workflow called git flow. I would also be outlining how we use git flow in conjunction with services like beanstalk and bitbucket to auto deploy commits to staging and production environments.&lt;/p&gt;
&lt;p&gt;I think this would be a great talk for various attendees. Beginners could begin to understand the power of version control, and advanced users could see how using git flow can be a benefit when working on larger projects, with multiple developers. As WordPress continues to make inroads into the enterprise marketplace, it is becoming more important for WordPress developers to implement safe and organized development processes.&lt;/p&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://10up.github.io/Engineering-Best-Practices/&quot; target=&quot;_blank&quot;&gt;10up engineering best practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Desktop server (Application)&lt;/li&gt;
&lt;li&gt;Git Flow&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;TAKING BACKWARDS COMPATIBILITY SERIOUSLY (ADVANCED)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[Developer 1 | Room 250 |  4:15pm | Pippin WIlliamson]&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Notes:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Filter get_post_meta for old meta keys&lt;/li&gt;
&lt;li&gt;Mentality of how to do it&lt;/li&gt;
&lt;li&gt;Add deprecated funcitons file and through debug error&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CLOSING REMARKS&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[4:45pm]&lt;/em&gt;
Phew, we made it to the end of the first day of WordCamp St. Louis! We’d like to highlight a few superstars and remind folks of what the heck is happening on Sunday.&lt;/p&gt;
&lt;p&gt;Then, on to the after party with a few pointers on travel/parking and where to go once you reach the City Museum.&lt;/p&gt;
&lt;h3&gt;AFTER PARTY AT CITY MUSEUM&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;[7:00pm]&lt;/em&gt;&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sun, 15 Mar 2015 13:16:54 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/15/st-louis-wordcamp-2015</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/15/st-louis-wordcamp-2015</guid>
											</item>
					<item>
				<title>A minute with a Ghost...</title>
				<description>
					<![CDATA[
					&lt;p&gt;I finally decided to take a look at &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;, I primarily use &lt;a href=&quot;https://wordpress.org/&quot;&gt;WordPress&lt;/a&gt; in my day to day work and my blog has been on WordPress forever.  I was looking for a change WordPress has become a little to much for just simple blog writing.  I honestly love it as a CMS and for any one who wants as much control as possible WordPress, with out learning to code, it is the way to go.&lt;/p&gt;
&lt;p&gt;I have also looked into static site generators like &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekell&lt;/a&gt; but honestly I am way to lazy to to maintain it and yes I know its fairly simple.  I like how Ghost bridges the gap as well as gives me an excuse to play more with &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node&lt;/a&gt; and &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of my favorite things about Ghost is the instant you login you are greeted with a new post to just get down to writing. Which is what you came for, isn&#039;t it?  Ghost seems to be much more snappy than WordPress not sure if that is due to it being Node instead of PHP or if it is a lot less bloat.  Maybe some day I&#039;ll stop being lazy and figure out which one it is.&lt;/p&gt;
&lt;p&gt;I am looking forward to building my own theme right now I am using a really nice free theme &lt;a href=&quot;https://github.com/zutrinken/attila&quot;&gt;Attila&lt;/a&gt; which is nice and minimal as well as responsive.  It has only been around a week but so far I have no plans on going back to WordPress for my blog.  Oh ya one last thing Markdown by default FTW every WP Markdown plugin just wasn&#039;t the same as built in Markdown.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Thu, 12 Mar 2015 23:20:04 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/12/a-minute-with-a-ghost</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/12/a-minute-with-a-ghost</guid>
											</item>
					<item>
				<title>WP Multi File Uploader</title>
				<description>
					<![CDATA[
					&lt;p&gt;Last week I released my first WordPress plugin on the WordPress plugin repository to my surprise it has been downloaded already over 70 times this week. The plugin allows a user to upload multiple files at the same time to a form on your WordPress site. As well as adds the file to the default uploads directory and creates an attachment with the file in the Media section. You can view more info here or &lt;a href=&quot;http://dholloran.github.com/WPMultiFileUploader&quot;&gt;&lt;a href=&quot;http://dholloran.github.com/WPMultiFileUploader&quot;&gt;http://dholloran.github.com/WPMultiFileUploader&lt;/a&gt;&lt;/a&gt;. You can also grab it from the WordPress plugin repository here &lt;a href=&quot;http://wordpress.org/extend/plugins/wp-multi-file-uploader/&quot;&gt;&lt;a href=&quot;http://wordpress.org/extend/plugins/wp-multi-file-uploader/&quot;&gt;http://wordpress.org/extend/plugins/wp-multi-file-uploader/&lt;/a&gt;&lt;/a&gt;. Please check it out, if you have any issues let me know and I will try to help you ASAP. Please review it on the download page and leave feedback on which version it works with if you could. A few hopefully additions will be drag and drop uploading, more control through the shortcode/php function, integration into other form building plugins and possibly more form field creation.&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 10 Mar 2015 00:56:42 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/10/new-plugin-wp-multi-file-uploader</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/10/new-plugin-wp-multi-file-uploader</guid>
											</item>
					<item>
				<title>WP Github Recent Commit Widget</title>
				<description>
					<![CDATA[
					&lt;p&gt;I released my second plugin this week on the Wordpress repository, WP Github Recent Commit. It is a widget that allows you to display your most recent commits from the master branch of a public repository. Also it grabs a random Octocat from the Octodex, because who doesn&#039;t love Octocats! I initially built this widget for my site and figured some one else may use it. You can check out a demo at &lt;a href=&quot;http://demo.danholloran.com/github-commit-widget-demo/&quot;&gt;http://demo.danholloran.com/github-commit-widget-demo/&lt;/a&gt; which shows the new short code and template function that are not available in the Wordpress repository so far, hopefully sometime this week. If you want to try the bleeding edge version out head over to my &lt;a href=&quot;https://github.com/DHolloran/wp-github-recent-commit&quot;&gt;Github repo&lt;/a&gt; and grab the latest .zip of the master branch, beware it may bite. If you want easy updates grab the current Wordpress version &lt;a href=&quot;http://wordpress.org/extend/plugins/wp-github-recent-commit/&quot;&gt;here&lt;/a&gt;. It should be updated soon, if I can figure out this SVN stuff. If you would like more information head over &lt;a href=&quot;http://dholloran.github.com/wp-github-recent-commit&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 10 Mar 2015 00:49:39 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/10/wp-github-recent-commit-widget</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/10/wp-github-recent-commit-widget</guid>
											</item>
					<item>
				<title>Missing Content</title>
				<description>
					<![CDATA[
					&lt;h2&gt;Cache&lt;/h2&gt;
&lt;p&gt;[missing-content cache_duration=&amp;quot;always&amp;quot;]
[missing-content cache_duration=&amp;quot;never&amp;quot;]
[missing-content paragraph_count=&amp;quot;1&amp;quot; cache_duration=&amp;quot;24315342&amp;quot;]&lt;/p&gt;
&lt;h2&gt;Lipsum&lt;/h2&gt;
&lt;p&gt;[missing-content]
[missing-content paragraph_count=&amp;quot;2&amp;quot;]&lt;/p&gt;
&lt;h2&gt;Bacon Ipsum&lt;/h2&gt;
&lt;p&gt;[missing-content content_type=&amp;quot;bacon&amp;quot; paragraph_count=&amp;quot;3&amp;quot;]&lt;/p&gt;
&lt;h2&gt;Hipster Ipsum&lt;/h2&gt;
&lt;p&gt;[missing-content content_type=&amp;quot;hipster&amp;quot; paragraph_count=&amp;quot;3&amp;quot;]&lt;/p&gt;
&lt;h2&gt;Blokk Font&lt;/h2&gt;
&lt;p&gt;[missing-content content_type=&amp;quot;blokk&amp;quot; paragraph_count=&amp;quot;3&amp;quot;]&lt;/p&gt;
&lt;h2&gt;Image&lt;/h2&gt;
&lt;p&gt;[missing-content content_type=&amp;quot;image&amp;quot; width=&amp;quot;150&amp;quot; height=&amp;quot;150&amp;quot;]&lt;/p&gt;
&lt;h3&gt;Random Content&lt;/h3&gt;
&lt;p&gt;[missing-content content_type=&amp;quot;image&amp;quot; random=&amp;quot;true&amp;quot; min_width=&amp;quot;150&amp;quot; max_width=&amp;quot;500&amp;quot; min_height=&amp;quot;150&amp;quot; max_height=&amp;quot;300&amp;quot;]
[missing-content random=&amp;quot;true&amp;quot; min_paragraph_count=&amp;quot;1&amp;quot; max_paragraph_count=&amp;quot;5&amp;quot;]&lt;/p&gt;
					]]>
				</description>
				<pubDate>Tue, 10 Mar 2015 00:16:31 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/10/missing-content</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/10/missing-content</guid>
											</item>
					<item>
				<title>WP Better Attachments</title>
				<description>
					<![CDATA[
					&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; WordPress plugin that allows you to add/edit/attach/un-attach/sort the files attached to your WordPress posts all from the post editor. Integrates seamlessly with WordPress using the default WordPress attachments type and no configuration needed to add WP Better Attachments to custom post types. You can now also have full control over cropping of the different attachment image sizes through the media editor.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Plugin Home Page:&lt;/strong&gt; &lt;a href=&quot;http://wordpress.org/extend/plugins/wp-better-attachments/&quot;&gt;http://wordpress.org/extend/plugins/wp-better-attachments/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Thanks to these projects:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/DerekMarcinyshyn/wp-settings-api-bootstrap&quot;&gt;WP Settings API Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.woothemes.com/flexslider/2/&quot;&gt;FlexSlider 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://odyniec.net/projects/imgareaselect/&quot;&gt;Img Area Select&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;If your project is included and I do not have you added please let me know, thank you.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you have any issues please submit an &lt;a href=&quot;https://github.com/DHolloran/wp-better-attachments/issues/new&quot;&gt;issue&lt;/a&gt; or fix it/submit a pull request I will try to handle it ASAP. You an also contact me at &lt;a href=&quot;mailto:dtholloran@gmail.com&quot;&gt;DTHolloran@gmail.com&lt;/a&gt;.&lt;/p&gt;
&lt;!-- [![Click here to lend your support to: WP Better Attachments and make a donation at www.pledgie.com !](http://www.pledgie.com/campaigns/20476.png?skin_name=chrome)](http://www.pledgie.com/campaigns/20476) --&gt;
&lt;hr /&gt;
&lt;h3&gt;WPBA Attachments Exist&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;/** @returns boolean */
wpba_attachments_exist(array(
    &#039;post_id&#039;             =&amp;gt; current_post_id,
    &#039;show_post_thumbnail&#039; =&amp;gt; true
));&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;WPBA Get Attachments&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;/** @return array $attachments The retrieved attachments, respects all settings. */
wpba_get_attachments(array(
    &#039;post_id&#039;             =&amp;gt; current_post_id,
    &#039;show_post_thumbnail&#039; =&amp;gt; true
));&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;WPBA Attachment List&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/screenshot-6.png&quot; alt=&quot;WPBA Attachment List&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Shortcode&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[wpba-attachment-list
 post_id=&quot;current_post_id&quot;
 show_icon=&quot;false&quot;
 file_type_categories=&quot;image,file,audio,video&quot;
 file_extensions=&quot;png,pdf&quot;
 image_icon=&quot;path/to/directory/image-icon.png&quot;
 file_icon=&quot;path/to/directory/file-icon.png&quot;
 audio_icon=&quot;path/to/directory/audio-icon.png&quot;
 video_icon=&quot;path/to/directory/video-icon.png&quot;
 icon_size=&quot;16,20&quot; **width, height**
 use_attachment_page=&quot;true&quot;
 open_new_window=&quot;true&quot;
 show_post_thumbnail=&quot;true&quot;
 no_attachments_msg=&quot;Sorry, no attachments exist.&quot;
 wrap_class=&quot;wpba wpba-wrap&quot;
 list_class=&quot;unstyled&quot;
 list_id=&quot;wpba_attachment_list&quot;
 list_item_class=&quot;wpba-list-item pull-left&quot;
 link_class=&quot;wpba-link pull-left&quot;
 icon_class=&quot;wpba-icon pull-left&quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Function&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;wpba_attachment_list( array(
    &#039;post_id&#039;              =&amp;gt; current_post_id,
    &#039;show_icon&#039;            =&amp;gt; false,
    &#039;file_type_categories&#039; =&amp;gt; array( &#039;image&#039;, &#039;file&#039;, &#039;audio&#039;, &#039;video&#039; ),
    &#039;file_extensions&#039;      =&amp;gt; get_allowed_mime_types(), // array()
    &#039;image_icon&#039;           =&amp;gt; &#039;plugin_url/assets/img/image-icon.png&#039;,
    &#039;file_icon&#039;            =&amp;gt; &#039;plugin_url/assets/img/file-icon.png&#039;,
    &#039;audio_icon&#039;           =&amp;gt; &#039;plugin_url/assets/img/audio-icon.png&#039;,
    &#039;video_icon&#039;           =&amp;gt; &#039;plugin_url/assets/img/video-icon.png&#039;,
    &#039;icon_size&#039;            =&amp;gt; array( 16, 20 ),
    &#039;use_attachment_page&#039;  =&amp;gt; true,
    &#039;open_new_window&#039;      =&amp;gt; true,
    &#039;show_post_thumbnail&#039;  =&amp;gt; true,
    &#039;no_attachments_msg&#039;   =&amp;gt; &#039;Sorry, no attachments exist.&#039;,
    &#039;wrap_class&#039;           =&amp;gt; &#039;wpba wpba-wrap&#039;,
    &#039;list_class&#039;           =&amp;gt; &#039;unstyled&#039;,
    &#039;list_id&#039;              =&amp;gt; &#039;wpba_attachment_list&#039;
    &#039;list_item_class&#039;      =&amp;gt; &#039;wpba-list-item pull-left&#039;
    &#039;link_class&#039;           =&amp;gt; &#039;wpba-link pull-left&#039;
    &#039;icon_class&#039;           =&amp;gt; &#039;wpba-icon pull-left&#039;
));&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Screenshots&lt;/h2&gt;
&lt;h3&gt;WPBA Post Editor Button&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/screenshot-1.png&quot; alt=&quot;WPBA Post Editor Button&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;WPBA Meta Box&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/screenshot-2.png&quot; alt=&quot;WPBA Meta Box&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;WPBA Unattach Media Library Link&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/screenshot-3.png&quot; alt=&quot;WPBA Unattach Media Library Link&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;WPBA Attachment Editor&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/screenshot-4.png&quot; alt=&quot;WPBA Attachment Editor&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;WPBA Crop Editor&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/screenshot-5.png&quot; alt=&quot;WPBA Crop Editor&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;To get started with WP Better Attachments you can download it directly &lt;a href=&quot;https://github.com/DHolloran/wp-better-attachments/archive/master.zip&quot;&gt;here&lt;/a&gt;, search for WP Github Recent Commit in your administrator section&#039;s Plugins &amp;gt; Add New, or you can download it from the &lt;a href=&quot;http://wordpress.org/extend/plugins/wp-github-recent-commit/&quot;&gt;Wordpress plugins directory&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Wordpress Plugin Directory Instructions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Search for WP Better Attachments in Plugins &amp;gt; Add New&lt;/li&gt;
&lt;li&gt;Install &amp;amp; Activate WP Better Attachments&lt;/li&gt;
&lt;li&gt;Go to any page/post/custom post type and start editing your attachments with ease. Use the add attachments button to add new attachments. You can Drag and drop your attachments to arrange their menu order. Click the Un-attach link to un-attach the file from your post.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Manual Install Instructions&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Unzip your download and place in wp-content/plugins/&lt;/li&gt;
&lt;li&gt;Activate WP Better Attachments in the Wordpress Admin area&lt;/li&gt;
&lt;li&gt;Go to any page/post/custom post type and start editing your attachments with ease. Use the add attachments button to add new attachments. You can Drag and drop your attachments to arrange their menu order. Click the Un-attach link to un-attach the file from your post.&lt;/li&gt;
&lt;/ol&gt;
					]]>
				</description>
				<pubDate>Sun, 08 Mar 2015 17:00:54 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/08/wp-better-attachments</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/08/wp-better-attachments</guid>
											</item>
					<item>
				<title>If you&#039;ve ever wondered...</title>
				<description>
					<![CDATA[
					&lt;p&gt;&lt;strong&gt;This is what I do all day long.&lt;/strong&gt;
&lt;img src=&quot;/uploads/VhlQKh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
					]]>
				</description>
				<pubDate>Sat, 07 Mar 2015 15:11:22 +0000</pubDate>
				<link>https://danholloran.test/blog/2015/03/07/if-youve-ever-wondered</link>
				<guid isPermaLink="true">https://danholloran.test/blog/2015/03/07/if-youve-ever-wondered</guid>
											</item>
			</channel>
</rss>
