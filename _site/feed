<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="2.4.0">Jekyll</generator><link href="http://danholloran.me/feed" rel="self" type="application/atom+xml" /><link href="http://danholloran.me/" rel="alternate" type="text/html" /><updated>2016-05-14T17:51:50-05:00</updated><id>http://danholloran.me/</id><title>DanHolloran</title><subtitle>My adventures on and off of the internetz.
</subtitle><entry><title>Laravel Forge, Digital Ocean and WebSockets</title><link href="http://danholloran.me/2016/03/05/laravel-forge-digital-ocean-and-websockets/" rel="alternate" type="text/html" title="Laravel Forge, Digital Ocean and WebSockets" /><published>2016-03-05T00:00:00-06:00</published><updated>2016-03-05T00:00:00-06:00</updated><id>http://danholloran.me/2016/03/05/laravel-forge-digital-ocean-and-websockets</id><content type="html" xml:base="http://danholloran.me/2016/03/05/laravel-forge-digital-ocean-and-websockets/">&lt;p&gt;I recently posted an overview of how to setup Web Sockets using &lt;a href=&quot;/2016/01/30/laravel-and-websockets/&quot;&gt;Laravel and Socket.io&lt;/a&gt;. I wanted to follow it up with a quick post on how to get the Web Sockets functioning correctly on a &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt; server using &lt;a href=&quot;https://forge.laravel.com/&quot;&gt;Laravel Forge&lt;/a&gt;. I a going to assume that you have already gone through the setup process to provision a new server. Also that you have read the first post since the largest amount of work will lie there. I believe these steps should be identically for all hosting providers not Just Digital Ocean but do not quote me on that.&lt;/p&gt;

&lt;p&gt;First of all we need to setup some daemons for Redis and Socket.io which forge makes extremely simple. This will allow Redis and Socket.io to run continuously without you having to worry about it, First you need to navigate to Servers &amp;gt; Your Server and then the “Daemons” tab. You will need to add &lt;code&gt;redis-server --port 3001&lt;/code&gt; in the “Command” text field and click the “Start Daemon” button this will enable Redis. You will also need to add &lt;code&gt;node /home/forge/mysite.com/socket.js&lt;/code&gt;, make sure to update &lt;code&gt;mysite.com&lt;/code&gt; with the domain of you site, in the “Command” text field and click the “Start Daemon” button this will enable Socket.io.&lt;/p&gt;

&lt;p&gt;You can check on your daemons at any time by clicking on the eye icon in the “Status” column. You will want to make sure that both Redis and Socket.io are running. If you have any issues it is best to SSH onto your server and try running the commands manually to see make sure they are successful. HJst make sure to delete the daemon before you SSH onto your server.&lt;/p&gt;

&lt;p&gt;Next we will want to move onto the “Network” tab were we can open port 3000 in the servers firewall so we can access Socket.io. You can set the “Name” to SocketIO, the “Port” to 3000 and I suggest adding the IP Address of your server but thats up to you. Then you just click the “Add Rule” button and you should be good to go. You can test the connection by navigating to http://mysite.com:3000 you should see the message “Cannot GET /”. If you see that everything should be working just fine.&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>I recently posted an overview of how to setup Web Sockets using Laravel and Socket.io. I wanted to follow it up with a quick post on how to get the Web Sockets functioning correctly on a Digital Ocean server using Laravel Forge. I a going to assume that you have already gone through the setup process to provision a new server. Also that you have read the first post since the largest amount of work will lie there. I believe these steps should be identically for all hosting providers not Just Digital Ocean but do not quote me on that.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1436985487860-712a3b558087.jpeg&quot;}" /></entry><entry><title>Laravel and WebSockets</title><link href="http://danholloran.me/2016/01/30/laravel-and-websockets/" rel="alternate" type="text/html" title="Laravel and WebSockets" /><published>2016-01-30T00:00:00-06:00</published><updated>2016-01-30T00:00:00-06:00</updated><id>http://danholloran.me/2016/01/30/laravel-and-websockets</id><content type="html" xml:base="http://danholloran.me/2016/01/30/laravel-and-websockets/">&lt;p&gt;Working with WebSockets and Larvel is extremely easy! If you are new to Laravel it has an event system that you can use to dispatch events for other parts of your PHP code to use. As well as Laravel supports Redis and &lt;a href=&quot;https://pusher.com/&quot;&gt;Pusher&lt;/a&gt; for dispatching events via WebSockets. Pusher is a fully hosted service that will handle the Node.js side of things for you. I hover will cover using Laravel events with Redis to broadcast events to &lt;a href=&quot;http://socket.io/&quot;&gt;Socket.io&lt;/a&gt; and using &lt;a href=&quot;http://supervisord.org/&quot;&gt;Supervisor&lt;/a&gt; to keep all the processes needed running by default. The current version of Laravel as of this writing is 5.2 which you should already have installed and I will be assuming you are using Laravel Homstead.&lt;/p&gt;

&lt;h2 id=&quot;dependencies-and-configuration&quot;&gt;Dependencies and Configuration&lt;/h2&gt;
&lt;p&gt;So lets get started with installing the required dependencies.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;composer require predis/predis
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install express ioredis socket.io --save&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will then need to update our &lt;code&gt;.env&lt;/code&gt; with &lt;code&gt;BROADCAST_DRIVER=redis&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;event-class&quot;&gt;Event Class&lt;/h2&gt;
&lt;p&gt;Now we will need to create a new event.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;php artisan make:event EventName&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Go ahead open the new event &lt;code&gt;app/Events/EventName.php&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You need to make sure that your event &lt;code&gt;implements ShouldBroadcast&lt;/code&gt; by default it does not.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShouldBroadcast&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For this example we will use a &lt;code&gt;$data&lt;/code&gt; property to pass information to socket.io however by default you will have access to any public property.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;some_data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you will need to set the channel you are going to broadcast the events on. We will use this later with Socket.io to listen for the events.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;broadcastOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-example&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our whole event class should now look like this.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Events&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App\Events\Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Queue\SerializesModels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Illuminate\Contracts\Broadcasting\ShouldBroadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EventName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Event&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ShouldBroadcast&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SerializesModels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * Create a new event instance.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @return void&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;some_data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;sd&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * Get the channels the event should be broadcast on.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     *&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     * @return array&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;broadcastOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-example&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;socketio&quot;&gt;Socket.io&lt;/h2&gt;
&lt;p&gt;Now we will need to make a &lt;code&gt;socket.js&lt;/code&gt; file in the root of our Laravel installation and place the following into it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;socket.io&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ioredis&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;redis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-example&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Message Recieved: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Listening on Port 3000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want to update the channel you will need to change &lt;code&gt;event-example&lt;/code&gt; in &lt;code&gt;redis.subscribe(&#39;event-example&#39;, function(err, count) {
});&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now we are ready to run the &lt;code&gt;socket.js&lt;/code&gt; file and Redis in &lt;strong&gt;separate tabs on your server&lt;/strong&gt; run the following.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node socket.js
&lt;span class=&quot;c&quot;&gt;# You should see Listening on Port 3000&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;redis-server --port 3001
&lt;span class=&quot;c&quot;&gt;# You should see a whole bunch of output&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;event-listener&quot;&gt;Event listener&lt;/h2&gt;
&lt;p&gt;Now for simplicity you can add the following to your main view template. This basically listens for an event on the &lt;code&gt;event-example&lt;/code&gt; we have setup that as fired by the &lt;code&gt;EventName&lt;/code&gt; class. You will want to move this into is own separate JS file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;https://cdn.socket.io/socket.io-1.4.5.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socketURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://192.168.10.10:3000&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 192.168.10.10 can be replaced with the IP address of your server.&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// If you are using Elixir/Browserify use commented out socket instead.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;socketURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// var socket = require(&amp;#39;socket.io-client&amp;#39;)(socketURL);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// The event name is created by the event channel (example-event) we set earlier&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and the class name with the full namespace (App\Events\EventName).&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-example:App\\Events\\EventName&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;some_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;event-testing&quot;&gt;Event testing&lt;/h2&gt;
&lt;p&gt;For simplicity sake when testing we can just add a route to fire the event. In reality this will happen elsewhere possibly in a controller. The main thing to take away is &lt;code&gt;Event::fire(new EventName(&#39;Some data about the event.&#39;));&lt;/code&gt; will be how you can fire the event.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;Route::group([&amp;#39;middleware&amp;#39; =&amp;gt; &amp;#39;web&amp;#39;], function () {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    Route::get(&amp;#39;/fire&amp;#39;, function () {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        Event::fire(new EventName(&amp;#39;Event data&amp;#39;));&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;        return &amp;#39;Event Fired&amp;#39;;&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    });&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now if you open your site in one tab and go to &lt;code&gt;/fire&lt;/code&gt; in the other. Then in the first tab you should see an alert with the text &lt;code&gt;Event data&lt;/code&gt;. Now you have a fully functional setup with Laravel and WebSockets!&lt;/p&gt;

&lt;h2 id=&quot;supervisor&quot;&gt;Supervisor&lt;/h2&gt;
&lt;p&gt;So obviously we do not want to manually run &lt;code&gt;node socket.js&lt;/code&gt; and &lt;code&gt;redis-server --port 3001&lt;/code&gt; when we start our server. As well as make sure both commands are never closed out. So this is where &lt;a href=&quot;http://supervisord.org/&quot;&gt;Supervisor&lt;/a&gt; comes into play. It will handle starting both services and making sure they stay up continuously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The following instructions will happen on your server.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you do not already have Supervisor installed you can install it via &lt;code&gt;sudo apt-get install supervisor&lt;/code&gt;. Then you will need to restart Supervisor via &lt;code&gt;sudo service supervisor restart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we need to set the configuration file for &lt;code&gt;socket.js&lt;/code&gt;	via &lt;code&gt;sudo nano /etc/supervisor/conf.d/socket.conf&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# socket.conf content&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;program:socket&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node /path/to/install/socket.js &lt;span class=&quot;c&quot;&gt;# IMPOTANT: Update /path/to/install&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;autostart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;autorestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;stderr_logfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/log/socket.err.log
&lt;span class=&quot;nv&quot;&gt;stdout_logfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/log/socket.out.log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we will need to setup the configuration for Redis &lt;code&gt;sudo nano /etc/supervisor/conf.d/redis.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# redis.conf content&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;program:redis&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;redis-server --port 3001
&lt;span class=&quot;nv&quot;&gt;autostart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;autorestart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;stderr_logfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/log/redis.err.log
&lt;span class=&quot;nv&quot;&gt;stdout_logfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/log/redis.out.log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we need to tell Supervisor about our new configuration.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo supervisorctl reread
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo supervisorctl update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can verify everything went ok by the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tail /var/log/socket.out.log
&lt;span class=&quot;c&quot;&gt;# You should see Listening on Port 3000&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tail /var/log/redis.out.log
&lt;span class=&quot;c&quot;&gt;# You should see a whole bunch of output&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If something does not seem to work correctly you can check the error logs via the following.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tail /var/log/socket.err.log
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;tail /var/log/redis.err.log&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So thats all there basically is now go out and build something awesome!&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>Working with WebSockets and Larvel is extremely easy! If you are new to Laravel it has an event system that you can use to dispatch events for other parts of your PHP code to use. As well as Laravel supports Redis and Pusher for dispatching events via WebSockets. Pusher is a fully hosted service that will handle the Node.js side of things for you. I hover will cover using Laravel events with Redis to broadcast events to Socket.io and using Supervisor to keep all the processes needed running by default. The current version of Laravel as of this writing is 5.2 which you should already have installed and I will be assuming you are using Laravel Homstead.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1436772414296-de1960161901.jpeg&quot;}" /></entry><entry><title>Why Does ExpressionEngine Save Templates in the Database?</title><link href="http://danholloran.me/2016/01/16/why-does-expressionengine-save-templates-in-the-database/" rel="alternate" type="text/html" title="Why Does ExpressionEngine Save Templates in the Database?" /><published>2016-01-16T00:00:00-06:00</published><updated>2016-01-16T00:00:00-06:00</updated><id>http://danholloran.me/2016/01/16/why-does-expressionengine-save-templates-in-the-database</id><content type="html" xml:base="http://danholloran.me/2016/01/16/why-does-expressionengine-save-templates-in-the-database/">&lt;p&gt;This is a little bit of a rant and a large amount of it may be a result of my inexperience. This is in no way saying ExpressionEngine is bad and something like WordPress is better. I feel it is more a surprise from using CodeIgniter before and CodeIgniter is used to build ExpressionEngine. Maybe things have changed in the way CodeIgniter handles MVC. Also maybe this is just a situation of a large user base needing access to more tools in your views.&lt;/p&gt;

&lt;p&gt;I have been maintaining a few ExpressionEngine sites lately and one thing that seemed curious to me is saving templates in the database. I am not saying this is the wrong way to do things but just seems strange. I would want to make as few database calls as possible.&lt;/p&gt;

&lt;p&gt;One reason I see is possibly the templates are not supposed to have any real logic in them. So its much like post content in WordPress which I think is fine. It rides that line between maintainer flexibility and page load speed among other things. In most templating engines I have seen they function much like this. You get access to some programming helpers without any real logic going on.&lt;/p&gt;

&lt;p&gt;This still makes it kind of curious that there is an option to save as a file as well. I am not sure which takes precedence but I would hope the file does. I would think you could just read in the file not sure if there is an issue with that? I would assume it already does this so why would you also save it to the database.&lt;/p&gt;

&lt;p&gt;Maybe save the diffs still when you edit so you can roll back the changes that could be helpful. However what happens when you use version control since you really should be. This will solve that exact use case in a little better way. Would you ignore your template files that just seems a little weird.&lt;/p&gt;

&lt;p&gt;I would agree that this may have some benefits not sure what they are though. One thing I do not agree with is the ability to execute queries from the templates. Sure in WordPress you can execute queries from a template but thats more because WordPress templating is frustratingly procedural but thats a story for another day.&lt;/p&gt;

&lt;p&gt;However I just feel that executing multiple queries mixed in with view code is weird. I personally would not feel comfortable allowing a user access to database queries. Editing HTML is one thing may make the page look a little funny but it can be fixed. You mess something up such as a query you may white screen the page or open yourself up to some sort of security issue.&lt;/p&gt;

&lt;p&gt;Maybe I am missing something or am just seeing bad development practices being used. There may actually be good reasons why ExpressionEngine saves views with database queries in the database.&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>This is a little bit of a rant and a large amount of it may be a result of my inexperience. This is in no way saying ExpressionEngine is bad and something like WordPress is better. I feel it is more a surprise from using CodeIgniter before and CodeIgniter is used to build ExpressionEngine. Maybe things have changed in the way CodeIgniter handles MVC. Also maybe this is just a situation of a large user base needing access to more tools in your views.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1431975562098-bac8ded504c7.jpeg&quot;}" /></entry><entry><title>Quickly Install Applications on Your Mac With Homebrew and Cask</title><link href="http://danholloran.me/2016/01/12/quickly-install-applications-on-your-mac-with-homebrew-and-cask/" rel="alternate" type="text/html" title="Quickly Install Applications on Your Mac With Homebrew and Cask" /><published>2016-01-12T00:00:00-06:00</published><updated>2016-01-12T00:00:00-06:00</updated><id>http://danholloran.me/2016/01/12/quickly-install-applications-on-your-mac-with-homebrew-and-cask</id><content type="html" xml:base="http://danholloran.me/2016/01/12/quickly-install-applications-on-your-mac-with-homebrew-and-cask/">&lt;p&gt;I have been having some issues with my work Macbook and I needed to reinstall Mac OS X. I like to do a complete restore every so often any way since I like to hack and play with things so there is quite a bit of junk that accumulates. I figured this time I would document some of the helpful things you can do with a few tools and a little scripting. &lt;/p&gt;

&lt;p&gt;I figured I would cover &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; and &lt;a href=&quot;http://caskroom.io/&quot;&gt;Cask&lt;/a&gt; to quickly install common applications first. Usually it allows me to install the majority of the applications outside of the Mac App Store. The applications in then Mac App Store can be quickly installed in my purchased applications sections.&lt;/p&gt;

&lt;p&gt;I suggest to go install at least Xcode and accept the developer agreement via the command line &lt;code&gt;$ sudo xcodebuild -license&lt;/code&gt;. You may want to manually install whatever code editor you use since we will need to edit a few files. While your at it you could go ahead and install all of your Mac App Store applications thats what I would do. Then you will need to install Homebrew you can find the instructions on their &lt;a href=&quot;http://brew.sh/&quot;&gt;site&lt;/a&gt;. Then you can install Cask via the instructions on their &lt;a href=&quot;http://caskroom.io/&quot;&gt;site&lt;/a&gt;. Now we are ready to get installing.&lt;/p&gt;

&lt;p&gt;What I suggest to do once you have everything installed is to run &lt;code&gt;$ brew cask search &amp;gt; cask-install.sh&lt;/code&gt; on your desktop or somewhere else you want to create a file. This way you can easily go through the list of possible applications and choose which ones you want. Then with a little bit of editing we can just execute the file to install all of the applications you need. You could also save this file somewhere like Dropbox or if you want to version it with git on Github.&lt;/p&gt;

&lt;p&gt;If you only have a few applications you want to install you can search for individual applications with &lt;code&gt;$brew cask search &amp;lt;application&amp;gt;&lt;/code&gt; it uses fuzzy searching so it will retrieve close matches. Then you can just install them individually with &lt;code&gt;brew cask install &amp;lt;application&amp;gt;&lt;/code&gt;. You can also copy the results you want into a &lt;code&gt;cask-install.sh&lt;/code&gt; just like above. This way you can save the applications to install and bulk install the applications.&lt;/p&gt;

&lt;p&gt;Once you have all the applications you want to install added to &lt;code&gt;cask-install.sh&lt;/code&gt; you will need to add &lt;code&gt;brew cask install&lt;/code&gt; before each application name and a semicolon &lt;code&gt;;&lt;/code&gt; after each application name. I find that using an editor such as Sublime Text with multi-selection makes this a breeze. Then you will want to execute &lt;code&gt;chmod +x cask-install.sh&lt;/code&gt; in the terminal this will allow you to execute the file. Then all you have to do is execute the installation via &lt;code&gt;./cask-install.sh&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the installation has completed all that is left to do is to configure each application. I tend to do this as I use them short of a handful that I use on a daily basis. Now you can store this file somewhere  and you can use it next time you need to install multiple applications.&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>I have been having some issues with my work Macbook and I needed to reinstall Mac OS X. I like to do a complete restore every so often any way since I like to hack and play with things so there is quite a bit of junk that accumulates. I figured this time I would document some of the helpful things you can do with a few tools and a little scripting.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1422504090664-c57eba84293f.jpeg&quot;}" /></entry><entry><title>Why Would You Use a Fixed Header?</title><link href="http://danholloran.me/2015/12/24/why-would-you-use-a-fixed-header/" rel="alternate" type="text/html" title="Why Would You Use a Fixed Header?" /><published>2015-12-24T00:00:00-06:00</published><updated>2015-12-24T00:00:00-06:00</updated><id>http://danholloran.me/2015/12/24/why-would-you-use-a-fixed-header</id><content type="html" xml:base="http://danholloran.me/2015/12/24/why-would-you-use-a-fixed-header/">&lt;p&gt;It seems like I receive a request for a fixed header fairly regularly more than I should. I don’t really understand why you would want to fix the header of your site. So I figured I would layout some of my opinions on the matter I may be wrong but this is just my point of view. Full disclosure this sites header is sticky on Firefox purely to use the sticky CSS property since I use my site to try things out on I believe this is okay. So yes there is an exception to every rule and opinion.&lt;/p&gt;

&lt;p&gt;I understand why you would want to fix your sites header when you have a single page and you are using it to navigate on the same page. I do think this would be the only valid use case I could see. A fixed sidebar navigation would also be valid in this case on larger screens. However this does not happen often so why are there a lot of fixed headers.&lt;/p&gt;

&lt;p&gt;I see this trend more on mobile sites than on desktop which begs the question why is your logo so important that it is taking up 10% of my screen space? I say your logo when I landed on the page and if you have a back to top arrow instead I can use that to get to your navigation. The weirdest place I have seen this is on news sites. So you are telling me half way through your article I should go to another page. I have a better idea how about I go to another site.&lt;/p&gt;

&lt;p&gt;I do somewhat agree with the sites that use a fixed header when you scroll up the page. Since if you are headed up the page there is a better chance that you are trying to get to the navigation. However, this is not a license to fix the header when you scroll up and down no matter what you do it just seems to misbehave. I think sometimes we forget that the two most important parts of the site are not the designers, developers, and owners. However, they are the content and the users that make the site great. So why would we cover our content and frustrate our users just because we think something looks cool.&lt;/p&gt;

&lt;p&gt;I am not sure where this trend comes from maybe trying to make it more like a mobile application. Well in that situation build a mobile application where the navigation is primarily constrained to views in your application. Sure they can link out to the web using web views and links to the devices browser. Most of the navigation in an application is from many smaller views instead of larger form content. So in this situation, a fixed navigation makes more sense since you are spending more time navigating around the application.&lt;/p&gt;

&lt;p&gt;This is a trend that I would like to see less of in the next year I doubt I will. If not, I hope to see more reasoning behind why we would cover up part of our content and frustrate our users. Decisions at the cost of usability even a small amount are the wrong decisions to make. Just remember there is an exception to every rule.&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>It seems like I receive a request for a fixed header fairly regularly more than I should. I don’t really understand why you would want to fix the header of your site. So I figured I would layout some of my opinions on the matter I may be wrong but this is just my point of view. Full disclosure this sites header is sticky on Firefox purely to use the sticky CSS property since I use my site to try things out on I believe this is okay. So yes there is an exception to every rule and opinion.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1434139240289-56c519f77cb0.jpg&quot;}" /></entry><entry><title>Vue.js Component Messaging Continued</title><link href="http://danholloran.me/2015/12/08/vues-js-component-messaging-continued/" rel="alternate" type="text/html" title="Vue.js Component Messaging Continued" /><published>2015-12-08T18:16:00-06:00</published><updated>2015-12-08T18:16:00-06:00</updated><id>http://danholloran.me/2015/12/08/vues-js-component-messaging-continued</id><content type="html" xml:base="http://danholloran.me/2015/12/08/vues-js-component-messaging-continued/">&lt;p&gt;So yesterday I posted about Vue.js component messaging. This is in a way a continuation so you will want to read that first “&lt;a href=&quot;/2015/12/07/vues-js-component-messaging/&quot;&gt;Vue.js Component Messaging&lt;/a&gt;”. &lt;/p&gt;

&lt;p&gt;I had suggested that firing an event off of a common element wether that is the body or the main Vue.js instance really does not matter. However I kind of got to thinking more about it and that would work but there may be a problem if there are multiple instances of the same component on the same page. In the example of an Alert component if for some reason there was one Alert component in the header and one in the footer an alert message would be added to both.&lt;/p&gt;

&lt;p&gt;I did have an idea I thought may solve that issue allow for something like an event component property. Wether you pass it the full value or maybe just a suffix. It could be &lt;code&gt;event-name&lt;/code&gt; by default and if you pass it &lt;code&gt;event-name-2&lt;/code&gt; then that event would fire while passing the same data as &lt;code&gt;event-name&lt;/code&gt;. As a suffix maybe you could pass &lt;code&gt;my-custom-suffix&lt;/code&gt; and then the event that would be fired would be something like &lt;code&gt;event-name/my-custom-suffix&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;// Full event
&lt;span class=&quot;nt&quot;&gt;&amp;lt;alert&lt;/span&gt; 
	&lt;span class=&quot;na&quot;&gt;:messages&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sync=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;messages&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;:event=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;event-name-2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/alert&amp;gt;&lt;/span&gt;

// Event suffix
&lt;span class=&quot;nt&quot;&gt;&amp;lt;alert&lt;/span&gt; 
	&lt;span class=&quot;na&quot;&gt;:messages&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sync=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;messages&amp;quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;:event-suffix=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;event-name-2&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/alert&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you could listen for the event following the example I used in the previous post using the proposed helper functions. Feel free to listen to these events however since there is nothing magical happening here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// In component 1 (full event)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;componentFireEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-name-2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;event-details&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In component 2 (full event)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// this.even = &amp;#39;event-name-2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;componentSubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventDetails&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Do whatever you need to do now.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In component 1 (event suffix)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;componentFireEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-name-2&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;event-details&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In component 2 (event suffix)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// this.even = &amp;#39;event-name-2&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;componentSubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-name/&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventDetails&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Do whatever you need to do now.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So you may want to be a little more descriptive when naming your properties however, this basically outlines how it could work. Then in the case of the Alert I am using I wouldn’t need the property since there really shouldn’t be more than one on a page. However this use case may evolve and then I could use this strategy. &lt;/p&gt;

&lt;p&gt;After all this I still cannot shake the feeling I am missing something. That there is some where that this problem has been solved. Maybe it has been solved in another Javascript framework like Vue.js. Still I think this is a pretty solid solution and short of making sure you document the possibilities for the event names. That should be easy your a developer you document everything with amazing precision right…right?&lt;/p&gt;

&lt;p&gt;I could possibly envision a situation where your component has more than a few events and this may not scale really well. However, in that situation it may be more of an issue with how the component is built. This is definitely an interesting problem I have never encountered before.&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>So yesterday I posted about Vue.js component messaging. This is in a way a continuation so you will want to read that first “Vue.js Component Messaging”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1434394673726-e8232a5903b4.jpg&quot;}" /></entry><entry><title>Vue.js Component Messaging</title><link href="http://danholloran.me/2015/12/07/vues-js-component-messaging/" rel="alternate" type="text/html" title="Vue.js Component Messaging" /><published>2015-12-07T18:16:00-06:00</published><updated>2015-12-07T18:16:00-06:00</updated><id>http://danholloran.me/2015/12/07/vues-js-component-messaging</id><content type="html" xml:base="http://danholloran.me/2015/12/07/vues-js-component-messaging/">&lt;p&gt;The other day I was working through how to abstract an alert list into its own component. Basically it is an &lt;code&gt;ul&lt;/code&gt; where each alert is a &lt;code&gt;li&lt;/code&gt; pretty simple. So using Vue.js, &lt;a href=&quot;http://browserify.org/&quot;&gt;Browserify&lt;/a&gt;, and &lt;a href=&quot;https://github.com/vuejs/vueify&quot;&gt;Vueify&lt;/a&gt; this is pretty simple but the problem was how do the other components add alerts. I may be missing something however, it does not seem like Vue.js. offers any sort of component to component event system. Well, at least outside of a parent child relationship which I did not want to go that route since multiple components may need to dispatch alerts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This will be more of a high level exercise than a post you can directly copy code from. Many pieces will be missing for brevity and I will assume you have at least used Vue.js a little.&lt;/p&gt;

&lt;p&gt;So my solution currently is to send an event to the main Vue.js instance that controls all the components. This event is dispatched from the component that wants to add alert. Then I can pass the message along to the Alert component using &lt;a href=&quot;http://vuejs.org/guide/components.html#Passing_Data_with_Props&quot;&gt;component properties&lt;/a&gt;. Finally I can handle anything I need to do when the value updates using &lt;a href=&quot;http://vuejs.org/api/#computed&quot;&gt;computed properties&lt;/a&gt;. I honestly do not feel this is the correct approach but it works I will outline another idea below I may implement. I do believe that outlining the whole thought process may be helpful.&lt;/p&gt;

&lt;p&gt;So basically there is a List component that I want to be able to add alerts from without it having to know about the Alert component. So firing off an event seems like the way to do it right? The following is the important parts of the list component.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// The message details.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s1&quot;&gt;&amp;#39;This is the message value&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Value&lt;/span&gt;
	&lt;span class=&quot;s1&quot;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Status&lt;/span&gt;
	&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Timeout &lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This will be fired at some point when something happens in the list.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Such as an item was removed successfully.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;add-alert-message&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;this.$dispatch&lt;/code&gt; sends an event up the parent chain you can learn more about component events &lt;a href=&quot;http://vuejs.org/guide/components.html#Custom_Events&quot;&gt;here&lt;/a&gt;. However, there does not seem to be a way to subscribe to this event from another component. The next step happens in the main Vue.js instance where you can subscribe to the event and then apply it to a messages array on the Vue.js data object. You can also do something like check for duplicates at this level as well this could also be handled in the computed properties section as well. Which kind of feels weird since the Alert component should be in charge of what consists as a duplicate alert.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// The main Vue.js Instance.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;messages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;events&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;add-alert-message&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Check for duplicates and anything else you need to do.&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So this works and all however you now have to let the alert component know about &lt;code&gt;this.messages&lt;/code&gt; which you can do by passing messages to the alert component. The following snippet binds the Vue.js messages to the Alert component messages property. Using the &lt;code&gt;.sync&lt;/code&gt; modifier will allow the values to sync from the Vue.js instance to the Alert component.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;alert&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;:messages&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sync=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;messages&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/alert&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you will need to use computed properties on the alert component since you need to know when it is updated. So far I have not found a better way to handle this. I needed to be able to set a timeout so the messages would disappear after a short time. You could handle this in the main Vue.js instance but that would kind of defeat the point of a component.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Alert component configuration.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setAlertMessagesTimeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// This will go through the alerts and set a timeout so the alerts can automatically be removed.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;messages&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;computed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alertMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAlertMessagesTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alertMessages&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;messages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;No finally you can loop over the alerts and output them in the Alert components.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;message in alertMessages&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;alert alert-{message.status}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;{message.value}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So it almost seems like there should be a better way… I have considered firing an event off of the body or whatever element that is used for the Vue.js instance. This way you could easily pass messages between components. You could have 2 helper functions one that handles firing the event so you will not have to worry about it and one that subscribes to the event. This would basically bypass the main Vue.js instance having to know about what the components are doing.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// In component 1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;componentFireEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;event-details&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In component 2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;componentSubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;event-name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eventDetails&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// Do whatever you need to do now.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using some sort of abstraction like this would help you not have to remember what element you are firing the event on each time. I may refactor and flesh this thought out more as I learn. Maybe there is an even better way to handle it that I have not thought of. I also may have missed something in the documentation that solves this. Maybe I am trying to force a square peg into a round hole and there is a good reason why it is the way it is. I may never know…&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>The other day I was working through how to abstract an alert list into its own component. Basically it is an ul where each alert is a li pretty simple. So using Vue.js, Browserify, and Vueify this is pretty simple but the problem was how do the other components add alerts. I may be missing something however, it does not seem like Vue.js. offers any sort of component to component event system. Well, at least outside of a parent child relationship which I did not want to go that route since multiple components may need to dispatch alerts.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1436915947297-3a94186c8133.jpg&quot;}" /></entry><entry><title>Experimenting With Laravel and Vue.js</title><link href="http://danholloran.me/2015/12/05/experimenting-with-laravel-and-vue-js/" rel="alternate" type="text/html" title="Experimenting With Laravel and Vue.js" /><published>2015-12-05T21:49:22-06:00</published><updated>2015-12-05T21:49:22-06:00</updated><id>http://danholloran.me/2015/12/05/experimenting-with-laravel-and-vue-js</id><content type="html" xml:base="http://danholloran.me/2015/12/05/experimenting-with-laravel-and-vue-js/">&lt;p&gt;So I’ve been playing with &lt;a href=&quot;http://laravel.com/&quot;&gt;Laravel&lt;/a&gt; and &lt;a href=&quot;http://vuejs.org/&quot;&gt;Vue.js&lt;/a&gt; which I have really started to like. It seems every time I have to write boring repetitive code there’s already something that handles it for you.&lt;/p&gt;

&lt;p&gt;It’s fairly refreshing coming from the WordPresss world were a lot of this is handled via plugins. Which is great since they are easy to use but they have the draw back of loading assets on there own and saving their options to the database. Those two things we all know are the biggest bottlenecks in your sites speed. It is also nice to have testing  built in from the get go so you do not have to do any real work except to start writing test. Also with &lt;a href=&quot;http://laravel.com/docs/5.1/elixir&quot;&gt;Laravel Elixir&lt;/a&gt; it makes using Gulp a breeze. Your development environments are easily setup using &lt;a href=&quot;http://laravel.com/docs/5.1/homestead&quot;&gt;Laravel Homestead&lt;/a&gt; and &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt;. The Laravel templating engine &lt;a href=&quot;http://laravel.com/docs/5.1/blade&quot;&gt;Blade&lt;/a&gt; is so easy to use and so much cleaner then having PHP all over your HTML. Also you have &lt;a href=&quot;http://laravel.com/docs/5.1/routing&quot;&gt;Routes&lt;/a&gt; which to me is a lot less painful than WordPress permalinks. There are so many things that Laravel can do.&lt;/p&gt;

&lt;p&gt;I’ve really liked Vue.js reactive programming and handling all data updates via a JS object so you never have to touch the DOM. At first it is a little weird that things like event handlers are in your HTML markup but in the end it reduces the amount of JS that’s has to be written. I still think jQuery has its place however, it rapidly falls apart in once you have to write a lot of it.&lt;/p&gt;

&lt;p&gt;Do not get me wrong WordPress still has its place especially in simple marketing sites built for clients to maintain. I still have not found a better administrator experience out of the box than WordPress. I just sometimes wish the WordPress community was a little more receptive to changes in work flow such as using Composer. Sometimes it almost seems like the core WordPress team almost seems more interested in some of the newer tools than the community. I guess the right tool for the right job and all these different tools definitely have their time and place.&lt;/p&gt;

&lt;p&gt;It almost seems like tools like Laravel and Vue.js have a different mind set. In that ease of development and maintenance on the development side is top priority. One of the best things that comes with this is that it is better for your users since there is a better chance that the site will be faster. Since there is not a large amount of database interactions for content and options.&lt;/p&gt;

&lt;p&gt;If you want to get started with Laravel and Vue.js I suggest checking out &lt;a href=&quot;https://laracasts.com&quot;&gt;Laracasts&lt;/a&gt;. The screencasts are amazing and will help you get up and running quickly.&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>So I’ve been playing with Laravel and Vue.js which I have really started to like. It seems every time I have to write boring repetitive code there’s already something that handles it for you.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1438216983993-cdcd7dea84ce.jpg&quot;}" /></entry><entry><title>Setting Up Your Shell</title><link href="http://danholloran.me/2015/09/29/setting-up-your-shell/" rel="alternate" type="text/html" title="Setting Up Your Shell" /><published>2015-09-29T20:38:00-05:00</published><updated>2015-09-29T20:38:00-05:00</updated><id>http://danholloran.me/2015/09/29/setting-up-your-shell</id><content type="html" xml:base="http://danholloran.me/2015/09/29/setting-up-your-shell/">&lt;p&gt;So you want to setup your shell thats awesome! This will be primarily relevant to Mac OS X since if your on Linux you should already be comfortable with the shell and if your on Windows I’m sorry even though Windows 10 does look pretty cool. I will go through some basic configuration of iTerm 2 and get zshell setup.&lt;/p&gt;

&lt;p&gt;First of all Mac OS X terminal is fairly barebones it works in a pinch but I like something a little more customizable. So I prefer &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm 2&lt;/a&gt; I will be using it for the duration of this post. So go ahead and download it and install it I’ll be here waiting. Once iTerm downloads go ahead and install it.&lt;/p&gt;

&lt;p&gt;One of the biggest pain points I think when you get started using the CLI is landing at a blinking cursor and are not sure where to go from there. So I believe it helps to customize your terminal so it is a little more inviting. Also it will help you be more efficient when using your terminal.&lt;/p&gt;

&lt;h3 id=&quot;iterm-2-customizations&quot;&gt;iTerm 2 Customizations&lt;/h3&gt;
&lt;p&gt;iTerm 2 has the ability for a large amount of customization through the preferences. One of the main highlights is the ease of altering your color scheme. Much like your editor you can find iTerm 2 color schemes or you can make your own. You can find the color scheme editor under &lt;code&gt;Preferences &amp;gt; Profile &amp;gt; Colors&lt;/code&gt;. There you can either tweak the colors or import a color scheme from the Load Presets… drop down. You can find new color schemes on the &lt;a href=&quot;http://iterm2colorschemes.com/&quot;&gt;iTerm 2 Color Schemes&lt;/a&gt; or possibly the creator of your code editors theme also has a scheme created for iTerm 2.&lt;/p&gt;

&lt;p&gt;A few other top Preferences to check out would be &lt;code&gt;Preferences &amp;gt; Profile &amp;gt; Text&lt;/code&gt; where you can set a custom terminal font, edit the way the cursor looks and tweak how the text is rendered. Under &lt;code&gt;Preferences &amp;gt; Profile &amp;gt; Window&lt;/code&gt; you can tweak how the terminal window is displayed you can set a custom background, set the opacity of the background and more. You can enable notifications under &lt;code&gt;Preferences &amp;gt; Profile &amp;gt; Terminal&lt;/code&gt;. There are many more customizations under &lt;code&gt;Preferences&lt;/code&gt; that you can tweak to get your terminal just right.&lt;/p&gt;

&lt;h3 id=&quot;enable-zshell&quot;&gt;Enable zshell&lt;/h3&gt;
&lt;p&gt;Zshell is a shell much like the default bash shell that is set by default in Mac OS X. A shell is basically the environment that you execute commands. It adds tools to allow you to accomplish your tasks. The default bash shell is good but zshell in my opinion is better bash especially when paired with &lt;a href=&quot;http://ohmyz.sh/&quot;&gt;OHMyZSH&lt;/a&gt;. Changing your default shell to zshell is easy just paste the following into your terminal &lt;code&gt;chsh -s $(which zsh)&lt;/code&gt;. Then you will need to open a new tab in iTerm 2 with &lt;code&gt;cmd+t&lt;/code&gt; so the change will take effect. Then you can paste &lt;code&gt;echo $SHELL&lt;/code&gt; into your terminal and you should see &lt;code&gt;/bin/zsh&lt;/code&gt;. That is all you need to do.&lt;/p&gt;

&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h3&gt;
&lt;p&gt;We now have iTerm 2 setup with zshell enabled. Next we will ned to setup OHMyZSH and learn about the .zshrc configuration files.&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>So you want to setup your shell thats awesome! This will be primarily relevant to Mac OS X since if your on Linux you should already be comfortable with the shell and if your on Windows I’m sorry even though Windows 10 does look pretty cool. I will go through some basic configuration of iTerm 2 and get zshell setup.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1433833103303-111110aae192.jpg&quot;}" /></entry><entry><title>Don’t Fear The Shell</title><link href="http://danholloran.me/2015/09/20/dont-fear-the-shell/" rel="alternate" type="text/html" title="Don&#39;t Fear The Shell" /><published>2015-09-20T19:36:00-05:00</published><updated>2015-09-20T19:36:00-05:00</updated><id>http://danholloran.me/2015/09/20/dont-fear-the-shell</id><content type="html" xml:base="http://danholloran.me/2015/09/20/dont-fear-the-shell/">&lt;p&gt;So, I have noticed a rather alarming aversion to the command line (CLi) for developers. If you really think about it the CLi is not much different from a normal text editor. &lt;/p&gt;

&lt;p&gt;Sure it can be somewhat intimidating when you open an application and you see &lt;code&gt;bash-3.2$ &lt;/code&gt; what do I do with this… I agree I once felt overwhelmed when faced with the CLi. This magical black box tool until I spent some time getting to know it. Once I realized it was not much different from any other programming language you just interact with it a little different. &lt;/p&gt;

&lt;p&gt;Also once I discovered   &lt;a href=&quot;https://en.wikipedia.org/wiki/Z_shell&quot;&gt;Z Shell(zsh)&lt;/a&gt;, &lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm2&lt;/a&gt;, and &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;OHMyZSH&lt;/a&gt; did I feel comfortable working with applications without a GUI. Do not get me wrong I still use apps like &lt;a href=&quot;http://www.git-tower.com/&quot;&gt;Tower&lt;/a&gt; to work with &lt;a href=&quot;https://git-scm.com/&quot;&gt;Git&lt;/a&gt; since I feel more powerful using Tower. However, I am still comfortable using the CLi when needed such as using &lt;a href=&quot;http://git-scm.com/docs/git-bisect&quot;&gt;Git Bisect&lt;/a&gt; which can’t be accomplished via tower, at least not that I know of. &lt;/p&gt;

&lt;p&gt;You can take advantage of tools such as &lt;a href=&quot;http://bower.io/&quot;&gt;Bower&lt;/a&gt; for front end package management, &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; for OS X package management and &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp.js&lt;/a&gt; to handle automating among other tools. You can also easily build your own Shell scripts to automate common tasks. I honestly believe it is faster and easier to build for the CLi mainly because you do not have to deal with options UI. If you have ever released an application with any sort of options you have felt this pain. It all ends up in a way kind of  in the format of JSON any way we might as well cut out the middle man. &lt;/p&gt;

&lt;p&gt;Using OHMyZSH you can add plugins and themes to increase the efficiency of your CLI usage. Over the course of the next few posts I will outline how simple it is to get started using the CLi. You shall no longer Fear the Shell.&lt;/p&gt;</content><author><name>Dan Holloran</name></author><summary>So, I have noticed a rather alarming aversion to the command line (CLi) for developers. If you really think about it the CLi is not much different from a normal text editor.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://danholloran.me{&quot;featured&quot;=&gt;&quot;photo-1433833103303-111110aae192.jpg&quot;}" /></entry></feed>
